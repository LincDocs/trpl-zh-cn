import{_ as i,e as t,j as a,o as n}from"./app-BUAJ0pNw.js";const o={};function d(s,e){return n(),t("div",null,e[0]||(e[0]=[a('<h2 id="读取文件" tabindex="-1">读取文件</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch12-02-reading-a-file.md" target="_blank" rel="noopener noreferrer">ch12-02-reading-a-file.md</a><br><br><br> commit 02a168ed346042f07010f8b65b4eeed623dd31d1</p></blockquote><p>现在我们要增加读取由 <code>file_path</code> 命令行参数指定的文件的功能。首先，需要一个用来测试的示例文件：我们会用一个拥有多行少量文本且有一些重复单词的文件。示例 12-3 是一首艾米莉·狄金森（Emily Dickinson）的诗，它正适合这个工作！在项目根目录创建一个文件 <code>poem.txt</code>，并输入诗 &quot;I&#39;m nobody! Who are you?&quot;：</p><p><span class="filename">文件名：poem.txt</span></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#include ../listings/ch12-an-io-project/listing-12-03/poem.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-3：艾米莉·狄金森的诗 “I’m nobody! Who are you?”，一个好的测试用例</span></p><p>创建完这个文件之后，修改 <em>src/main.rs</em> 并增加如示例 12-4 所示的打开文件的代码：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,should_panic,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,should_panic,noplayground" data-title="rust,should_panic,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-4：读取第二个参数所指定的文件内容</span></p><p>首先，我们增加了一个 <code>use</code> 语句来引入标准库中的相关部分：我们需要 <code>std::fs</code> 来处理文件。</p><p>在 <code>main</code> 中新增了一行语句：<code>fs::read_to_string</code> 接受 <code>file_path</code>，打开文件，接着返回包含其内容的 <code>std::io::Result&lt;String&gt;</code>。</p><p>在这些代码之后，我们再次增加了临时的 <code>println!</code> 打印出读取文件之后 <code>contents</code> 的值，这样就可以检查目前为止的程序能否工作。</p><p>尝试运行这些代码，随意指定一个字符串作为第一个命令行参数（因为还未实现搜索功能的部分）而将 <em>poem.txt</em> 文件将作为第二个参数：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好的！代码读取并打印出了文件的内容。虽然它还有一些瑕疵：此时 <code>main</code> 函数有着多个职能，通常函数只负责一个功能的话会更简洁并易于维护。另一个问题是没有尽可能的处理错误。虽然我们的程序还很小，这些瑕疵并不是什么大问题，不过随着程序功能的丰富，将会越来越难以用简单的方法修复它们。在开发程序时，及早开始重构是一个最佳实践，因为重构少量代码时要容易的多，所以让我们现在就开始吧。</p>',16)]))}const r=i(o,[["render",d],["__file","ch12-02-reading-a-file.html.vue"]]),c=JSON.parse(`{"path":"/ch12-02-reading-a-file.html","title":"ch12-02-reading-a-file","lang":"zh-CN","frontmatter":{"description":"读取文件 ch12-02-reading-a-file.md commit 02a168ed346042f07010f8b65b4eeed623dd31d1 现在我们要增加读取由 file_path 命令行参数指定的文件的功能。首先，需要一个用来测试的示例文件：我们会用一个拥有多行少量文本且有一些重复单词的文件。示例 12-3 是一首艾米莉·狄金森（E...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch12-02-reading-a-file.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"读取文件 ch12-02-reading-a-file.md commit 02a168ed346042f07010f8b65b4eeed623dd31d1 现在我们要增加读取由 file_path 命令行参数指定的文件的功能。首先，需要一个用来测试的示例文件：我们会用一个拥有多行少量文本且有一些重复单词的文件。示例 12-3 是一首艾米莉·狄金森（E..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"ch12-02-reading-a-file.md","excerpt":"<h2>读取文件</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch12-02-reading-a-file.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch12-02-reading-a-file.md</a><br>\\n<br><br>\\ncommit 02a168ed346042f07010f8b65b4eeed623dd31d1</p>\\n</blockquote>\\n<p>现在我们要增加读取由 <code>file_path</code> 命令行参数指定的文件的功能。首先，需要一个用来测试的示例文件：我们会用一个拥有多行少量文本且有一些重复单词的文件。示例 12-3 是一首艾米莉·狄金森（Emily Dickinson）的诗，它正适合这个工作！在项目根目录创建一个文件 <code>poem.txt</code>，并输入诗 \\"I'm nobody! Who are you?\\"：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch12-02-reading-a-file.md","value":{"title":"ch12-02-reading-a-file","path":"ch12-02-reading-a-file.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch12-02-reading-a-file.md"},{"source":"SUMMARY.md","target":"ch12-02-reading-a-file.md"}]}}}`);export{r as comp,c as data};
