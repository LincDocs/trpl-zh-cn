import{_ as o,e as d,j as i,f as t,i as s,g as a,h as r,r as l,o as p}from"./app-jlAZUEML.js";const c={};function m(g,e){const n=l("RouteLink");return p(),d("div",null,[e[37]||(e[37]=i('<h2 id="测试的组织结构" tabindex="-1"><a class="header-anchor" href="#测试的组织结构"><span>测试的组织结构</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch11-03-test-organization.md" target="_blank" rel="noopener noreferrer">ch11-03-test-organization.md</a><br><br><br> commit 654d8902d380dbb8dd94ed2e548dfc0aa80c07cb</p></blockquote><p>本章一开始就提到，测试是一个复杂的概念，而且不同的开发者也采用不同的技术和组织。Rust 社区倾向于根据测试的两个主要分类来考虑问题：<strong>单元测试</strong>（<em>unit tests</em>）与 <strong>集成测试</strong>（<em>integration tests</em>）。单元测试倾向于更小而更集中，在隔离的环境中一次测试一个模块，或者是测试私有接口。而集成测试对于你的库来说则完全是外部的。它们与其他外部代码一样，通过相同的方式使用你的代码，只测试公有接口而且每个测试都有可能会测试多个模块。</p><p>为了保证你的库能够按照你的预期运行，从独立和整体的角度编写这两类测试都是非常重要的。</p><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h3><p>单元测试的目的是在与其他部分隔离的环境中测试每一个单元的代码，以便于快速而准确地验证某个单元的代码功能是否符合预期。单元测试与它们要测试的代码共同存放在位于 <em>src</em> 目录下相同的文件中。规范是在每个文件中创建包含测试函数的 <code>tests</code> 模块，并使用 <code>cfg(test)</code> 标注模块。</p><h4 id="测试模块和-cfg-test" tabindex="-1"><a class="header-anchor" href="#测试模块和-cfg-test"><span>测试模块和 <code>#[cfg(test)]</code></span></a></h4><p>测试模块的 <code>#[cfg(test)]</code> 注解告诉 Rust 只在执行 <code>cargo test</code> 时才编译和运行测试代码，而在运行 <code>cargo build</code> 时不这么做。这在只希望构建库的时候可以节省编译时间，并且因为它们并没有包含测试，所以能减少编译产生的文件的大小。与之对应的集成测试因为位于另一个文件夹，所以它们并不需要 <code>#[cfg(test)]</code> 注解。然而单元测试位于与源码相同的文件中，所以你需要使用 <code>#[cfg(test)]</code> 来指定它们不应该被包含进编译结果中。</p><p>回忆本章第一部分新建的 <code>adder</code> 项目，Cargo 为我们生成了如下代码：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述代码就是自动生成的测试模块。<code>cfg</code> 属性代表<em>配置</em>（<em>configuration</em>） ，它告诉 Rust，接下来的项，只有在给定特定配置选项时，才会被包含。在这种情况下，配置选项是 <code>test</code>，即 Rust 所提供的用于编译和运行测试的配置选项。通过使用 <code>cfg</code> 属性，Cargo 只会在我们主动使用 <code>cargo test</code> 运行测试时才编译测试代码。这包括测试模块中可能存在的帮助函数，以及标注为 <code>#[test]</code> 的函数。</p><h4 id="测试私有函数" tabindex="-1"><a class="header-anchor" href="#测试私有函数"><span>测试私有函数</span></a></h4><p>测试社区中一直存在关于是否应该对私有函数直接进行测试的论战，而在其他语言中想要测试私有函数是一件困难的，甚至是不可能的事。不过无论你坚持哪种测试意识形态，Rust 的私有性规则确实允许你测试私有函数。考虑示例 11-12 中带有私有函数 <code>internal_adder</code> 的代码：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-12/src/lib.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 11-12：测试私有函数</span></p>',17)),t("p",null,[e[1]||(e[1]=s("注意 ")),e[2]||(e[2]=t("code",null,"internal_adder",-1)),e[3]||(e[3]=s(" 函数并没有标记为 ")),e[4]||(e[4]=t("code",null,"pub",-1)),e[5]||(e[5]=s("。测试也不过是 Rust 代码，同时 ")),e[6]||(e[6]=t("code",null,"tests",-1)),e[7]||(e[7]=s(" 也仅仅是另一个模块。正如 ")),a(n,{to:"/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html"},{default:r(()=>e[0]||(e[0]=[s("“路径用于引用模块树中的项”")])),_:1}),e[8]||(e[8]=s(" 部分所说，子模块的项可以使用其上级模块的项。在测试中，我们通过 ")),e[9]||(e[9]=t("code",null,"use super::*",-1)),e[10]||(e[10]=s(" 将 ")),e[11]||(e[11]=t("code",null,"tests",-1)),e[12]||(e[12]=s(" 模块的父模块的所有项引入了作用域，接着测试调用了 ")),e[13]||(e[13]=t("code",null,"internal_adder",-1)),e[14]||(e[14]=s("。如果你并不认为应该测试私有函数，Rust 也不会强迫你这么做。"))]),e[38]||(e[38]=i(`<h3 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试"><span>集成测试</span></a></h3><p>在 Rust 中，集成测试对于你需要测试的库来说完全是外部的。同其他使用库的代码一样使用库文件，也就是说它们只能调用一部分库中的公有 API。集成测试的目的是测试库的多个部分能否一起正常工作。一些单独能正确运行的代码单元集成在一起也可能会出现问题，所以集成测试的覆盖率也是很重要的。为了创建集成测试，你需要先创建一个 <em>tests</em> 目录。</p><h4 id="tests-目录" tabindex="-1"><a class="header-anchor" href="#tests-目录"><span><em>tests</em> 目录</span></a></h4><p>为了编写集成测试，需要在项目根目录创建一个 <em>tests</em> 目录，与 <em>src</em> 同级。Cargo 知道如何去寻找这个目录中的集成测试文件。接着可以随意在这个目录中创建任意多的测试文件，Cargo 会将每一个文件当作单独的 crate 来编译。</p><p>让我们来创建一个集成测试。保留示例 11-12 中 <em>src/lib.rs</em> 的代码。创建一个 <em>tests</em> 目录，新建一个文件 <em>tests/integration_test.rs</em>。目录结构应该看起来像这样：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adder</span></span>
<span class="line"><span>├── Cargo.lock</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   └── lib.rs</span></span>
<span class="line"><span>└── tests</span></span>
<span class="line"><span>    └── integration_test.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将示例 11-13 中的代码输入到 <em>tests/integration_test.rs</em> 文件中。</p><p><span class="filename">文件名：tests/integration_test.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-13/tests/integration_test.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 11-13：一个 <code>adder</code> crate 中函数的集成测试</span></p><p>因为每一个 <code>tests</code> 目录中的测试文件都是完全独立的 crate，所以需要在每一个文件中导入库。为此与单元测试不同，我们需要在文件顶部添加 <code>use adder</code>。</p><p>并不需要将 <em>tests/integration_test.rs</em> 中的任何代码标注为 <code>#[cfg(test)]</code>。 <code>tests</code> 文件夹在 Cargo 中是一个特殊的文件夹，Cargo 只会在运行 <code>cargo test</code> 时编译这个目录中的文件。现在就运行 <code>cargo test</code> 试试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch11-writing-automated-tests/listing-11-13/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在有了三个部分的输出：单元测试、集成测试和文档测试。注意如果一个部分的任何测试失败，之后的部分都不会运行。例如如果一个单元测试失败，则不会有任何集成测试和文档测试的输出，因为这些测试只会在所有单元测试都通过后才会执行。</p><p>第一部分单元测试与我们之前见过的一样：每个单元测试一行（示例 11-12 中有一个叫做 <code>internal</code> 的测试），接着是一个单元测试的摘要行。</p><p>集成测试部分以行 <code>Running tests/integration_test.rs</code>开头。接下来每一行是一个集成测试中的测试函数，以及一个位于 <code>Doc-tests adder</code> 部分之前的集成测试的摘要行。</p><p>每一个集成测试文件有对应的测试结果部分，所以如果在 <em>tests</em> 目录中增加更多文件，测试结果中就会有更多集成测试结果部分。</p><p>我们仍然可以通过指定测试函数的名称作为 <code>cargo test</code> 的参数来运行特定集成测试。也可以使用 <code>cargo test</code> 的 <code>--test</code> 后跟文件的名称来运行某个特定集成测试文件中的所有测试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch11-writing-automated-tests/output-only-05-single-integration/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令只运行了 <em>tests</em> 目录中我们指定的文件 <code>integration_test.rs</code> 中的测试。</p><h4 id="集成测试中的子模块" tabindex="-1"><a class="header-anchor" href="#集成测试中的子模块"><span>集成测试中的子模块</span></a></h4><p>随着集成测试的增加，你可能希望在 <code>tests</code> 目录创建更多文件以便更好地组织它们，例如根据测试的功能来将测试分组。如前所述，<em>tests</em> 目录中的每一个文件都被编译成一个单独的 crate，这有助于创建独立的作用域，以便更接近于最终用户使用你的 crate 的方式。但这意味着，<em>tests</em> 目录中的文件的行为，和你在第七章中学习如何将代码分为模块和文件时，学到的 <em>src</em> 中的文件的行为不一样。</p>`,22)),t("p",null,[e[16]||(e[16]=s("当你有一些在多个集成测试文件都会用到的帮助函数，而你尝试按照第七章 ")),a(n,{to:"/ch07-05-separating-modules-into-different-files.html"},{default:r(()=>e[15]||(e[15]=[s("“将模块移动到其他文件”")])),_:1}),e[17]||(e[17]=s(" 部分的步骤将它们提取到一个通用的模块中时， ")),e[18]||(e[18]=t("em",null,"tests",-1)),e[19]||(e[19]=s(" 目录中文件行为的不同就会凸显出来。例如，如果我们可以创建 一个")),e[20]||(e[20]=t("em",null,"tests/common.rs",-1)),e[21]||(e[21]=s(" 文件并创建一个名叫 ")),e[22]||(e[22]=t("code",null,"setup",-1)),e[23]||(e[23]=s(" 的函数，我们希望这个函数能被多个测试文件的测试函数调用："))]),e[39]||(e[39]=i(`<p><span class="filename">文件名：tests/common.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/tests/common.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果再次运行测试，将会在测试结果中看到一个新的对应 <em>common.rs</em> 文件的测试结果部分，即便这个文件并没有包含任何测试函数，也没有任何地方调用了 <code>setup</code> 函数：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们并不想要<code>common</code> 出现在测试结果中显示 <code>running 0 tests</code> 。我们只是希望其能被其他多个集成测试文件中调用罢了。</p><p>为了不让 <code>common</code> 出现在测试输出中，我们将创建 <em>tests/common/mod.rs</em> ，而不是创建 <em>tests/common.rs</em> 。现在项目目录结构看起来像这样：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├── Cargo.lock</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   └── lib.rs</span></span>
<span class="line"><span>└── tests</span></span>
<span class="line"><span>    ├── common</span></span>
<span class="line"><span>    │   └── mod.rs</span></span>
<span class="line"><span>    └── integration_test.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),t("p",null,[e[25]||(e[25]=s("这是一种老的命名规范，正如第七章 ")),a(n,{to:"/ch07-05-separating-modules-into-different-files.html#%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84"},{default:r(()=>e[24]||(e[24]=[s("“另一种文件路径”")])),_:1}),e[26]||(e[26]=s(" 中提到的 Rust 仍然理解它们。这样命名告诉 Rust 不要将 ")),e[27]||(e[27]=t("code",null,"common",-1)),e[28]||(e[28]=s(" 看作一个集成测试文件。将 ")),e[29]||(e[29]=t("code",null,"setup",-1)),e[30]||(e[30]=s(" 函数代码移动到 ")),e[31]||(e[31]=t("em",null,"tests/common/mod.rs",-1)),e[32]||(e[32]=s(" 并删除 ")),e[33]||(e[33]=t("em",null,"tests/common.rs",-1)),e[34]||(e[34]=s(" 文件之后，测试输出中将不会出现这一部分。")),e[35]||(e[35]=t("em",null,"tests",-1)),e[36]||(e[36]=s(" 目录中的子目录不会被作为单独的 crate 编译或作为一个测试结果部分出现在测试输出中。"))]),e[40]||(e[40]=i('<p>一旦拥有了 <em>tests/common/mod.rs</em>，就可以将其作为模块以便在任何集成测试文件中使用。这里是一个 <em>tests/integration_test.rs</em> 中调用 <code>setup</code> 函数的 <code>it_adds_two</code> 测试的例子：</p><p><span class="filename">文件名：tests/integration_test.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-13-fix-shared-test-code-problem/tests/integration_test.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意 <code>mod common;</code> 声明与示例 7-21 中展示的模块声明相同。接着在测试函数中就可以调用 <code>common::setup()</code> 了。</p><h4 id="二进制-crate-的集成测试" tabindex="-1"><a class="header-anchor" href="#二进制-crate-的集成测试"><span>二进制 crate 的集成测试</span></a></h4><p>如果项目是二进制 crate 并且只包含 <em>src/main.rs</em> 而没有 <em>src/lib.rs</em>，这样就不可能在 <em>tests</em> 目录创建集成测试并使用 <code>extern crate</code> 导入 <em>src/main.rs</em> 中定义的函数。只有库 crate 才会向其他 crate 暴露了可供调用和使用的函数；二进制 crate 只意在单独运行。</p><p>这就是许多 Rust 二进制项目使用一个简单的 <em>src/main.rs</em> 调用 <em>src/lib.rs</em> 中的逻辑的原因之一。因为通过这种结构，集成测试 <strong>就可以</strong> 通过 <code>extern crate</code> 测试库 crate 中的主要功能了，而如果这些重要的功能没有问题的话，<em>src/main.rs</em> 中的少量代码也就会正常工作且不需要测试。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Rust 的测试功能提供了一个确保即使你改变了函数的实现方式，也能继续以期望的方式运行的途径。单元测试独立地验证库的不同部分，也能够测试私有函数实现细节。集成测试则检查多个部分是否能结合起来正确地工作，并像其他外部代码那样测试库的公有 API。即使 Rust 的类型系统和所有权规则可以帮助避免一些 bug，不过测试对于减少代码中不符合期望行为的逻辑 bug 仍然是很重要的。</p><p>让我们将本章和其他之前章节所学的知识组合起来，在下一章一起编写一个项目！</p>',10))])}const h=o(c,[["render",m],["__file","ch11-03-test-organization.html.vue"]]),b=JSON.parse('{"path":"/ch11-03-test-organization.html","title":"ch11-03-test-organization","lang":"zh-CN","frontmatter":{"description":"测试的组织结构 ch11-03-test-organization.md commit 654d8902d380dbb8dd94ed2e548dfc0aa80c07cb 本章一开始就提到，测试是一个复杂的概念，而且不同的开发者也采用不同的技术和组织。Rust 社区倾向于根据测试的两个主要分类来考虑问题：单元测试（unit tests）与 集成测试（in...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch11-03-test-organization.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"测试的组织结构 ch11-03-test-organization.md commit 654d8902d380dbb8dd94ed2e548dfc0aa80c07cb 本章一开始就提到，测试是一个复杂的概念，而且不同的开发者也采用不同的技术和组织。Rust 社区倾向于根据测试的两个主要分类来考虑问题：单元测试（unit tests）与 集成测试（in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":9.86,"words":2958},"filePathRelative":"ch11-03-test-organization.md","excerpt":"<h2>测试的组织结构</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch11-03-test-organization.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch11-03-test-organization.md</a><br>\\n<br><br>\\ncommit 654d8902d380dbb8dd94ed2e548dfc0aa80c07cb</p>\\n</blockquote>\\n<p>本章一开始就提到，测试是一个复杂的概念，而且不同的开发者也采用不同的技术和组织。Rust 社区倾向于根据测试的两个主要分类来考虑问题：<strong>单元测试</strong>（<em>unit tests</em>）与 <strong>集成测试</strong>（<em>integration tests</em>）。单元测试倾向于更小而更集中，在隔离的环境中一次测试一个模块，或者是测试私有接口。而集成测试对于你的库来说则完全是外部的。它们与其他外部代码一样，通过相同的方式使用你的代码，只测试公有接口而且每个测试都有可能会测试多个模块。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch11-03-test-organization.md","value":{"title":"ch11-03-test-organization","path":"ch11-03-test-organization.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch11-03-test-organization.md"},{"source":"SUMMARY.md","target":"ch11-03-test-organization.md"}]}}}');export{h as comp,b as data};
