import{_ as r,e as o,j as t,f as e,k as n,i,g as l,h as d,r as c,o as p}from"./app-jlAZUEML.js";const h={};function k(u,s){const a=c("RouteLink");return p(),o("div",null,[s[23]||(s[23]=t(`<h2 id="futures-和-async-语法" tabindex="-1"><a class="header-anchor" href="#futures-和-async-语法"><span>Futures 和 async 语法</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch17-01-futures-and-syntax.md" target="_blank" rel="noopener noreferrer">ch17-01-futures-and-syntax.md</a><br><br><br> commit e95efa05706c5c4309df9ed47d5e91d8ed342b7d</p></blockquote><p>Rust 异步编程的关键元素是 <em>futures</em> 和 Rust 的 <code>async</code> 与 <code>await</code> 关键字。</p><p><em>future</em> 是一个现在可能还没有准备好但将在未来某个时刻准备好的值。（相同的概念也出现在很多语言中，有时被称为 “task” 或者 “promise”。）Rust 提供了 <code>Future</code> trait 作为基础组件，这样不同的异步操作就可以在不同的数据结构上实现。在 Rust 中，我们称实现了 <code>Future</code> trait 的类型为 futures。每一个实现了 <code>Future</code> 的类型会维护自己的进度状态信息和 “ready” 的定义。</p><p><code>async</code> 关键字可以用于代码块和函数，表明它们可以被中断并恢复。在一个 async 块或 async 函数中，可以使用 <code>await</code> 关键字来等待一个 future 准备就绪，这一过程称为 <em>等待一个 future</em>。async 块或 async 函数中每一个等待 future 的地方都可能是一个 async 块或 async 函数中断并随后恢复的点。检查一个 future 并查看其值是否已经准备就绪的过程被称为 <em>轮询</em>（polling）。</p><p>其它一些语言也使用 <code>async</code> 和 <code>await</code> 关键字进行异步编程。如果你熟悉这些语言，则可能会注意到它们与 Rust 的处理方式有显著不同，包括语法上的差异。我们将看到，这样做是有充分理由的！</p><p>在大多数情况下，编写异步 Rust 代码时，我们使用 <code>async</code> 和 <code>await</code> 关键字。Rust 将其编译为等同于使用 <code>Future</code> trait 的代码，这非常类似于将 <code>for</code> 循环编译为等同于使用 <code>Iterator</code> trait 的代码。不过，由于 Rust 提供了 <code>Future</code> trait，你也可以在需要时为你自己的数据类型实现它。在整个章节中你会看到很多函数的返回值类型都有其自己的 <code>Future</code> 实现。我们会在本章结尾回到这个 trait 的定义，并深入了解它的工作原理，但现在这些细节已经足够让我们继续前进了。</p><p>这些内容可能有点抽象。让我们来编写第一个异步程序：一个小型网络爬虫。我们会从命令行传递两个 URL，并发地解析它们，并返回第一个完成解析的结果。这个示例会引入不少的新语法，不过不用担心。我们会逐步解释所有你需要了解的内容。</p><h3 id="第一个异步程序" tabindex="-1"><a class="header-anchor" href="#第一个异步程序"><span>第一个异步程序</span></a></h3><p>为了保持本章的内容专注于学习 async，而不是处理生态系统的部分组件，我们已经创建了一个 <code>trpl</code> crate（<code>trpl</code> 是 “The Rust Programming Language” 的缩写）。它重导出了你需要的所有类型、traits 和函数，它们主要来自于 <a href="https://crates.io/crates/futures" target="_blank" rel="noopener noreferrer"><code>futures</code></a> 和 <a href="https://tokio.rs" target="_blank" rel="noopener noreferrer"><code>tokio</code></a> crates。</p><ul><li><code>futures</code> crate 是一个 Rust 异步代码实验的官方仓库，也正是 <code>Future</code> 最初设计的地方。</li><li>Tokio 是目前 Rust 中应用最广泛的异步运行时（async runtime），特别是（但不仅是！）web 应用。这里还有其他优秀的运行时，它们可能更适合你的需求。我们在 <code>trpl</code> 的底层使用 Tokio 是因为它经过了充分测试且广泛使用。</li></ul><p>在一些场景中，<code>trpl</code> 也会重命名或者封装原始 API 以便我们专注于与本章相关的细节。如果你想了解该 crate 的具体功能，我们鼓励你查看<a href="https://github.com/rust-lang/book/tree/main/packages/trpl" target="_blank" rel="noopener noreferrer">其源码</a>。你可以看到每个重导出的内容来自哪个 crate，我们留下了大量注释来解释这个 crate 的用途。</p><p>创建一个名为 <code>hello-async</code> 的二进制项目并将 <code>trpl</code> crate 作为一个依赖添加：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo new hello-async</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cd hello-async</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo add trpl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以利用 <code>trpl</code> 提供的多种组件来编写第一个异步程序。我们构建了一个小的命令行工具来抓取两个网页，拉取各自的 <code>&lt;title&gt;</code> 元素，并打印出第一个完成全部过程的标题。</p><p>让我们开始编写一个函数，它获取一个网页 URL 作为参数，请求该 URL 并返回标题元素的文本：</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch17-async-await/listing-17-01/src/main.rs:all}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 17-1：定义一个 async 函数来获取一个 HTML 页面的标题元素</figcaption></figure><p>在示例 17-1 中，我们定义了一个名为 <code>page_title</code> 的函数，并使用了 <code>async</code> 关键字标记。接着我们使用 <code>trpl::get</code> 函数来获取传入的任意 URL，然后使用 <code>await</code> 关键字来等待响应。接着我们调用其 <code>text</code> 方法来获取响应的文本，这里再一次使用 <code>await</code> 关键字等待。这两个步骤都是异步的。对于 <code>get</code> 来说，我们需要等待服务器发送回其响应的第一部分，这会包含 HTTP 头（headers）、cookies 等。这部分响应可以独立于响应体发送。特别是在响应体非常大时候，接收完整响应可能会花费一些时间。因此我们不得不等待响应 <em>整体</em> 返回，所以 <code>text</code> 方法也是异步。</p>`,18)),e("p",null,[s[1]||(s[1]=i("我们必须显式地等待这两个 futures，因为 Rust 中的 futures 是 ")),s[2]||(s[2]=e("em",null,"惰性",-1)),s[3]||(s[3]=i("（")),s[4]||(s[4]=e("em",null,"lazy",-1)),s[5]||(s[5]=i("）的：在你使用 ")),s[6]||(s[6]=e("code",null,"await",-1)),s[7]||(s[7]=i(" 请求之前它们不会执行任何操作。（事实上，如果你不使用一个 futures，Rust 会显示一个编译警告）这应该会让你想起")),l(a,{to:"/ch13-02-iterators.html"},{default:d(()=>s[0]||(s[0]=[i("之前第十三章")])),_:1}),s[8]||(s[8]=i("关于迭代器的讨论。直到你调用迭代器的 ")),s[9]||(s[9]=e("code",null,"next",-1)),s[10]||(s[10]=i(" 方法（直接调用或者使用 ")),s[11]||(s[11]=e("code",null,"for",-1)),s[12]||(s[12]=i(" 循环或者类似 ")),s[13]||(s[13]=e("code",null,"map",-1)),s[14]||(s[14]=i(" 这类在底层使用 ")),s[15]||(s[15]=e("code",null,"next",-1)),s[16]||(s[16]=i(" 的方法）之前它们什么也不会做。对于 futures 来说，同样的基本理念也是适用的：除非你显式地请求，否则它们不会执行。惰性使得 Rust 可以避免提前运行异步代码，直到真正需要时才执行。"))]),s[24]||(s[24]=t(`<blockquote><p>注意：这不同于上一章节中 <code>thread::spawn</code> 的行为，当时传递给另一个线程的闭包会立即开始运行。这也与许多其他语言处理异步的方式不同！但对于 Rust 而言，这一点非常重要。稍后我们会解释原因。</p></blockquote><p>当我们有了 <code>response_text</code> 函数，就可以使用 <code>Html::parse</code> 将其解析为一个 <code>Html</code> 类型的实例。不同于原始字符串，现在我们有了一个可以将 HTML 作为更丰富数据结构来操作的数据类型。特别是我们可以使用 <code>select_first</code> 方法来找出给定 CSS 选择器（selector）中第一个匹配元素。通过传递字符串 <code>&quot;title&quot;</code>，我们会得到文档中的第一个 <code>&lt;title&gt;</code> 元素，如果它存在的话。由于可能没有任何匹配的元素，<code>select_first</code> 返回一个 <code>Option&lt;ElementRef&gt;</code>。最后我们使用 <code>Option::map</code> 方法，它允许我们在 <code>Option</code> 中有元素时对其进行处理，而在没有时则什么也不做。（这里也可以使用一个 <code>match</code> 表达式，但 <code>map</code> 更符合惯用的写法。）在传递给 <code>map</code> 的函数体中，我们调用了 <code>title_element</code> 上的 <code>inner_html</code> 来获取其内容，这是一个 <code>String</code>。当上面所讲的都完成后，我们会得到一个 <code>Option&lt;String&gt;</code>。</p><p>注意 Rust 的 <code>await</code> 关键字出现在需要等待的表达式之后而不是之前。也就是说，这是一个 <em>后缀关键字</em>（<em>postfix keyword</em>）。如果你在其它语言中使用过 async 的话，这可能与你所熟悉的有所不同。Rust 如此选择是因为这使得方法的链式调用更加简洁。因此，我们可以修改 <code>page_url_for</code> 的函数体来链式调用 <code>trpl::get</code> 和 <code>text</code> 并在其之间使用 <code>await</code>，如示例 17-2 所示：</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch17-async-await/listing-17-02/src/main.rs:chaining}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 17-2：使用 \`await\` 关键字的链式调用</figcaption></figure><p>这样我们就成功编写了第一个异步函数！在我们向 <code>main</code> 加入一些代码调用它之前，让我们再多了解下我们写了什么以及它的意义。</p><p>当 Rust 遇到一个 <code>async</code> 关键字标记的代码块时，会将其编译为一个实现了 <code>Future</code> trait 的唯一的、匿名的数据类型。当 Rust 遇到一个被标记为 <code>async</code> 的函数时，会将其编译进一个拥有异步代码块的非异步函数。异步函数的返回值类型是编译器为异步代码块所创建的匿名数据类型。</p><p>因此，编写 <code>async fn</code> 就等同于编写一个返回类型的 <em>future</em> 的函数。当编译器遇到类似示例 17-1 中 <code>async fn page_title</code> 的函数定义时，它等价于以下定义的非异步函数：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> crate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> trpl; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// required for mdbook test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> trpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> page_title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Output</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt; + &#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> trpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">        Html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select_first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inner_html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们挨个看一下转换后版本的每一个部分：</p>`,9)),e("ul",null,[e("li",null,[s[18]||(s[18]=i("它使用了之前第十章 ")),l(a,{to:"/ch10-02-traits.html#trait-%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0"},{default:d(()=>s[17]||(s[17]=[i("“trait 作为参数”")])),_:1}),s[19]||(s[19]=i(" 部分讨论过的 ")),s[20]||(s[20]=e("code",null,"impl Trait",-1)),s[21]||(s[21]=i(" 语法"))]),s[22]||(s[22]=t("<li>它返回的 trait 是一个 <code>Future</code>，它有一个关联类型 <code>Output</code>。注意 <code>Output</code> 的类型是 <code>Option&lt;String&gt;</code>，这与 <code>async fn</code> 版本的 <code>page_title</code> 的原始返回值类型相同。</li><li>所有原始函数中被调用的代码被封装进一个 <code>async move</code> 块。回忆一下，代码块是表达式。这整个块就是函数所返回的表达式</li><li>如上所述，这个异步代码块产生一个 <code>Option&lt;String&gt;</code> 类型的值。这个值与返回类型中的 <code>Output</code> 类型一致。这正类似于你已经见过的其它代码块。</li><li>新版函数的函数体是一个 <code>async move</code> 代码块，因为它如何使用 <code>url</code> 参数决定了这一点。（本章后续部分将更详细地讨论 <code>async</code> 和 <code>async move</code> 之间的区别。）</li><li>新版本的函数在返回类型中使用了一种我们之前未见过的生命周期标记：<code>&#39;_</code>。因为函数返回的 <code>Future</code> 指向一个引用（在这个例子中是指向 <code>url</code> 参数的引用）我们需要告诉 Rust 引用的生命周期。这里无需命名该生命周期，因为 Rust 足够智能到能理解这里只涉及到唯一一个引用，不过我们 <em>必须</em> 明确指出返回的 <code>Future</code> 受该生命周期的约束。</li>",5))]),s[25]||(s[25]=t('<p>现在我们可以在 <code>main</code> 中调用 <code>page_title</code>。首先，我们只会获取一个页面的标题。在示例 17-3 中，我们沿用了第十二章中获取命令行参数的相同模式。接着我们传递第一个 URL 给 <code>page_title</code>，并等待结果。因为 future 产生的值是一个 <code>Option&lt;String&gt;</code>，我们使用 <code>match</code> 表达式来根据页面是否有 <code>&lt;title&gt;</code> 来打印不同的信息。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch17-async-await/listing-17-03/src/main.rs:main}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 17-3：在 `main` 中通过一个用户提供的参数调用 `page_title` 函数</figcaption></figure><p>很不幸的是这还不能编译。唯一可以使用 <code>await</code> 关键字的地方是异步函数或者代码块中，同时 Rust 不允许将特殊的 <code>main</code> 函数标记为 <code>async</code>。</p>',3)),n(` manual-regeneration
cd listings/ch17-async-await/listing-17-03
cargo build
copy just the compiler error
`),s[26]||(s[26]=t('<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error[E0752]: `main` function is not allowed to be `async`</span></span>\n<span class="line"><span> --&gt; src/main.rs:6:1</span></span>\n<span class="line"><span>  |</span></span>\n<span class="line"><span>6 | async fn main() {</span></span>\n<span class="line"><span>  | ^^^^^^^^^^^^^^^ `main` function is not allowed to be `async`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main</code> 不能标记为 <code>async</code> 的原因是异步代码需要一个 <em>运行时</em>：即一个管理执行异步代码细节的 Rust crate。一个程序的 <code>main</code> 函数可以 <em>初始化</em> 一个运行时，但是其 <em>自身</em> 并不是一个运行时。（稍后我们会进一步解释原因。）每一个执行异步代码的 Rust 程序必须至少有一个设置运行时并执行 futures 的地方。</p><p>大部分支持异步的语言会打包一个运行时在语言中，Rust 则不是。相反，这里有很多不同的异步运行时，每一个都有适合其目标的权衡取舍。例如，一个拥有很多核心和大量内存的高吞吐 web server 与一个单核、少量内存并且没有堆分配能力的微控制器相比有着截然不同的需求。提供这些运行时的 crate 通常也提供了例如文件或者网络 IO 这类常用功能的异步版本。</p><p>从这里到本章余下部分，我们会使用 <code>trpl</code> crate 的 <code>run</code> 函数，它获取一个 future 作为参数并运行到结束。在内部，调用 <code>run</code> 会设置一个运行时来运行传递的 future。一旦 future 完成，<code>run</code> 返回 future 返回的任何值。</p><p>我们可以将 <code>page_title</code> 返回的 future 直接传递给 <code>run</code>。一旦其完成，我们能够匹配返回的 <code>Option&lt;String&gt;</code>，正如示例 17-3 我们尝试的那样。然而，在本章的大部分示例中（以及大多数实际应用中的异步代码中！），我们会执行不止一次异步函数调用，所以相反我们会传递一个 <code>async</code> 块并显式地等待 <code>page_title</code> 调用的结果，如示例 17-4 所示。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,should_panic,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,should_panic,noplayground" data-title="rust,should_panic,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch17-async-await/listing-17-04/src/main.rs:run}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 17-4：等待一个使用异步代码块的 `trpl::run`</figcaption></figure><p>当我们运行代码，我们会得到最初预想的行为：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch17-async-await/listing-17-04/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们终于有了一些可以正常工作的异步代码！现在它们可以成功编译并运行。在我们添加代码让两个网址进行竞争之前，让我们简要地回顾一下 future 是如何工作的。</p><p>每一个 <em>await point</em>，也就是代码使用 <code>await</code> 关键字的地方，代表将控制权交还给运行时的地方。为此 Rust 需要记录异步代码块中涉及的状态，这样运行时可以去执行其他工作，并在准备好时回来继续推进当前的任务。这就像你通过编写一个枚举来保存每一个 <code>await</code> point 的状态一样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch17-async-await/no-listing-state-machine/src/lib.rs:enum}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编写代码来手动控制不同状态之间的转换是非常乏味且容易出错的，特别是之后增加了更多功能和状态的时候。相反，Rust 编译器自动创建并管理异步代码的状态机数据结构。如果你感兴趣的话：是的，正常的借用和所有权也全部适用于这些数据结构。幸运的是，编译器也会为我们处理这些检查，并提供友好的错误信息。本章稍后会讲解一些相关内容！</p><p>最终需要某个组件来执行状态机。这就是运行时。（这也是为什么在了解运行时的时候，你可能会看到 <em>executors</em> 这个词：executor 是运行时中负责执行异步代码的部分。）</p><p>现在我们能够理解了之前示例 17-3 中为何编译器阻止我们将 <code>main</code> 本身标记为异步函数了。如果 <code>main</code> 是一个异步函数，需要有其它组件来管理 <code>main</code> futrue 返回的状态机，但是 <code>main</code> 是程序的入口点！为此我们在 <code>main</code> 函数中调用 <code>trpl::run</code>，它设置了一个运行时并运行 <code>async</code> 块返回的 future 并等待它返回 <code>Ready</code>。</p><blockquote><p>注意：一些运行时提供了相关的宏所以你 <em>可以</em> 编写一个异步 <code>main</code> 函数。这些宏将 <code>async fn main() { ... }</code> 重写为正常的 <code>fn main</code>，执行的逻辑与我们在示例 17-5 中手动实现的一样：像 <code>trpl::run</code> 一样调用一个函数运行 future 直到结束。</p></blockquote><p>让我们将这些代码片段整理一下来看看如何编写并发代码，这里通过两个来自命令行的不同 URL 来调用 <code>page_title</code> 并使其相互竞争。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><!-- should_panic,noplayground because mdbook does not pass args --><div class="language-rust,should_panic,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,should_panic,noplayground" data-title="rust,should_panic,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch17-async-await/listing-17-05/src/main.rs:all}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 17-5</figcaption></figure><p>示例 17-5 中以分别由用户提供的 URL 调用 <code>page_title</code> 开始。我们将调用 <code>page_title</code> 产生的 future 分别保存为 <code>title_fut_1</code> 和 <code>title_fut_2</code>。请记住，它们还没有进行任何工作，因为 future 是惰性的，并且我们还没有 <code>await</code> 它们。接着我们将 futures 传递给 <code>trpl::race</code>，它返回一个值表明哪个传递的 future 最先返回。</p><blockquote><p>注意：在内部 <code>race</code> 构建在一个更通用的函数 <code>select</code> 之上，你会在真实的 Rust 代码中更常遇到它。<code>select</code> 函数可以做很多 <code>trpl::race</code> 函数做不了的事，不过它也有一些额外的复杂性，所以目前我们先略过介绍。</p></blockquote><p>由于任何一个 future 都可以合理地 “获胜”，所以返回 <code>Result</code> 没有意义。相反 <code>race</code> 返回了一个我们之前没有见过的类型 <code>trpl::Either</code>。<code>Either</code> 类型有点类似于 <code>Result</code>，它也有两个成员。但是不同于 <code>Either</code>，<code>Either</code> 没有内置成功或者失败的概念。相反它使用 <code>Left</code> 和 <code>Right</code> 来表示 “一个或另一个”。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Either</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>race</code> 函数返回 <code>Left</code>，如果第一个参数先完成，并包含该 future 的输出，如果 <em>第二个</em> future 先完成，则返回 <code>Right</code> 和第二个 future 的输出。这匹配调用函数时参数出现的顺序：第一个参数在第二个参数的左边。</p><p>我们还更新了 <code>page_title</code> 来返回与传递时相同的 URL。如此如果首先返回的页面没有可以解析的 <code>&lt;title&gt;</code>，仍然可以打印出有意义的信息。有了这些信息，我们对 <code>println!</code> 的输出进行了封装和更新，以表明哪个 URL 最先完成，并在页面有 <code>&lt;title&gt;</code> 时打印出它的内容。</p><p>现在我们完成一个小型网页爬虫的构建了！挑选一对 URL 并运行命令行工具。你会发现某些网站稳定地快于其它网站，而有些情况哪些网站会 <em>赢</em> 则每次都不同。更重要的是，你已经掌握了处理 futures 的基础知识，因此我们现在可以进一步探索更多异步操作的可能性了。</p>',24)),n(" TODO: map source link version to version of Rust? ")])}const m=r(h,[["render",k],["__file","ch17-01-futures-and-syntax.html.vue"]]),y=JSON.parse('{"path":"/ch17-01-futures-and-syntax.html","title":"ch17-01-futures-and-syntax","lang":"zh-CN","frontmatter":{"description":"Futures 和 async 语法 ch17-01-futures-and-syntax.md commit e95efa05706c5c4309df9ed47d5e91d8ed342b7d Rust 异步编程的关键元素是 futures 和 Rust 的 async 与 await 关键字。 future 是一个现在可能还没有准备好但将在未来某个时...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch17-01-futures-and-syntax.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"Futures 和 async 语法 ch17-01-futures-and-syntax.md commit e95efa05706c5c4309df9ed47d5e91d8ed342b7d Rust 异步编程的关键元素是 futures 和 Rust 的 async 与 await 关键字。 future 是一个现在可能还没有准备好但将在未来某个时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":15.65,"words":4696},"filePathRelative":"ch17-01-futures-and-syntax.md","excerpt":"<h2>Futures 和 async 语法</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch17-01-futures-and-syntax.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch17-01-futures-and-syntax.md</a><br>\\n<br><br>\\ncommit e95efa05706c5c4309df9ed47d5e91d8ed342b7d</p>\\n</blockquote>\\n<p>Rust 异步编程的关键元素是 <em>futures</em> 和 Rust 的 <code>async</code> 与 <code>await</code> 关键字。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch17-01-futures-and-syntax.md","value":{"title":"ch17-01-futures-and-syntax","path":"ch17-01-futures-and-syntax.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch17-01-futures-and-syntax.md"}]}}}');export{m as comp,y as data};
