import{_ as t,e as n,j as o,o as c}from"./app-oyO3eSzo.js";const a={};function m(r,e){return c(),n("div",null,e[0]||(e[0]=[o('<h1 id="枚举和模式匹配" tabindex="-1"><a class="header-anchor" href="#枚举和模式匹配"><span>枚举和模式匹配</span></a></h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch06-00-enums.md" target="_blank" rel="noopener noreferrer">ch06-00-enums.md</a><br><br><br> commit bb7e429ad6b59d9a0c37db7434976364cbb9c6da</p></blockquote><p>本章介绍 <strong>枚举</strong>（<em>enumerations</em>），也被称作 <em>enums</em>。枚举允许你通过列举可能的 <strong>成员</strong>（<em>variants</em>）来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 <code>Option</code>，它代表一个值要么是某个值要么什么都不是。然后会讲到在 <code>match</code> 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 <code>if let</code>，另一个简洁方便处理代码中枚举的结构。</p>',3)]))}const i=t(a,[["render",m],["__file","ch06-00-enums.html.vue"]]),d=JSON.parse('{"path":"/ch06-00-enums.html","title":"枚举和模式匹配","lang":"zh-CN","frontmatter":{"description":"枚举和模式匹配 ch06-00-enums.md commit bb7e429ad6b59d9a0c37db7434976364cbb9c6da 本章介绍 枚举（enumerations），也被称作 enums。枚举允许你通过列举可能的 成员（variants）来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch06-00-enums.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"枚举和模式匹配"}],["meta",{"property":"og:description","content":"枚举和模式匹配 ch06-00-enums.md commit bb7e429ad6b59d9a0c37db7434976364cbb9c6da 本章介绍 枚举（enumerations），也被称作 enums。枚举允许你通过列举可能的 成员（variants）来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举和模式匹配\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"ch06-00-enums.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch06-00-enums.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch06-00-enums.md</a><br>\\n<br><br>\\ncommit bb7e429ad6b59d9a0c37db7434976364cbb9c6da</p>\\n</blockquote>\\n<p>本章介绍 <strong>枚举</strong>（<em>enumerations</em>），也被称作 <em>enums</em>。枚举允许你通过列举可能的 <strong>成员</strong>（<em>variants</em>）来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 <code>Option</code>，它代表一个值要么是某个值要么什么都不是。然后会讲到在 <code>match</code> 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 <code>if let</code>，另一个简洁方便处理代码中枚举的结构。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch06-00-enums.md","value":{"title":"ch06-00-enums","path":"ch06-00-enums.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch06-00-enums.md"},{"source":"SUMMARY.md","target":"ch06-00-enums.md"}]}}}');export{i as comp,d as data};
