import{_ as a,e as c,j as n,f as o,i,g as s,h as r,r as l,o as t}from"./app-CtoJuC-b.js";const p={};function u(g,e){const d=l("RouteLink");return t(),c("div",null,[e[63]||(e[63]=n('<h2 id="重构改进模块性和错误处理" tabindex="-1"><a class="header-anchor" href="#重构改进模块性和错误处理"><span>重构改进模块性和错误处理</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch12-03-improving-error-handling-and-modularity.md" target="_blank" rel="noopener noreferrer">ch12-03-improving-error-handling-and-modularity.md</a><br><br><br> commit 83788ff212a3281328e2f8f223ce9e0f69220b97</p></blockquote><p>为了改善我们的程序这里有四个问题需要修复，而且它们都与程序的组织方式和如何处理潜在错误有关。第一，<code>main</code> 现在进行了两个任务：它解析了参数并打开了文件。对于一个这样的小函数，这并不是一个大问题。然而如果 <code>main</code> 中的功能持续增加，<code>main</code> 函数处理的独立任务也会增加。当函数承担了更多责任，它就更难以推导，更难以测试，并且更难以在不破坏其他部分的情况下做出修改。最好能分离出功能以便每个函数就负责一个任务。</p><p>这同时也关系到第二个问题：<code>query</code> 和 <code>file_path</code> 是程序中的配置变量，而像 <code>contents</code> 则用来执行程序逻辑。随着 <code>main</code> 函数的增长，就需要引入更多的变量到作用域中，而当作用域中有更多的变量时，将更难以追踪每个变量的目的。最好能将配置变量组织进一个结构，这样就能使它们的目的更明确了。</p><p>第三个问题是如果打开文件失败我们使用 <code>expect</code> 来打印出错误信息，不过这个错误信息只是说 <code>Should have been able to read the file</code>。读取文件失败的原因有多种：例如文件不存在，或者没有打开此文件的权限。目前，无论处于何种情况，我们只是打印出“文件读取出现错误”的信息，这并没有给予使用者具体的信息！</p><p>第四，我们不停地使用 <code>expect</code> 来处理不同的错误，如果用户没有指定足够的参数来运行程序，他们会从 Rust 得到 <code>index out of bounds</code> 错误，而这并不能明确地解释问题。如果所有的错误处理都位于一处，这样将来的维护者在需要修改错误处理逻辑时就只需要考虑这一处代码。将所有的错误处理都放在一处也有助于确保我们打印的错误信息对终端用户来说是有意义的。</p><p>让我们通过重构项目来解决这些问题。</p><h3 id="二进制项目的关注分离" tabindex="-1"><a class="header-anchor" href="#二进制项目的关注分离"><span>二进制项目的关注分离</span></a></h3><p><code>main</code> 函数负责多个任务的组织问题在许多二进制项目中很常见。所以 Rust 社区开发出一类在 <code>main</code> 函数开始变得庞大时进行二进制程序的关注分离的指导。这些过程有如下步骤：</p><ul><li>将程序拆分成 <em>main.rs</em> 和 <em>lib.rs</em> 并将程序的逻辑放入 <em>lib.rs</em> 中。</li><li>当命令行解析逻辑比较小时，可以保留在 <em>main.rs</em> 中。</li><li>当命令行解析开始变得复杂时，也同样将其从 <em>main.rs</em> 提取到 <em>lib.rs</em> 中。</li></ul><p>经过这些过程之后保留在 <code>main</code> 函数中的责任应该被限制为：</p><ul><li>使用参数值调用命令行解析逻辑</li><li>设置任何其他的配置</li><li>调用 <em>lib.rs</em> 中的 <code>run</code> 函数</li><li>如果 <code>run</code> 返回错误，则处理这个错误</li></ul><p>这个模式的一切就是为了关注分离：<em>main.rs</em> 处理程序运行，而 <em>lib.rs</em> 处理所有的真正的任务逻辑。因为不能直接测试 <code>main</code> 函数，这个结构通过将所有的程序逻辑移动到 <em>lib.rs</em> 的函数中使得我们可以测试它们。仅仅保留在 <em>main.rs</em> 中的代码将足够小以便阅读就可以验证其正确性。让我们遵循这些步骤来重构程序。</p><h3 id="提取参数解析器" tabindex="-1"><a class="header-anchor" href="#提取参数解析器"><span>提取参数解析器</span></a></h3><p>首先，我们将解析参数的功能提取到一个 <code>main</code> 将会调用的函数中，为将命令行解析逻辑移动到 <em>src/lib.rs</em> 中做准备。示例 12-5 中展示了新 <code>main</code> 函数的开头，它调用了新函数 <code>parse_config</code>。目前它仍将定义在 <em>src/main.rs</em> 中：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-05/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-5：从 <code>main</code> 中提取出 <code>parse_config</code> 函数</span></p><p>我们仍然将命令行参数收集进一个 vector，不过不同于在 <code>main</code> 函数中将索引 1 的参数值赋值给变量 <code>query</code> 和将索引 2 的值赋值给变量 <code>file_path</code>，我们将整个 vector 传递给 <code>parse_config</code> 函数。接着 <code>parse_config</code> 函数将包含决定哪个参数该放入哪个变量的逻辑，并将这些值返回到 <code>main</code>。仍然在 <code>main</code> 中创建变量 <code>query</code> 和 <code>file_path</code>，不过 <code>main</code> 不再负责处理命令行参数与变量如何对应。</p><p>这对重构我们这小程序可能有点大材小用，不过我们将采用小的、增量的步骤进行重构。在做出这些改变之后，再次运行程序并验证参数解析是否仍然正常。经常验证你的进展是一个好习惯，这样在遇到问题时能帮助你定位问题的成因。</p><h3 id="组合配置值" tabindex="-1"><a class="header-anchor" href="#组合配置值"><span>组合配置值</span></a></h3><p>我们可以采取另一个小的步骤来进一步改善这个函数。现在函数返回一个元组，不过立刻又将元组拆成了独立的部分。这是一个我们可能没有进行正确抽象的信号。</p><p>另一个表明还有改进空间的迹象是 <code>parse_config</code> 名称的 <code>config</code> 部分，它暗示了我们返回的两个值是相关的并都是一个配置值的一部分。目前除了将这两个值组合进元组之外并没有表达这个数据结构的意义：我们可以将这两个值放入一个结构体并给每个字段一个有意义的名字。这会让未来的维护者更容易理解不同的值如何相互关联以及它们的目的。</p><blockquote><p>注意：一些同学将这种在复杂类型更为合适的场景下使用基本类型的反模式称为 <strong>基本类型偏执</strong>（<em>primitive obsession</em>）。</p></blockquote><p>示例 12-6 展示了 <code>parse_config</code> 函数的改进。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,should_panic,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,should_panic,noplayground" data-title="rust,should_panic,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-06/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-6：重构 <code>parse_config</code> 返回一个 <code>Config</code> 结构体实例</span></p><p>新定义的结构体 <code>Config</code> 中包含字段 <code>query</code> 和 <code>file_path</code>。<br><code>parse_config</code> 的签名表明它现在返回一个 <code>Config</code> 值。在之前的 <code>parse_config</code> 函数体中，我们返回了引用 <code>args</code> 中 <code>String</code> 值的字符串 slice，现在我们定义 <code>Config</code> 来包含拥有所有权的 <code>String</code> 值。<code>main</code> 中的 <code>args</code> 变量是参数值的所有者并只允许 <code>parse_config</code> 函数借用它们，这意味着如果 <code>Config</code> 尝试获取 <code>args</code> 中值的所有权将违反 Rust 的借用规则。</p><p>还有许多不同的方式可以处理 <code>String</code> 的数据，而最简单但有些不太高效的方式是调用这些值的 <code>clone</code> 方法。这会生成 <code>Config</code> 实例可以拥有的数据的完整拷贝，不过会比储存字符串数据的引用消耗更多的时间和内存。不过拷贝数据使得代码显得更加直白因为无需管理引用的生命周期，所以在这种情况下牺牲一小部分性能来换取简洁性的取舍是值得的。</p><blockquote><h4 id="使用-clone-的权衡取舍" tabindex="-1"><a class="header-anchor" href="#使用-clone-的权衡取舍"><span>使用 <code>clone</code> 的权衡取舍</span></a></h4><p>由于其运行时消耗，许多 Rustacean 之间有一个趋势是倾向于避免使用 <code>clone</code> 来解决所有权问题。在关于迭代器的第十三章中，我们将会学习如何更有效率的处理这种情况，不过现在，复制一些字符串来取得进展是没有问题的，因为只会进行一次这样的拷贝，而且文件路径和要搜索的字符串都比较短。在第一轮编写时拥有一个可以工作但有点低效的程序要比尝试过度优化代码更好一些。随着你对 Rust 更加熟练，将能更轻松的直奔合适的方法，不过现在调用 <code>clone</code> 是完全可以接受的。</p></blockquote><p>我们更新 <code>main</code> 将 <code>parse_config</code> 返回的 <code>Config</code> 实例放入变量 <code>config</code> 中，并将之前分别使用 <code>query</code> 和 <code>file_path</code> 变量的代码更新为现在的使用 <code>Config</code> 结构体的字段的代码。</p><p>现在代码更明确的表现了我们的意图，<code>query</code> 和 <code>file_path</code> 是相关联的并且它们的目的是配置程序如何工作。任何使用这些值的代码就知道在 <code>config</code> 实例中对应目的的字段名中寻找它们。</p><h3 id="创建一个-config-的构造函数" tabindex="-1"><a class="header-anchor" href="#创建一个-config-的构造函数"><span>创建一个 <code>Config</code> 的构造函数</span></a></h3><p>目前为止，我们将负责解析命令行参数的逻辑从 <code>main</code> 提取到了 <code>parse_config</code> 函数中，这有助于我们看清值 <code>query</code> 和 <code>file_path</code> 是相互关联的并应该在代码中表现这种关系。接着我们增加了 <code>Config</code> 结构体来描述 <code>query</code> 和 <code>file_path</code> 的相关性，并能够从 <code>parse_config</code> 函数中将这些值的名称作为结构体字段名称返回。</p><p>所以现在 <code>parse_config</code> 函数的目的是创建一个 <code>Config</code> 实例，我们可以将 <code>parse_config</code> 从一个普通函数变为一个叫做 <code>new</code> 的与结构体关联的函数。做出这个改变使得代码更符合习惯：可以像标准库中的 <code>String</code> 调用 <code>String::new</code> 来创建一个该类型的实例那样，将 <code>parse_config</code> 变为一个与 <code>Config</code> 关联的 <code>new</code> 函数。示例 12-7 展示了需要做出的修改：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,should_panic,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,should_panic,noplayground" data-title="rust,should_panic,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-07/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-7：将 <code>parse_config</code> 变为 <code>Config::new</code></span></p><p>这里将 <code>main</code> 中调用 <code>parse_config</code> 的地方更新为调用 <code>Config::new</code>。我们将 <code>parse_config</code> 的名字改为 <code>new</code> 并将其移动到 <code>impl</code> 块中，这使得 <code>new</code> 函数与 <code>Config</code> 相关联。再次尝试编译并确保它可以工作。</p><h3 id="修复错误处理" tabindex="-1"><a class="header-anchor" href="#修复错误处理"><span>修复错误处理</span></a></h3><p>现在我们开始修复错误处理。回忆一下之前提到过如果 <code>args</code> vector 包含少于 3 个项并尝试访问 vector 中索引 <code>1</code> 或索引 <code>2</code> 的值会造成程序 panic。尝试不带任何参数运行程序；这将看起来像这样：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-07/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>index out of bounds: the len is 1 but the index is 1</code> 是一个针对程序员的错误信息，然而这并不能真正帮助终端用户理解发生了什么和他们应该做什么。现在就让我们修复它吧。</p><h4 id="改善错误信息" tabindex="-1"><a class="header-anchor" href="#改善错误信息"><span>改善错误信息</span></a></h4><p>在示例 12-8 中，在 <code>new</code> 函数中增加了一个检查在访问索引 <code>1</code> 和 <code>2</code> 之前检查 slice 是否足够长。如果 slice 不够长，程序会打印一个更好的错误信息并 panic：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-08/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-8：增加一个参数数量检查</span></p>',49)),o("p",null,[e[1]||(e[1]=i("这类似于 ")),s(d,{to:"/ch09-03-to-panic-or-not-to-panic.html#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%9C%89%E6%95%88%E6%80%A7%E9%AA%8C%E8%AF%81"},{default:r(()=>e[0]||(e[0]=[i("示例 9-13 中的 "),o("code",null,"Guess::new",-1),i(" 函数")])),_:1}),e[2]||(e[2]=i("，那里如果 ")),e[3]||(e[3]=o("code",null,"value",-1)),e[4]||(e[4]=i(" 参数超出了有效值的范围就调用 ")),e[5]||(e[5]=o("code",null,"panic!",-1)),e[6]||(e[6]=i("。不同于检查值的范围，这里检查 ")),e[7]||(e[7]=o("code",null,"args",-1)),e[8]||(e[8]=i(" 的长度至少是 ")),e[9]||(e[9]=o("code",null,"3",-1)),e[10]||(e[10]=i("，而函数的剩余部分则可以在假设这个条件成立的基础上运行。如果 ")),e[11]||(e[11]=o("code",null,"args",-1)),e[12]||(e[12]=i(" 少于 3 个项，则这个条件将为真，并调用 ")),e[13]||(e[13]=o("code",null,"panic!",-1)),e[14]||(e[14]=i(" 立即终止程序。"))]),e[64]||(e[64]=n('<p>有了 <code>new</code> 中这几行额外的代码，再次不带任何参数运行程序并看看现在错误看起来像什么：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-08/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',2)),o("p",null,[e[17]||(e[17]=i("这个输出就好多了，现在有了一个合理的错误信息。然而，还是有一堆额外的信息我们不希望提供给用户。所以在这里使用示例 9-9 中的技术可能不是最好的；正如 ")),s(d,{to:"/ch09-03-to-panic-or-not-to-panic.html#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%8C%87%E5%AF%BC%E5%8E%9F%E5%88%99"},{default:r(()=>e[15]||(e[15]=[i("第九章")])),_:1}),e[18]||(e[18]=i(" 所讲到的一样，")),e[19]||(e[19]=o("code",null,"panic!",-1)),e[20]||(e[20]=i(" 的调用更趋向于程序上的问题而不是使用上的问题。相反我们可以使用第九章学习的另一个技术 —— 返回一个可以表明成功或错误的 ")),s(d,{to:"/ch09-02-recoverable-errors-with-result.html"},{default:r(()=>e[16]||(e[16]=[o("code",null,"Result",-1)])),_:1}),e[21]||(e[21]=i("。"))]),e[65]||(e[65]=n('<h4 id="从-new-中返回-result-而不是调用-panic" tabindex="-1"><a class="header-anchor" href="#从-new-中返回-result-而不是调用-panic"><span>从 <code>new</code> 中返回 <code>Result</code> 而不是调用 <code>panic!</code></span></a></h4><p>我们可以选择返回一个 <code>Result</code> 值，它在成功时会包含一个 <code>Config</code> 的实例，而在错误时会描述问题。我们还将把函数名从<code>new</code>改为<code>build</code>，因为许多程序员希望 <code>new</code> 函数永远不会失败。当 <code>Config::new</code> 与 <code>main</code> 交流时，可以使用 <code>Result</code> 类型来表明这里存在问题。接着修改 <code>main</code> 将 <code>Err</code> 成员转换为对用户更友好的错误，而不是 <code>panic!</code> 调用产生的关于 <code>thread &#39;main&#39;</code> 和 <code>RUST_BACKTRACE</code> 的文本。</p><p>示例 12-9 展示了为了返回 <code>Result</code> 在 <code>Config::new</code> 的返回值和函数体中所需的改变。注意这还不能编译，直到下一个示例同时也更新了 <code>main</code> 之后。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-09/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-9：从 <code>Config::build</code> 中返回 <code>Result</code></span></p><p>现在 <code>build</code> 函数返回一个 <code>Result</code>，在成功时带有一个 <code>Config</code> 实例而在出现错误时带有一个 <code>&amp;&#39;static str</code>。回忆一下第十章 “静态生命周期” 中讲到 <code>&amp;&#39;static str</code> 是字符串字面值的类型，也是目前的错误信息。</p><p><code>build</code> 函数体中有两处修改：当没有足够参数时不再调用 <code>panic!</code>，而是返回 <code>Err</code> 值。同时我们将 <code>Config</code> 返回值包装进 <code>Ok</code> 成员中。这些修改使得函数符合其新的类型签名。</p><p>通过让 <code>Config::build</code> 返回一个 <code>Err</code> 值，这就允许 <code>main</code> 函数处理 <code>build</code> 函数返回的 <code>Result</code> 值并在出现错误的情况更明确的结束进程。</p><h4 id="调用-config-build-并处理错误" tabindex="-1"><a class="header-anchor" href="#调用-config-build-并处理错误"><span>调用 <code>Config::build</code> 并处理错误</span></a></h4><p>为了处理错误情况并打印一个对用户友好的信息，我们需要像示例 12-10 那样更新 <code>main</code> 函数来处理现在 <code>Config::build</code> 返回的 <code>Result</code>。另外还需要手动实现原先由 <code>panic!</code>负责的工作，即以非零错误码退出命令行工具的工作。非零的退出状态是一个惯例信号，用来告诉调用程序的进程：该程序以错误状态退出了。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-10/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-10：如果新建 <code>Config</code> 失败则使用错误码退出</span></p>',14)),o("p",null,[e[23]||(e[23]=n("在上面的示例中，使用了一个之前没有详细说明的方法：<code>unwrap_or_else</code>，它定义于标准库的 <code>Result&lt;T, E&gt;</code> 上。使用 <code>unwrap_or_else</code> 可以进行一些自定义的非 <code>panic!</code> 的错误处理。当 <code>Result</code> 是 <code>Ok</code> 时，这个方法的行为类似于 <code>unwrap</code>：它返回 <code>Ok</code> 内部封装的值。然而，当其值是 <code>Err</code> 时，该方法会调用一个 <strong>闭包</strong>（<em>closure</em>），也就是一个我们定义的作为参数传递给 <code>unwrap_or_else</code> 的匿名函数。",25)),s(d,{to:"/ch13-00-functional-features.html"},{default:r(()=>e[22]||(e[22]=[i("第十三章")])),_:1}),e[24]||(e[24]=i(" 会更详细的介绍闭包。现在你需要理解的是 ")),e[25]||(e[25]=o("code",null,"unwrap_or_else",-1)),e[26]||(e[26]=i(" 会将 ")),e[27]||(e[27]=o("code",null,"Err",-1)),e[28]||(e[28]=i(" 的内部值，也就是示例 12-9 中增加的 ")),e[29]||(e[29]=o("code",null,"not enough arguments",-1)),e[30]||(e[30]=i(" 静态字符串的情况，传递给闭包中位于两道竖线间的参数 ")),e[31]||(e[31]=o("code",null,"err",-1)),e[32]||(e[32]=i("。闭包中的代码在其运行时可以使用这个 ")),e[33]||(e[33]=o("code",null,"err",-1)),e[34]||(e[34]=i(" 值。"))]),e[66]||(e[66]=n('<p>我们新增了一个 <code>use</code> 行来从标准库中导入 <code>process</code>。在错误的情况闭包中将被运行的代码只有两行：我们打印出了 <code>err</code> 值，接着调用了 <code>std::process::exit</code>。<code>process::exit</code> 会立即停止程序并将传递给它的数字作为退出状态码。这类似于示例 12-8 中使用的基于 <code>panic!</code> 的错误处理，除了不会再得到所有的额外输出了。让我们试试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-10/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>非常好！现在输出对于用户来说就友好多了。</p><h3 id="从-main-提取逻辑" tabindex="-1"><a class="header-anchor" href="#从-main-提取逻辑"><span>从 <code>main</code> 提取逻辑</span></a></h3><p>现在我们完成了配置解析的重构：让我们转向程序的逻辑。正如 <a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%B3%E6%B3%A8%E5%88%86%E7%A6%BB">“二进制项目的关注分离”</a> 部分所展开的讨论，我们将提取一个叫做 <code>run</code> 的函数来存放目前 <code>main</code> 函数中不属于设置配置或处理错误的所有逻辑。一旦完成这些，<code>main</code> 函数将简明得足以通过观察来验证，而我们将能够为所有其他逻辑编写测试。</p><p>示例 12-11 展示了提取出来的 <code>run</code> 函数。目前我们只进行小的增量式的提取函数的改进。我们仍将在 <em>src/main.rs</em> 中定义这个函数：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-11/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-11：提取 <code>run</code> 函数来包含剩余的程序逻辑</span></p><p>现在 <code>run</code> 函数包含了 <code>main</code> 中从读取文件开始的剩余的所有逻辑。<code>run</code> 函数获取一个 <code>Config</code> 实例作为参数。</p><h4 id="从-run-函数中返回错误" tabindex="-1"><a class="header-anchor" href="#从-run-函数中返回错误"><span>从 <code>run</code> 函数中返回错误</span></a></h4><p>通过将剩余的逻辑分离进 <code>run</code> 函数而不是留在 <code>main</code> 中，就可以像示例 12-9 中的 <code>Config::build</code> 那样改进错误处理。不再通过 <code>expect</code> 允许程序 panic，<code>run</code> 函数将会在出错时返回一个 <code>Result&lt;T, E&gt;</code>。这让我们进一步以一种对用户友好的方式统一 <code>main</code> 中的错误处理。示例 12-12 展示了 <code>run</code> 签名和函数体中的改变：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-12/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-12：修改 <code>run</code> 函数返回 <code>Result</code></span></p><p>这里我们做出了三个明显的修改。首先，将 <code>run</code> 函数的返回类型变为 <code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>。之前这个函数返回 unit 类型 <code>()</code>，现在它仍然保持作为 <code>Ok</code> 时的返回值。</p>',16)),o("p",null,[e[36]||(e[36]=i("对于错误类型，使用了 ")),e[37]||(e[37]=o("strong",null,"trait 对象",-1)),e[38]||(e[38]=i()),e[39]||(e[39]=o("code",null,"Box<dyn Error>",-1)),e[40]||(e[40]=i("（在开头使用了 ")),e[41]||(e[41]=o("code",null,"use",-1)),e[42]||(e[42]=i(" 语句将 ")),e[43]||(e[43]=o("code",null,"std::error::Error",-1)),e[44]||(e[44]=i(" 引入作用域）。")),s(d,{to:"/ch18-00-oop.html"},{default:r(()=>e[35]||(e[35]=[i("第十八章")])),_:1}),e[45]||(e[45]=i(" 会涉及 trait 对象。目前只需知道 ")),e[46]||(e[46]=o("code",null,"Box<dyn Error>",-1)),e[47]||(e[47]=i(" 意味着函数会返回实现了 ")),e[48]||(e[48]=o("code",null,"Error",-1)),e[49]||(e[49]=i(" trait 的类型，不过无需指定具体将会返回的值的类型。这提供了在不同的错误场景可能有不同类型的错误返回值的灵活性。这也就是 ")),e[50]||(e[50]=o("code",null,"dyn",-1)),e[51]||(e[51]=i("，它是 “动态的”（“dynamic”）的缩写。"))]),o("p",null,[e[53]||(e[53]=i("第二个改变是去掉了 ")),e[54]||(e[54]=o("code",null,"expect",-1)),e[55]||(e[55]=i(" 调用并替换为 ")),s(d,{to:"/ch09-02-recoverable-errors-with-result.html#%E4%BC%A0%E6%92%AD%E9%94%99%E8%AF%AF%E7%9A%84%E7%AE%80%E5%86%99-%E8%BF%90%E7%AE%97%E7%AC%A6"},{default:r(()=>e[52]||(e[52]=[i("第九章")])),_:1}),e[56]||(e[56]=i(" 讲到的 ")),e[57]||(e[57]=o("code",null,"?",-1)),e[58]||(e[58]=i("。不同于遇到错误就 ")),e[59]||(e[59]=o("code",null,"panic!",-1)),e[60]||(e[60]=i("，")),e[61]||(e[61]=o("code",null,"?",-1)),e[62]||(e[62]=i(" 会从函数中返回错误值并让调用者来处理它。"))]),e[67]||(e[67]=n('<p>第三个修改是现在成功时这个函数会返回一个 <code>Ok</code> 值。因为 <code>run</code> 函数签名中声明成功类型返回值是 <code>()</code>，这意味着需要将 unit 类型值包装进 <code>Ok</code> 值中。<code>Ok(())</code> 一开始看起来有点奇怪，不过这样使用 <code>()</code> 是惯用的做法，表明调用 <code>run</code> 函数只是为了它的副作用；函数并没有返回什么有意义的值。</p><p>上述代码能够编译，不过会有一个警告：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-12/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust 提示我们的代码忽略了 <code>Result</code> 值，它可能表明这里存在一个错误。但我们却没有检查这里是否有一个错误，而编译器提醒我们这里应该有一些错误处理代码！现在就让我们修正这个问题。</p><h4 id="处理-main-中-run-返回的错误" tabindex="-1"><a class="header-anchor" href="#处理-main-中-run-返回的错误"><span>处理 <code>main</code> 中 <code>run</code> 返回的错误</span></a></h4><p>我们将检查错误并使用类似示例 12-10 中 <code>Config::build</code> 处理错误的技术来处理它们，不过有一些细微的不同：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-01-handling-errors-in-main/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们使用 <code>if let</code> 来检查 <code>run</code> 是否返回一个 <code>Err</code> 值，不同于 <code>unwrap_or_else</code>，并在出错时调用 <code>process::exit(1)</code>。<code>run</code> 并不返回像 <code>Config::build</code> 返回的 <code>Config</code> 实例那样需要 <code>unwrap</code> 的值。因为 <code>run</code> 在成功时返回 <code>()</code>，而我们只关心检测错误，所以并不需要 <code>unwrap_or_else</code> 来返回未封装的值，因为它只会是 <code>()</code>。</p><p>不过两个例子中 <code>if let</code> 和 <code>unwrap_or_else</code> 的函数体都一样：打印出错误并退出。</p><h3 id="将代码拆分到库-crate" tabindex="-1"><a class="header-anchor" href="#将代码拆分到库-crate"><span>将代码拆分到库 crate</span></a></h3><p>现在我们的 <code>minigrep</code> 项目看起来好多了！现在我们将要拆分 <em>src/main.rs</em> 并将一些代码放入 <em>src/lib.rs</em>，这样就能测试它们并拥有一个含有更少功能的 <code>main</code> 函数。</p><p>让我们将所有不是 <code>main</code> 函数的代码从 <em>src/main.rs</em> 移动到新文件 <em>src/lib.rs</em> 中：</p><ul><li><code>run</code> 函数定义</li><li>相关的 <code>use</code> 语句</li><li><code>Config</code> 的定义</li><li><code>Config::build</code> 函数定义</li></ul><p>现在 <em>src/lib.rs</em> 的内容应该看起来像示例 12-13（为了简洁省略了函数体）。注意直到下一个示例修改完 <em>src/main.rs</em> 之后，代码还不能编译：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-13/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-13：将 <code>Config</code> 和 <code>run</code> 移动到 <em>src/lib.rs</em></span></p><p>这里使用了公有的 <code>pub</code> 关键字：在 <code>Config</code>、其字段和其 <code>build</code> 方法，以及 <code>run</code> 函数上。现在我们有了一个拥有可以测试的公有 API 的库 crate 了。</p><p>现在需要在 <em>src/main.rs</em> 中将移动到 <em>src/lib.rs</em> 的代码引入二进制 crate 的作用域中，如示例 12-14 所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-14/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-14：将 <code>minigrep</code> crate 引入 <em>src/main.rs</em> 的作用域中</span></p><p>我们添加了一行 <code>use minigrep::Config</code>，它将 <code>Config</code> 类型引入作用域，并使用 crate 名称作为 <code>run</code> 函数的前缀。通过这些重构，所有功能应该能够联系在一起并运行了。运行 <code>cargo run</code> 来确保一切都正确的衔接在一起。</p><p>哇哦！我们做了大量的工作，不过我们为将来的成功打下了基础。现在处理错误将更容易，同时代码也更加模块化。从现在开始几乎所有的工作都将在 <em>src/lib.rs</em> 中进行。</p><p>让我们利用这些新创建的模块的优势来进行一些在旧代码中难以展开的工作，这些工作在新代码中非常容易实现，那就是：编写测试！</p>',26))])}const h=a(p,[["render",u],["__file","ch12-03-improving-error-handling-and-modularity.html.vue"]]),b=JSON.parse('{"path":"/ch12-03-improving-error-handling-and-modularity.html","title":"ch12-03-improving-error-handling-and-modularity","lang":"zh-CN","frontmatter":{"description":"重构改进模块性和错误处理 ch12-03-improving-error-handling-and-modularity.md commit 83788ff212a3281328e2f8f223ce9e0f69220b97 为了改善我们的程序这里有四个问题需要修复，而且它们都与程序的组织方式和如何处理潜在错误有关。第一，main 现在进行了两个任务：它...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch12-03-improving-error-handling-and-modularity.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"重构改进模块性和错误处理 ch12-03-improving-error-handling-and-modularity.md commit 83788ff212a3281328e2f8f223ce9e0f69220b97 为了改善我们的程序这里有四个问题需要修复，而且它们都与程序的组织方式和如何处理潜在错误有关。第一，main 现在进行了两个任务：它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":18.81,"words":5643},"filePathRelative":"ch12-03-improving-error-handling-and-modularity.md","excerpt":"<h2>重构改进模块性和错误处理</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch12-03-improving-error-handling-and-modularity.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch12-03-improving-error-handling-and-modularity.md</a><br>\\n<br><br>\\ncommit 83788ff212a3281328e2f8f223ce9e0f69220b97</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch12-03-improving-error-handling-and-modularity.md","value":{"title":"ch12-03-improving-error-handling-and-modularity","path":"ch12-03-improving-error-handling-and-modularity.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch12-03-improving-error-handling-and-modularity.md"},{"source":"SUMMARY.md","target":"ch12-03-improving-error-handling-and-modularity.md"}]}}}');export{h as comp,b as data};
