import{_ as i,e as t,j as s,o as a}from"./app-oyO3eSzo.js";const r={};function n(c,e){return a(),t("div",null,e[0]||(e[0]=[s('<h1 id="泛型、trait-和生命周期" tabindex="-1"><a class="header-anchor" href="#泛型、trait-和生命周期"><span>泛型、Trait 和生命周期</span></a></h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch10-00-generics.md" target="_blank" rel="noopener noreferrer">ch10-00-generics.md</a><br><br><br> commit 4aa96a3d20570f868bd20e8e3e865b047284be30</p></blockquote><p>每一个编程语言都有高效处理重复概念的工具。在 Rust 中其工具之一就是 <strong>泛型</strong>（<em>generics</em>）。泛型是具体类型或其他属性的抽象替代。我们可以表达泛型的属性，比如它们的行为或如何与其他泛型相关联，而不需要在编写和编译代码时知道它们在这里实际上代表什么。</p><p>函数可以获取一些不同于 <code>i32</code> 或 <code>String</code> 这样具体类型的泛型参数，就像一个获取未知类型值的函数可以对多种具体类型的值运行同一段代码一样。事实上我们已经使用过第六章的 <code>Option&lt;T&gt;</code>，第八章的 <code>Vec&lt;T&gt;</code> 和 <code>HashMap&lt;K, V&gt;</code>，以及第九章的 <code>Result&lt;T, E&gt;</code> 这些泛型了。本章会探索如何使用泛型定义我们自己的类型、函数和方法！</p><p>首先，我们将回顾一下提取函数以减少代码重复的机制。接下来，我们将使用相同的技术，从两个仅参数类型不同的函数中创建一个泛型函数。我们也会讲到结构体和枚举定义中的泛型。</p><p>之后，我们讨论 <strong>trait</strong>，这是一个定义泛型行为的方法。trait 可以与泛型结合来将泛型限制为只接受拥有特定行为的类型，而不是任意类型。</p><p>最后介绍 <strong>生命周期</strong>（<em>lifetimes</em>），它是一类允许我们向编译器提供引用如何相互关联的泛型。Rust 的生命周期功能允许在很多场景下借用值的同时仍然使编译器能够检查这些引用的有效性。</p><h2 id="提取函数来减少重复" tabindex="-1"><a class="header-anchor" href="#提取函数来减少重复"><span>提取函数来减少重复</span></a></h2><p>泛型允许我们使用一个可以代表多种类型的占位符来替换特定类型，以此来减少代码冗余。在深入了解泛型的语法之前，我们首先来看一种没有使用泛型的减少冗余的方法，即提取一个函数。在这个函数中，我们用一个可以代表多种值的占位符来替换具体的值。接着我们使用相同的技术来提取一个泛型函数！！通过学习如何识别并提取可以整合进一个函数的重复代码，你也会开始识别出可以使用泛型的重复代码。</p><p>让我们从下面这个寻找列表中最大值的小程序开始，如示例 10-1 所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-01/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 10-1：在一个数字列表中寻找最大值的函数</span></p><p>这段代码获取一个整型列表，存放在变量 <code>number_list</code> 中。它将列表的第一个数字的引用放入了变量 <code>largest</code> 中。接着遍历了列表中的所有数字，如果当前值大于 <code>largest</code> 中储存的值，将 <code>largest</code> 替换为这个值。如果当前值小于或者等于目前为止的最大值，<code>largest</code> 保持不变。当列表中所有值都被考虑到之后，<code>largest</code> 将会指向最大值，在这里也就是 100。</p><p>我们的任务是在两个不同的数字列表中寻找最大值。为此我们可以选择重复示例 10-1 中的代码在程序的两个不同位置使用相同的逻辑，如示例 10-2 所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-02/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 10-2：寻找 <strong>两个</strong> 数字列表最大值的代码</span></p><p>虽然代码能够执行，但是重复的代码是冗余且容易出错的，更新逻辑时我们不得不记住需要修改多处地方的代码。</p><p>为了消除重复，我们要创建一层抽象，定义一个处理任意整型列表作为参数的函数。这个方案使得代码更简洁，并且表现了寻找任意列表中最大值这一概念。</p><p>在示例 10-3 的程序中将寻找最大值的代码提取到了一个叫做 <code>largest</code> 的函数中。接着我们调用该函数来寻找示例 10-2 中两个列表中的最大值。之后也可以将该函数用于任何可能的 <code>i32</code> 值的列表。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-03/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 10-3：抽象后的寻找两个数字列表最大值的代码</span></p><p><code>largest</code> 函数有一个参数 <code>list</code>，它代表会传递给函数的任何具体的 <code>i32</code>值的 slice。函数定义中的 <code>list</code> 代表任何 <code>&amp;[i32]</code>。当调用 <code>largest</code> 函数时，其代码实际上运行于我们传递的特定值上。</p><p>总的来说，从示例 10-2 到示例 10-3 中涉及的机制经历了如下几步：</p><ol><li>找出重复代码。</li><li>将重复代码提取到了一个函数中，并在函数签名中指定了代码中的输入和返回值。</li><li>将重复代码的两个实例，改为调用函数。</li></ol><p>接下来我们会使用相同的步骤通过泛型来减少重复。与函数体可以处理任意的 <code>list</code> 而不是具体的值一样，泛型也允许代码处理任意类型。</p><p>如果我们有两个函数，一个寻找一个 <code>i32</code> 值的 slice 中的最大项而另一个寻找 <code>char</code> 值的 slice 中的最大项该怎么办？该如何消除重复呢？让我们拭目以待！</p>',29)]))}const o=i(r,[["render",n],["__file","ch10-00-generics.html.vue"]]),d=JSON.parse('{"path":"/ch10-00-generics.html","title":"泛型、Trait 和生命周期","lang":"zh-CN","frontmatter":{"description":"泛型、Trait 和生命周期 ch10-00-generics.md commit 4aa96a3d20570f868bd20e8e3e865b047284be30 每一个编程语言都有高效处理重复概念的工具。在 Rust 中其工具之一就是 泛型（generics）。泛型是具体类型或其他属性的抽象替代。我们可以表达泛型的属性，比如它们的行为或如何与其他泛...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch10-00-generics.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"泛型、Trait 和生命周期"}],["meta",{"property":"og:description","content":"泛型、Trait 和生命周期 ch10-00-generics.md commit 4aa96a3d20570f868bd20e8e3e865b047284be30 每一个编程语言都有高效处理重复概念的工具。在 Rust 中其工具之一就是 泛型（generics）。泛型是具体类型或其他属性的抽象替代。我们可以表达泛型的属性，比如它们的行为或如何与其他泛..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型、Trait 和生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.78,"words":1435},"filePathRelative":"ch10-00-generics.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch10-00-generics.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch10-00-generics.md</a><br>\\n<br><br>\\ncommit 4aa96a3d20570f868bd20e8e3e865b047284be30</p>\\n</blockquote>\\n<p>每一个编程语言都有高效处理重复概念的工具。在 Rust 中其工具之一就是 <strong>泛型</strong>（<em>generics</em>）。泛型是具体类型或其他属性的抽象替代。我们可以表达泛型的属性，比如它们的行为或如何与其他泛型相关联，而不需要在编写和编译代码时知道它们在这里实际上代表什么。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch10-00-generics.md","value":{"title":"ch10-00-generics","path":"ch10-00-generics.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch10-00-generics.md"},{"source":"SUMMARY.md","target":"ch10-00-generics.md"}]}}}');export{o as comp,d as data};
