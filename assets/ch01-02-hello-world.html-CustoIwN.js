import{_ as o,e as r,f as i,j as n,i as e,g as a,k as d,h as t,r as h,o as p}from"./app-oyO3eSzo.js";const c={};function k(m,s){const l=h("RouteLink");return p(),r("div",null,[s[19]||(s[19]=i("h2",{id:"hello-world",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#hello-world"},[i("span",null,"Hello, World!")])],-1)),s[20]||(s[20]=i("blockquote",null,[i("p",null,[i("a",{href:"https://github.com/rust-lang/book/blob/main/src/ch01-02-hello-world.md",target:"_blank",rel:"noopener noreferrer"},"ch01-02-hello-world.md"),i("br"),i("br"),i("br"),e(" commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f")])],-1)),s[21]||(s[21]=i("p",null,[e("既然安装好了 Rust，是时候来编写第一个 Rust 程序了。当学习一门新语言的时候，使用该语言在屏幕上打印 "),i("code",null,"Hello, world!"),e(" 是一项传统，我们将沿用这一传统！")],-1)),i("blockquote",null,[i("p",null,[s[1]||(s[1]=e("注意：本书假设你熟悉基本的命令行操作。Rust 对于你的编辑器、工具，以及代码位于何处并没有特定的要求，如果你更倾向于使用集成开发环境（IDE），而不是命令行，请尽管使用你喜欢的 IDE。目前很多 IDE 都在一定程度上支持 Rust；查看 IDE 文档以了解更多细节。Rust 团队一直致力于借助 ")),s[2]||(s[2]=i("code",null,"rust-analyzer",-1)),s[3]||(s[3]=e(" 提供强大的 IDE 支持。详见")),a(l,{to:"/appendix-04-useful-development-tools.html"},{default:t(()=>s[0]||(s[0]=[e("附录 D")])),_:1}),d(" ignore "),s[4]||(s[4]=e("。"))])]),s[22]||(s[22]=n(`<h3 id="创建项目目录" tabindex="-1"><a class="header-anchor" href="#创建项目目录"><span>创建项目目录</span></a></h3><p>首先创建一个存放 Rust 代码的目录。Rust 并不关心代码的存放位置，不过对于本书的练习和项目来说，我们建议你在 home 目录中创建 <em>projects</em> 目录，并将你的所有项目存放在这里。</p><p>打开终端并输入如下命令创建 <em>projects</em> 目录，并在 <em>projects</em> 目录中为 “Hello, world!” 项目创建一个目录。</p><p>对于 Linux、macOS 和 Windows PowerShell，输入：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ mkdir ~/projects</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cd ~/projects</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ mkdir hello_world</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cd hello_world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 Windows CMD，输入：</p><div class="language-doscon line-numbers-mode" data-highlighter="shiki" data-ext="doscon" data-title="doscon" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; mkdir &quot;%USERPROFILE%\\projects&quot;</span></span>
<span class="line"><span>&gt; cd /d &quot;%USERPROFILE%\\projects&quot;</span></span>
<span class="line"><span>&gt; mkdir hello_world</span></span>
<span class="line"><span>&gt; cd hello_world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写并运行-rust-程序" tabindex="-1"><a class="header-anchor" href="#编写并运行-rust-程序"><span>编写并运行 Rust 程序</span></a></h3><p>接下来，新建一个源文件，命名为 <em>main.rs</em>。Rust 源文件总是以 <em>.rs</em> 扩展名结尾。如果文件名包含多个单词，那么按照命名习惯，应当使用下划线来分隔单词。例如命名为 <em>hello_world.rs</em>，而不是 <em>helloworld.rs</em>。</p><p>现在打开刚创建的 <em>main.rs</em> 文件，输入示例 1-1 中的代码。</p><figure class="listing"><p><span class="file-name">文件名：main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figcaption>示例 1-1：一个打印 \`Hello, world!\` 的程序</figcaption></figure><p>保存文件，并回到当前目录为“~/projects/hello_world”的终端窗口。在 Linux 或 macOS 上，输入如下命令，编译并运行文件：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ rustc main.rs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ ./main</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Hello, world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Windows 上，输入命令 <code>.\\main.exe</code>，而不是 <code>./main</code>：</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; rustc main.rs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; .\\</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">main.exe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Hello, world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),i("p",null,[s[6]||(s[6]=e("不管使用何种操作系统，终端应该打印字符串 ")),s[7]||(s[7]=i("code",null,"Hello, world!",-1)),s[8]||(s[8]=e("。如果没有看到这些输出，回到安装部分的 ")),a(l,{to:"/ch01-01-installation.html#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4troubleshooting"},{default:t(()=>s[5]||(s[5]=[e("“故障排除”")])),_:1}),s[9]||(s[9]=e(" 小节查找有帮助的方法。"))]),s[23]||(s[23]=n(`<p>如果 <code>Hello, world!</code> 出现了，恭喜你！你已经正式编写了一个 Rust 程序。现在你成为一名 Rust 程序员，欢迎！</p><h3 id="分析这个-rust-程序" tabindex="-1"><a class="header-anchor" href="#分析这个-rust-程序"><span>分析这个 Rust 程序</span></a></h3><p>现在，让我们回过头来仔细看看这个 “Hello, world!” 程序。这是第一块拼图：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几行定义了一个名叫 <code>main</code> 的函数。<code>main</code> 函数是一个特殊的函数：在可执行的 Rust 程序中，它总是最先运行的代码。第一行代码声明了一个叫做 <code>main</code> 的函数，它没有参数也没有返回值。如果有参数的话，它们的名称应该出现在小括号 <code>()</code> 中。</p><p>函数体被包裹在 <code>{}</code> 中。Rust 要求所有函数体都要用花括号包裹起来。一般来说，将左花括号与函数声明置于同一行并以空格分隔，是良好的代码风格。</p>`,6)),i("blockquote",null,[i("p",null,[s[11]||(s[11]=e("注：如果你希望在 Rust 项目中保持一种标准风格，可以使用名为 ")),s[12]||(s[12]=i("code",null,"rustfmt",-1)),s[13]||(s[13]=e(" 的自动格式化工具将代码格式化为特定的风格（更多内容详见")),a(l,{to:"/appendix-04-useful-development-tools.html"},{default:t(()=>s[10]||(s[10]=[e("附录 D")])),_:1}),s[14]||(s[14]=e(" 中的 ")),s[15]||(s[15]=i("code",null,"rustfmt",-1)),d(" ignore "),s[16]||(s[16]=e("）。Rust 团队已经在标准的 Rust 发行版中包含了这个工具，就像 ")),s[17]||(s[17]=i("code",null,"rustc",-1)),s[18]||(s[18]=e(" 一样。所以它应该已经安装在你的电脑中了！"))])]),s[24]||(s[24]=n(`<p>在 <code>main</code> 函数中有如下代码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码完成这个简单程序的所有工作：在屏幕上打印文本。这里有四个重要的细节需要注意。首先 Rust 的缩进风格使用 4 个空格，而不是 1 个制表符（tab）。</p><p>第二，<code>println!</code> 调用了一个 Rust 宏（macro）。如果是调用函数，则应输入 <code>println</code>（没有<code>!</code>）。我们将在第二十章详细讨论宏。现在你只需记住，当看到符号 <code>!</code> 的时候，就意味着调用的是宏而不是普通函数，并且宏并不总是遵循与函数相同的规则。</p><p>第三，<code>&quot;Hello, world!&quot;</code> 是一个字符串。我们把这个字符串作为一个参数传递给 <code>println!</code>，字符串将被打印到屏幕上。</p><p>第四，该行以分号结尾（<code>;</code>），这代表一个表达式的结束和下一个表达式的开始。大部分 Rust 代码行以分号结尾。</p><h3 id="编译和运行是彼此独立的步骤" tabindex="-1"><a class="header-anchor" href="#编译和运行是彼此独立的步骤"><span>编译和运行是彼此独立的步骤</span></a></h3><p>你刚刚运行了一个新创建的程序，那么让我们检查此过程中的每一个步骤。</p><p>在运行 Rust 程序之前，必须先使用 Rust 编译器编译它，即输入 <code>rustc</code> 命令并传入源文件名称，如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ rustc main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你有 C 或 C++ 背景，就会发现这与 <code>gcc</code> 和 <code>clang</code> 类似。编译成功后，Rust 会输出一个二进制的可执行文件。</p><p>在 Linux、macOS 或 Windows 的 PowerShell 上，在 shell 中输入 <code>ls</code> 命令可以看见这个可执行文件。</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ ls</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">main  main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Linux 和 macOS，你会看到两个文件。在 Windows PowerShell 中，你会看到同使用 CMD 相同的三个文件。在 Windows 的 CMD 上，则输入如下内容：</p><div class="language-doscon line-numbers-mode" data-highlighter="shiki" data-ext="doscon" data-title="doscon" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; dir /B %= the /B option says to only show the file names =%</span></span>
<span class="line"><span>main.exe</span></span>
<span class="line"><span>main.pdb</span></span>
<span class="line"><span>main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这展示了扩展名为 <em>.rs</em> 的源文件、可执行文件（在 Windows 下是 <em>main.exe</em>，其它平台是 <em>main</em>），以及当使用 CMD 时会有一个包含调试信息、扩展名为 <em>.pdb</em> 的文件。从这里开始运行 <em>main</em> 或 <em>main.exe</em> 文件，如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ ./main </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Windows 是 .\\main.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果这里的 <em>main.rs</em> 是上文所述的 “Hello, world!” 程序，那么在终端上就会打印出 <code>Hello, world!</code>。</p><p>如果你更熟悉动态语言，如 Ruby、Python 或 JavaScript，则可能不习惯将编译和运行分为两个单独的步骤。Rust 是一种 <strong>预编译静态类型</strong>（<em>ahead-of-time compiled</em>）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。如果你给他人一个 <em>.rb</em>、<em>.py</em> 或 <em>.js</em> 文件，他们需要先分别安装 Ruby，Python，JavaScript 实现（运行时环境，VM）。不过在这些语言中，只需要一句命令就可以编译和运行程序。这一切都是语言设计上的权衡取舍。</p><p>仅仅使用 <code>rustc</code> 编译简单程序是没问题的，不过随着项目的增长，你可能需要管理你项目的方方面面，并让代码易于分享。接下来，我们要介绍一个叫做 Cargo 的工具，它会帮助你编写真实世界中的 Rust 程序。</p>`,20))])}const b=o(c,[["render",k],["__file","ch01-02-hello-world.html.vue"]]),g=JSON.parse('{"path":"/ch01-02-hello-world.html","title":"ch01-02-hello-world","lang":"zh-CN","frontmatter":{"description":"Hello, World! ch01-02-hello-world.md commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f 既然安装好了 Rust，是时候来编写第一个 Rust 程序了。当学习一门新语言的时候，使用该语言在屏幕上打印 Hello, world! 是一项传统，我们将沿用这一传统！ 注意：本书假...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch01-02-hello-world.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"Hello, World! ch01-02-hello-world.md commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f 既然安装好了 Rust，是时候来编写第一个 Rust 程序了。当学习一门新语言的时候，使用该语言在屏幕上打印 Hello, world! 是一项传统，我们将沿用这一传统！ 注意：本书假..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.78,"words":1735},"filePathRelative":"ch01-02-hello-world.md","excerpt":"<h2>Hello, World!</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch01-02-hello-world.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch01-02-hello-world.md</a><br>\\n<br><br>\\ncommit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f</p>\\n</blockquote>\\n<p>既然安装好了 Rust，是时候来编写第一个 Rust 程序了。当学习一门新语言的时候，使用该语言在屏幕上打印 <code>Hello, world!</code> 是一项传统，我们将沿用这一传统！</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch01-02-hello-world.md","value":{"title":"ch01-02-hello-world","path":"ch01-02-hello-world.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch01-02-hello-world.md"},{"source":"SUMMARY.md","target":"ch01-02-hello-world.md"}]}}}');export{b as comp,g as data};
