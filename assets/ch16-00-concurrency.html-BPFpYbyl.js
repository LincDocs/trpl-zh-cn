import{_ as e,e as r,j as n,o as c}from"./app-BUAJ0pNw.js";const o={};function a(l,t){return c(),r("div",null,t[0]||(t[0]=[n('<h1 id="无畏并发" tabindex="-1">无畏并发</h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch16-00-concurrency.md" target="_blank" rel="noopener noreferrer">ch16-00-concurrency.md</a><br><br><br> commit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f</p></blockquote><p>安全且高效地处理并发编程是 Rust 的另一个主要目标。<strong>并发编程</strong>（<em>Concurrent programming</em>），代表程序的不同部分相互独立地执行，而 <strong>并行编程</strong>（<em>parallel programming</em>）代表程序不同部分同时执行，这两个概念随着计算机越来越多的利用多处理器的优势而显得愈发重要。由于历史原因，在此类上下文中编程一直是困难且容易出错的：Rust 希望能改变这一点。</p><p>起初，Rust 团队认为确保内存安全和防止并发问题是两个分别需要不同方法应对的挑战。随着时间的推移，团队发现所有权和类型系统是一系列解决内存安全 <strong>和</strong> 并发问题的强有力的工具！通过利用所有权和类型检查，在 Rust 中很多并发错误都是 <strong>编译时</strong> 错误，而非运行时错误。因此，相比花费大量时间尝试重现运行时并发 bug 出现的特定情况，Rust 会拒绝编译不正确的代码并提供解释问题的错误信息。因此，你可以在开发时修复代码，而不是在部署到生产环境后修复代码。我们给 Rust 的这一部分起了一个绰号 <strong>无畏并发</strong>（<em>fearless concurrency</em>）。无畏并发令你的代码免于出现诡异的 bug 并可以轻松重构且无需担心会引入新的 bug。</p><blockquote><p>注意：出于简洁的考虑，我们将很多问题归类为 <strong>并发</strong>，而不是更准确的区分 <strong>并发和（或）并行</strong>。如果这是一本专注于并发和/或并行的书，我们肯定会更加精确的。对于本章，当我们谈到 <strong>并发</strong> 时，请自行脑内替换为 <strong>并发和（或）并行</strong>。</p></blockquote><p>很多语言所提供的处理并发问题的解决方法都非常有特色。例如，Erlang 有着优雅的消息传递并发功能，但只有模糊不清的在线程间共享状态的方法。对于高级语言来说，只实现可能解决方案的子集是一个合理的策略，因为高级语言所许诺的价值来源于牺牲一些控制来换取抽象。然而对于底层语言则期望提供在任何给定的情况下有着最高的性能且对硬件有更少的抽象。因此，Rust 提供了多种工具，以符合实际情况和需求的方式来为问题建模。</p><p>如下是本章将要涉及到的内容：</p><ul><li>如何创建线程来同时运行多段代码。</li><li><strong>消息传递</strong>（<em>Message passing</em>）并发，其中信道（channel）被用来在线程间传递消息。</li><li><strong>共享状态</strong>（<em>Shared state</em>）并发，其中多个线程可以访问同一片数据。</li><li><code>Sync</code> 和 <code>Send</code> trait，将 Rust 的并发保证扩展到用户定义的以及标准库提供的类型中。</li></ul>',8)]))}const i=e(o,[["render",a],["__file","ch16-00-concurrency.html.vue"]]),s=JSON.parse('{"path":"/ch16-00-concurrency.html","title":"无畏并发","lang":"zh-CN","frontmatter":{"description":"无畏并发 ch16-00-concurrency.md commit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f 安全且高效地处理并发编程是 Rust 的另一个主要目标。并发编程（Concurrent programming），代表程序的不同部分相互独立地执行，而 并行编程（parallel programming...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch16-00-concurrency.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"无畏并发"}],["meta",{"property":"og:description","content":"无畏并发 ch16-00-concurrency.md commit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f 安全且高效地处理并发编程是 Rust 的另一个主要目标。并发编程（Concurrent programming），代表程序的不同部分相互独立地执行，而 并行编程（parallel programming..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"无畏并发\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":2.56,"words":769},"filePathRelative":"ch16-00-concurrency.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch16-00-concurrency.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch16-00-concurrency.md</a><br>\\n<br><br>\\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f</p>\\n</blockquote>\\n<p>安全且高效地处理并发编程是 Rust 的另一个主要目标。<strong>并发编程</strong>（<em>Concurrent programming</em>），代表程序的不同部分相互独立地执行，而 <strong>并行编程</strong>（<em>parallel programming</em>）代表程序不同部分同时执行，这两个概念随着计算机越来越多的利用多处理器的优势而显得愈发重要。由于历史原因，在此类上下文中编程一直是困难且容易出错的：Rust 希望能改变这一点。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch16-00-concurrency.md","value":{"title":"ch16-00-concurrency","path":"ch16-00-concurrency.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch16-00-concurrency.md"},{"source":"SUMMARY.md","target":"ch16-00-concurrency.md"}]}}}');export{i as comp,s as data};
