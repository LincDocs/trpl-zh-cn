import{_ as d,e,j as o,o as c}from"./app-ka1GL8-S.js";const r={};function p(a,t){return c(),e("div",null,t[0]||(t[0]=[o('<h2 id="附录-b-运算符与符号" tabindex="-1">附录 B：运算符与符号</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/appendix-02-operators.md" target="_blank" rel="noopener noreferrer">appendix-02-operators.md</a><br><br><br> commit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231</p></blockquote><p>该附录包含了 Rust 语法的词汇表，包括运算符以及其他的符号，这些符号单独出现或出现在路径、泛型、trait bounds、宏、属性、注释、元组以及大括号上下文中。</p><h3 id="运算符" tabindex="-1">运算符</h3><p>表 B-1 包含了 Rust 中的运算符、运算符如何出现在上下文中的示例、简短解释以及该运算符是否可重载。如果一个运算符是可重载的，则该运算符上用于重载的相关 trait 也会列出。</p><p><span class="caption">表 B-1: 运算符</span></p><table><thead><tr><th>运算符</th><th>示例</th><th>解释</th><th>是否可重载</th></tr></thead><tbody><tr><td><code>!</code></td><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏展开</td><td></td></tr><tr><td><code>!</code></td><td><code>!expr</code></td><td>按位非或逻辑非</td><td><code>Not</code></td></tr><tr><td><code>!=</code></td><td><code>expr != expr</code></td><td>不等比较</td><td><code>PartialEq</code></td></tr><tr><td><code>%</code></td><td><code>expr % expr</code></td><td>算术取余</td><td><code>Rem</code></td></tr><tr><td><code>%=</code></td><td><code>var %= expr</code></td><td>算术取余与赋值</td><td><code>RemAssign</code></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;expr</code>, <code>&amp;mut expr</code></td><td>借用</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;type</code>, <code>&amp;mut type</code>, <code>&amp;&#39;a type</code>, <code>&amp;&#39;a mut type</code></td><td>借用指针类型</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>expr &amp; expr</code></td><td>按位与</td><td><code>BitAnd</code></td></tr><tr><td><code>&amp;=</code></td><td><code>var &amp;= expr</code></td><td>按位与及赋值</td><td><code>BitAndAssign</code></td></tr><tr><td><code>&amp;&amp;</code></td><td><code>expr &amp;&amp; expr</code></td><td>短路（Short-circuiting）逻辑与</td><td></td></tr><tr><td><code>*</code></td><td><code>expr * expr</code></td><td>算术乘法</td><td><code>Mul</code></td></tr><tr><td><code>*=</code></td><td><code>var *= expr</code></td><td>算术乘法与赋值</td><td><code>MulAssign</code></td></tr><tr><td><code>*</code></td><td><code>*expr</code></td><td>解引用</td><td><code>Deref</code></td></tr><tr><td><code>*</code></td><td><code>*const type</code>, <code>*mut type</code></td><td>裸指针</td><td></td></tr><tr><td><code>+</code></td><td><code>trait + trait</code>, <code>&#39;a + trait</code></td><td>复合类型限制</td><td></td></tr><tr><td><code>+</code></td><td><code>expr + expr</code></td><td>算术加法</td><td><code>Add</code></td></tr><tr><td><code>+=</code></td><td><code>var += expr</code></td><td>算术加法与赋值</td><td><code>AddAssign</code></td></tr><tr><td><code>,</code></td><td><code>expr, expr</code></td><td>参数以及元素分隔符</td><td></td></tr><tr><td><code>-</code></td><td><code>- expr</code></td><td>算术取负</td><td><code>Neg</code></td></tr><tr><td><code>-</code></td><td><code>expr - expr</code></td><td>算术减法</td><td><code>Sub</code></td></tr><tr><td><code>-=</code></td><td><code>var -= expr</code></td><td>算术减法与赋值</td><td><code>SubAssign</code></td></tr><tr><td><code>-&gt;</code></td><td><code>fn(...) -&gt; type</code>, <code>|...| -&gt; type</code></td><td>函数与闭包，返回类型</td><td></td></tr><tr><td><code>.</code></td><td><code>expr.ident</code></td><td>成员访问</td><td></td></tr><tr><td><code>..</code></td><td><code>..</code>, <code>expr..</code>, <code>..expr</code>, <code>expr..expr</code></td><td>右开区间范围</td><td><code>PartialOrd</code></td></tr><tr><td><code>..=</code></td><td><code>..=expr</code>, <code>expr..=expr</code></td><td>右闭区间范围模式</td><td><code>PartialOrd</code></td></tr><tr><td><code>..</code></td><td><code>..expr</code></td><td>结构体更新语法</td><td></td></tr><tr><td><code>..</code></td><td><code>variant(x, ..)</code>, <code>struct_type { x, .. }</code></td><td>“与剩余部分” 的模式绑定</td><td></td></tr><tr><td><code>...</code></td><td><code>expr...expr</code></td><td>（Deprecated，请使用 <code>..=</code>）在模式中：闭区间范围模式</td><td></td></tr><tr><td><code>/</code></td><td><code>expr / expr</code></td><td>算术除法</td><td><code>Div</code></td></tr><tr><td><code>/=</code></td><td><code>var /= expr</code></td><td>算术除法与赋值</td><td><code>DivAssign</code></td></tr><tr><td><code>:</code></td><td><code>pat: type</code>, <code>ident: type</code></td><td>约束</td><td></td></tr><tr><td><code>:</code></td><td><code>ident: expr</code></td><td>结构体字段初始化</td><td></td></tr><tr><td><code>:</code></td><td><code>&#39;a: loop {...}</code></td><td>循环标志</td><td></td></tr><tr><td><code>;</code></td><td><code>expr;</code></td><td>语句和语句结束符</td><td></td></tr><tr><td><code>;</code></td><td><code>[...; len]</code></td><td>固定大小数组语法的部分</td><td></td></tr><tr><td><code>&lt;&lt;</code></td><td><code>expr &lt;&lt; expr</code></td><td>左移</td><td><code>Shl</code></td></tr><tr><td><code>&lt;&lt;=</code></td><td><code>var &lt;&lt;= expr</code></td><td>左移与赋值</td><td><code>ShlAssign</code></td></tr><tr><td><code>&lt;</code></td><td><code>expr &lt; expr</code></td><td>小于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&lt;=</code></td><td><code>expr &lt;= expr</code></td><td>小于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>=</code></td><td><code>var = expr</code>, <code>ident = type</code></td><td>赋值/等值</td><td></td></tr><tr><td><code>==</code></td><td><code>expr == expr</code></td><td>等于比较</td><td><code>PartialEq</code></td></tr><tr><td><code>=&gt;</code></td><td><code>pat =&gt; expr</code></td><td>匹配准备语法的部分</td><td></td></tr><tr><td><code>&gt;</code></td><td><code>expr &gt; expr</code></td><td>大于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;=</code></td><td><code>expr &gt;= expr</code></td><td>大于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;&gt;</code></td><td><code>expr &gt;&gt; expr</code></td><td>右移</td><td><code>Shr</code></td></tr><tr><td><code>&gt;&gt;=</code></td><td><code>var &gt;&gt;= expr</code></td><td>右移与赋值</td><td><code>ShrAssign</code></td></tr><tr><td><code>@</code></td><td><code>ident @ pat</code></td><td>模式绑定</td><td></td></tr><tr><td><code>^</code></td><td><code>expr ^ expr</code></td><td>按位异或</td><td><code>BitXor</code></td></tr><tr><td><code>^=</code></td><td><code>var ^= expr</code></td><td>按位异或与赋值</td><td><code>BitXorAssign</code></td></tr><tr><td><code>|</code></td><td><code>pat | pat</code></td><td>模式选择</td><td></td></tr><tr><td><code>|</code></td><td><code>expr | expr</code></td><td>按位或</td><td><code>BitOr</code></td></tr><tr><td><code>|=</code></td><td><code>var |= expr</code></td><td>按位或与赋值</td><td><code>BitOrAssign</code></td></tr><tr><td><code>||</code></td><td><code>expr || expr</code></td><td>短路（Short-circuiting）逻辑或</td><td></td></tr><tr><td><code>?</code></td><td><code>expr?</code></td><td>错误传播</td><td></td></tr></tbody></table><h3 id="非运算符符号" tabindex="-1">非运算符符号</h3><p>下面的列表中包含了所有和运算符不一样功能的符号；也就是说，它们并不像函数调用或方法调用一样表现。</p><p>表 B-2 展示了以其自身出现以及出现在合法其他各个地方的符号。</p><p><span class="caption">表 B-2：独立语法</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>&#39;ident</code></td><td>命名生命周期或循环标签</td></tr><tr><td><code>...u8</code>, <code>...i32</code>, <code>...f64</code>, <code>...usize</code> 等</td><td>指定类型的数值常量</td></tr><tr><td><code>&quot;...&quot;</code></td><td>字符串常量</td></tr><tr><td><code>r&quot;...&quot;</code>, <code>r#&quot;...&quot;#</code>, <code>r##&quot;...&quot;##</code>, etc.</td><td>原始字符串字面值，未处理的转义字符</td></tr><tr><td><code>b&quot;...&quot;</code></td><td>字节字符串字面值; 构造一个字节数组类型而非字符串</td></tr><tr><td><code>br&quot;...&quot;</code>, <code>br#&quot;...&quot;#</code>, <code>br##&quot;...&quot;##</code> 等</td><td>原始字节字符串字面值，原始和字节字符串字面值的结合</td></tr><tr><td><code>&#39;...&#39;</code></td><td>字符字面值</td></tr><tr><td><code>b&#39;...&#39;</code></td><td>ASCII 码字节字面值</td></tr><tr><td><code>|...| expr</code></td><td>闭包</td></tr><tr><td><code>!</code></td><td>离散函数的总是为空的类型</td></tr><tr><td><code>_</code></td><td>“忽略” 模式绑定；也用于增强整型字面值的可读性</td></tr></tbody></table><p>表 B-3 展示了出现在从模块结构到项的路径上下文中的符号</p><p><span class="caption">表 B-3：路径相关语法</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>ident::ident</code></td><td>命名空间路径</td></tr><tr><td><code>::path</code></td><td>与 crate 根相对的路径（如一个显式绝对路径）</td></tr><tr><td><code>self::path</code></td><td>与当前模块相对的路径（如一个显式相对路径）</td></tr><tr><td><code>super::path</code></td><td>与父模块相对的路径</td></tr><tr><td><code>type::ident</code>, <code>&lt;type as trait&gt;::ident</code></td><td>关联常量、函数以及类型</td></tr><tr><td><code>&lt;type&gt;::...</code></td><td>不可以被直接命名的关联项类型（如 <code>&lt;&amp;T&gt;::...</code>，<code>&lt;[T]&gt;::...</code>，等）</td></tr><tr><td><code>trait::method(...)</code></td><td>通过命名定义的 trait 来消除方法调用的二义性</td></tr><tr><td><code>type::method(...)</code></td><td>通过命名定义的类型来消除方法调用的二义性</td></tr><tr><td><code>&lt;type as trait&gt;::method(...)</code></td><td>通过命名 trait 和类型来消除方法调用的二义性</td></tr></tbody></table><p>表 B-4 展示了出现在泛型类型参数上下文中的符号。</p><p><span class="caption">表 B-4：泛型</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>path&lt;...&gt;</code></td><td>为一个类型中的泛型指定具体参数（如 <code>Vec&lt;u8&gt;</code>）</td></tr><tr><td><code>path::&lt;...&gt;</code>, <code>method::&lt;...&gt;</code></td><td>为一个泛型、函数或表达式中的方法指定具体参数，通常指 turbofish（如 <code>&quot;42&quot;.parse::&lt;i32&gt;()</code>）</td></tr><tr><td><code>fn ident&lt;...&gt; ...</code></td><td>泛型函数定义</td></tr><tr><td><code>struct ident&lt;...&gt; ...</code></td><td>泛型结构体定义</td></tr><tr><td><code>enum ident&lt;...&gt; ...</code></td><td>泛型枚举定义</td></tr><tr><td><code>impl&lt;...&gt; ...</code></td><td>定义泛型实现</td></tr><tr><td><code>for&lt;...&gt; type</code></td><td>高级生命周期限制</td></tr><tr><td><code>type&lt;ident=type&gt;</code></td><td>泛型，其一个或多个相关类型必须被指定为特定类型（如 <code>Iterator&lt;Item=T&gt;</code>）</td></tr></tbody></table><p>表 B-5 展示了出现在使用 trait bounds 约束泛型参数上下文中的符号。</p><p><span class="caption">表 B-5: Trait Bound 约束</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>T: U</code></td><td>泛型参数 <code>T</code> 约束于实现了 <code>U</code> 的类型</td></tr><tr><td><code>T: &#39;a</code></td><td>泛型 <code>T</code> 的生命周期必须长于 <code>&#39;a</code>（意味着该类型不能传递包含生命周期短于 <code>&#39;a</code> 的任何引用）</td></tr><tr><td><code>T: &#39;static</code></td><td>泛型 T 不包含除 &#39;static 之外的借用引用</td></tr><tr><td><code>&#39;b: &#39;a</code></td><td>泛型 <code>&#39;b</code> 生命周期必须长于泛型 <code>&#39;a</code></td></tr><tr><td><code>T: ?Sized</code></td><td>使用一个不定大小的泛型类型</td></tr><tr><td><code>&#39;a + trait</code>, <code>trait + trait</code></td><td>复合类型限制</td></tr></tbody></table><p>表 B-6 展示了在调用或定义宏以及在其上指定属性时的上下文中出现的符号。</p><p><span class="caption">表 B-6: 宏与属性</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>#[meta]</code></td><td>外部属性</td></tr><tr><td><code>#![meta]</code></td><td>内部属性</td></tr><tr><td><code>$ident</code></td><td>宏替换</td></tr><tr><td><code>$ident:kind</code></td><td>宏捕获</td></tr><tr><td><code>$(…)…</code></td><td>宏重复</td></tr><tr><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏调用</td></tr></tbody></table><p>表 B-7 展示了写注释的符号。</p><p><span class="caption">表 B-7: 注释</span></p><table><thead><tr><th>符号</th><th>注释</th></tr></thead><tbody><tr><td><code>//</code></td><td>行注释</td></tr><tr><td><code>//!</code></td><td>内部行文档注释</td></tr><tr><td><code>///</code></td><td>外部行文档注释</td></tr><tr><td><code>/*...*/</code></td><td>块注释</td></tr><tr><td><code>/*!...*/</code></td><td>内部块文档注释</td></tr><tr><td><code>/**...*/</code></td><td>外部块文档注释</td></tr></tbody></table><p>表 B-8 展示了出现在使用元组时上下文中的符号。</p><p><span class="caption">表 B-8: 元组</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>()</code></td><td>空元组（亦称单元），即是字面值也是类型</td></tr><tr><td><code>(expr)</code></td><td>括号表达式</td></tr><tr><td><code>(expr,)</code></td><td>单一元素元组表达式</td></tr><tr><td><code>(type,)</code></td><td>单一元素元组类型</td></tr><tr><td><code>(expr, ...)</code></td><td>元组表达式</td></tr><tr><td><code>(type, ...)</code></td><td>元组类型</td></tr><tr><td><code>expr(expr, ...)</code></td><td>函数调用表达式；也用于初始化元组结构体 <code>struct</code> 以及元组枚举 <code>enum</code> 变体</td></tr><tr><td><code>expr.0</code>, <code>expr.1</code>, etc.</td><td>元组索引</td></tr></tbody></table><p>表 B-9 展示了使用大括号的上下文。</p><p><span class="caption">表 B-9: 大括号</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>{...}</code></td><td>块表达式</td></tr><tr><td><code>Type {...}</code></td><td><code>struct</code> 字面值</td></tr></tbody></table><p>表 B-10 展示了使用方括号的上下文。</p><p><span class="caption">表 B-10: 方括号</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>[...]</code></td><td>数组</td></tr><tr><td><code>[expr; len]</code></td><td>复制了 <code>len</code>个 <code>expr</code>的数组</td></tr><tr><td><code>[type; len]</code></td><td>包含 <code>len</code>个 <code>type</code> 类型的数组</td></tr><tr><td><code>expr[expr]</code></td><td>集合索引。重载（<code>Index</code>, <code>IndexMut</code>）</td></tr><tr><td><code>expr[..]</code>, <code>expr[a..]</code>, <code>expr[..b]</code>, <code>expr[a..b]</code></td><td>集合索引，使用 <code>Range</code>，<code>RangeFrom</code>，<code>RangeTo</code> 或 <code>RangeFull</code> 作为索引来代替集合 slice</td></tr></tbody></table>',36)]))}const i=d(r,[["render",p],["__file","appendix-02-operators.html.vue"]]),l=JSON.parse('{"path":"/appendix-02-operators.html","title":"appendix-02-operators","lang":"zh-CN","frontmatter":{"description":"附录 B：运算符与符号 appendix-02-operators.md commit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231 该附录包含了 Rust 语法的词汇表，包括运算符以及其他的符号，这些符号单独出现或出现在路径、泛型、trait bounds、宏、属性、注释、元组以及大括号上下文中。 运算符 表 B-...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/appendix-02-operators.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"附录 B：运算符与符号 appendix-02-operators.md commit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231 该附录包含了 Rust 语法的词汇表，包括运算符以及其他的符号，这些符号单独出现或出现在路径、泛型、trait bounds、宏、属性、注释、元组以及大括号上下文中。 运算符 表 B-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.28,"words":1885},"filePathRelative":"appendix-02-operators.md","excerpt":"<h2>附录 B：运算符与符号</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/appendix-02-operators.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">appendix-02-operators.md</a><br>\\n<br><br>\\ncommit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231</p>\\n</blockquote>\\n<p>该附录包含了 Rust 语法的词汇表，包括运算符以及其他的符号，这些符号单独出现或出现在路径、泛型、trait bounds、宏、属性、注释、元组以及大括号上下文中。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix-02-operators.md","value":{"title":"appendix-02-operators","path":"appendix-02-operators.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"appendix-02-operators.md"},{"source":"SUMMARY.md","target":"appendix-02-operators.md"}]}}}');export{i as comp,l as data};
