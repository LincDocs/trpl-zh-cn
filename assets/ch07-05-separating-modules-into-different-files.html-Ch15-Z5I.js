import{_ as r,c as n,e as t,a as o,d as s,b as a,w as l,r as d,o as c}from"./app-DUZ3wyEq.js";const p={};function m(h,e){const i=d("RouteLink");return c(),n("div",null,[e[11]||(e[11]=t('<h2 id="将模块拆分成多个文件" tabindex="-1">将模块拆分成多个文件</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch07-05-separating-modules-into-different-files.md" target="_blank" rel="noopener noreferrer">ch07-05-separating-modules-into-different-files.md</a><br><br><br> commit 2b4565662d1a7973d870744a923f58f8f7dcce91</p></blockquote><p>到目前为止，本章所有的例子都在一个文件中定义多个模块。当模块变得更大时，你可能想要将它们的定义移动到单独的文件中，从而使代码更容易阅读。</p><p>例如，我们从示例 7-17 中包含多个餐厅模块的代码开始。我们会将模块提取到各自的文件中，而不是将所有模块都定义到 crate 根文件中。在这里，crate 根文件是 <em>src/lib.rs</em>，不过这个过程也适用于 crate 根文件是 <em>src/main.rs</em> 的二进制 crate。</p><p>首先将 <code>front_of_house</code> 模块提取到其自己的文件中。删除 <code>front_of_house</code> 模块的大括号中的代码，只留下 <code>mod front_of_house;</code> 声明，这样 <em>src/lib.rs</em> 会包含如示例 7-21 所示的代码。注意直到创建示例 7-22 中的 <em>src/front_of_house.rs</em> 文件之前代码都不能编译。</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore,does_not_compile"><span class="line"><span>{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 7-21: 声明 <code>front_of_house</code> 模块，其内容将位于 <em>src/front_of_house.rs</em></span></p><p>接下来将之前大括号内的代码放入一个名叫 <em>src/front_of_house.rs</em> 的新文件中，如示例 7-22 所示。因为编译器找到了 crate 根中名叫 <code>front_of_house</code> 的模块声明，它就知道去搜寻这个文件。</p><p><span class="filename">文件名：src/front_of_house.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 7-22: 在 <em>src/front_of_house.rs</em> 中定义 <code>front_of_house</code><br> 模块</span></p>',12)),o("p",null,[e[1]||(e[1]=s("注意你只需在模块树中的某处使用一次 ")),e[2]||(e[2]=o("code",null,"mod",-1)),e[3]||(e[3]=s(" 声明就可以加载这个文件。一旦编译器知道了这个文件是项目的一部分（并且通过 ")),e[4]||(e[4]=o("code",null,"mod",-1)),e[5]||(e[5]=s(" 语句的位置知道了代码在模块树中的位置），项目中的其他文件应该使用其所声明的位置的路径来引用那个文件的代码，这在")),a(i,{to:"/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html"},{default:l(()=>e[0]||(e[0]=[s("“引用模块项目的路径”")])),_:1,__:[0]}),e[6]||(e[6]=s("部分有讲到。换句话说，")),e[7]||(e[7]=o("code",null,"mod",-1)),e[8]||(e[8]=s()),e[9]||(e[9]=o("strong",null,"不是",-1)),e[10]||(e[10]=s(' 你可能会在其他编程语言中看到的 "include" 操作。'))]),e[12]||(e[12]=t('<p>接下来我们同样将 <code>hosting</code> 模块提取到自己的文件中。这个过程会有所不同，因为 <code>hosting</code> 是 <code>front_of_house</code> 的子模块而不是根模块。我们将 <code>hosting</code> 的文件放在与模块树中它的父级模块同名的目录中，在这里是 <em>src/front_of_house/</em>。</p><p>为了移动 <code>hosting</code>，修改 <em>src/front_of_house.rs</em> 使之仅包含 <code>hosting</code> 模块的声明。</p><p><span class="filename">文件名：src/front_of_house.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着我们创建一个 <em>src/front_of_house</em> 目录和一个包含 <code>hosting</code> 模块定义的 <em><a href="http://hosting.rs" target="_blank" rel="noopener noreferrer">hosting.rs</a></em> 文件：</p><p><span class="filename">文件名：src/front_of_house/hosting.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果将 <em><a href="http://hosting.rs" target="_blank" rel="noopener noreferrer">hosting.rs</a></em> 放在 <em>src</em> 目录，编译器会认为 <code>hosting</code> 模块中的 <em><a href="http://hosting.rs" target="_blank" rel="noopener noreferrer">hosting.rs</a></em> 的代码声明于 crate 根，而不是声明为 <code>front_of_house</code> 的子模块。编译器所遵循的哪些文件对应哪些模块的代码的规则，意味着目录和文件更接近于模块树。</p><blockquote><h3 id="另一种文件路径" tabindex="-1">另一种文件路径</h3><p>目前为止我们介绍了 Rust 编译器所最常用的文件路径；不过一种更老的文件路径也仍然是支持的。</p><p>对于声明于 crate 根的 <code>front_of_house</code> 模块，编译器会在如下位置查找模块代码：</p><ul><li><em>src/front_of_house.rs</em>（我们所介绍的）</li><li><em>src/front_of_house/mod.rs</em>（老风格，不过仍然支持）</li></ul><p>对于 <code>front_of_house</code> 的子模块 <code>hosting</code>，编译器会在如下位置查找模块代码：</p><ul><li><em>src/front_of_house/hosting.rs</em>（我们所介绍的）</li><li><em>src/front_of_house/hosting/mod.rs</em>（老风格，不过仍然支持）</li></ul><p>如果你对同一模块同时使用这两种路径风格，会得到一个编译错误。在同一项目中的不同模块混用不同的路径风格是允许的，不过这会使他人感到疑惑。</p><p>使用 <em><a href="http://mod.rs" target="_blank" rel="noopener noreferrer">mod.rs</a></em> 这一文件名的风格的主要缺点是会导致项目中出现很多 <em><a href="http://mod.rs" target="_blank" rel="noopener noreferrer">mod.rs</a></em> 文件，当你在编辑器中同时打开它们时会感到疑惑。</p></blockquote><p>我们将各个模块的代码移动到独立文件了，同时模块树依旧相同。<code>eat_at_restaurant</code> 中的函数调用也无需修改继续保持有效，即便其定义存在于不同的文件中。这个技巧让你可以在模块代码增长时，将它们移动到新文件中。</p><p>注意，<em>src/lib.rs</em> 中的 <code>pub use crate::front_of_house::hosting</code> 语句也并未发生改变。use 也不会对哪些文件会被编译为 crate 的一部分有任何影响。<code>mod</code> 关键字声明了模块，而 Rust 会在与模块同名的文件中查找模块的代码。</p><h2 id="总结" tabindex="-1">总结</h2><p>Rust 提供了将包分成多个 crate，将 crate 分成模块，以及通过指定绝对或相对路径从一个模块引用另一个模块中定义的项的方式。你可以通过使用 <code>use</code> 语句将路径引入作用域，这样在多次使用时可以使用更短的路径。模块定义的代码默认是私有的，不过可以选择增加 <code>pub</code> 关键字使其定义变为公有。</p><p>接下来，让我们看看一些标准库提供的集合数据类型，你可以利用它们编写出漂亮整洁的代码。</p>',14))])}const u=r(p,[["render",m]]),g=JSON.parse('{"path":"/ch07-05-separating-modules-into-different-files.html","title":"ch07-05-separating-modules-into-different-files","lang":"zh-CN","frontmatter":{"description":"将模块拆分成多个文件 ch07-05-separating-modules-into-different-files.md commit 2b4565662d1a7973d870744a923f58f8f7dcce91 到目前为止，本章所有的例子都在一个文件中定义多个模块。当模块变得更大时，你可能想要将它们的定义移动到单独的文件中，从而使代码更容易阅读...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch07-05-separating-modules-into-different-files.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"将模块拆分成多个文件 ch07-05-separating-modules-into-different-files.md commit 2b4565662d1a7973d870744a923f58f8f7dcce91 到目前为止，本章所有的例子都在一个文件中定义多个模块。当模块变得更大时，你可能想要将它们的定义移动到单独的文件中，从而使代码更容易阅读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":4.47,"words":1340},"filePathRelative":"ch07-05-separating-modules-into-different-files.md","excerpt":"<h2>将模块拆分成多个文件</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch07-05-separating-modules-into-different-files.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch07-05-separating-modules-into-different-files.md</a><br>\\n<br><br>\\ncommit 2b4565662d1a7973d870744a923f58f8f7dcce91</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch07-05-separating-modules-into-different-files.md","value":{"title":"ch07-05-separating-modules-into-different-files","path":"ch07-05-separating-modules-into-different-files.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch07-05-separating-modules-into-different-files.md"},{"source":"SUMMARY.md","target":"ch07-05-separating-modules-into-different-files.md"}]}}}');export{u as comp,g as data};
