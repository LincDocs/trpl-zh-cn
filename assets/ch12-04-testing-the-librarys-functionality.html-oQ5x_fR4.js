import{_ as r,e as d,j as n,f as s,i as e,g as l,h as o,r as a,o as c}from"./app-ka1GL8-S.js";const p={};function h(u,i){const t=a("RouteLink");return c(),d("div",null,[i[37]||(i[37]=n('<h2 id="采用测试驱动开发完善库的功能" tabindex="-1">采用测试驱动开发完善库的功能</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch12-04-testing-the-librarys-functionality.md" target="_blank" rel="noopener noreferrer">ch12-04-testing-the-librarys-functionality.md</a><br><br><br> commit 8fd2327e4135876b368cc2793eb4a7e455b691f0</p></blockquote><p>现在我们将逻辑提取到了 <em>src/lib.rs</em> 并将所有的参数解析和错误处理留在了 <em>src/main.rs</em> 中，为代码的核心功能编写测试将更加容易。我们可以直接使用多种参数调用函数并检查返回值而无需从命令行运行二进制文件了。</p><p>在这一部分，我们将遵循测试驱动开发（Test Driven Development, TDD）的模式来逐步增加 <code>minigrep</code> 的搜索逻辑。它遵循如下步骤：</p><ol><li>编写一个失败的测试，并运行它以确保它失败的原因是你所期望的。</li><li>编写或修改足够的代码来使新的测试通过。</li><li>重构刚刚增加或修改的代码，并确保测试仍然能通过。</li><li>从步骤 1 开始重复！</li></ol><p>虽然这只是众多编写软件的方法之一，不过 TDD 有助于驱动代码的设计。在编写能使测试通过的代码之前编写测试有助于在开发过程中保持高测试覆盖率。</p><p>我们将测试驱动实现实际在文件内容中搜索查询字符串并返回匹配的行示例的功能。我们将在一个叫做 <code>search</code> 的函数中增加这些功能。</p><h3 id="编写失败测试" tabindex="-1">编写失败测试</h3>',8)),s("p",null,[i[1]||(i[1]=e("去掉 ")),i[2]||(i[2]=s("em",null,"src/lib.rs",-1)),i[3]||(i[3]=e(" 和 ")),i[4]||(i[4]=s("em",null,"src/main.rs",-1)),i[5]||(i[5]=e(" 中用于检查程序行为的 ")),i[6]||(i[6]=s("code",null,"println!",-1)),i[7]||(i[7]=e(" 语句，因为不再真正需要它们了。接着我们会像 ")),l(t,{to:"/ch11-01-writing-tests.html#%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0%E5%89%96%E6%9E%90"},{default:o(()=>i[0]||(i[0]=[e("第十一章")])),_:1}),i[8]||(i[8]=e(" 那样增加一个 ")),i[9]||(i[9]=s("code",null,"test",-1)),i[10]||(i[10]=e(" 模块和一个测试函数。测试函数指定了 ")),i[11]||(i[11]=s("code",null,"search",-1)),i[12]||(i[12]=e(" 函数期望拥有的行为：它会获取一个需要查询的字符串和用来查询的文本，并只会返回包含请求的文本行。示例 12-15 展示了这个测试，它还不能编译："))]),i[38]||(i[38]=n('<p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-15/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-15：创建一个我们期望的 <code>search</code> 函数的失败测试</span></p><p>这里选择使用 <code>&quot;duct&quot;</code> 作为这个测试中需要搜索的字符串。用来搜索的文本有三行，其中只有一行包含 <code>&quot;duct&quot;</code>。（注意双引号之后的反斜杠，这告诉 Rust 不要在字符串字面值内容的开头加入换行符）我们断言 <code>search</code> 函数的返回值只包含期望的那一行。</p><p>我们还不能运行这个测试并看到它失败，因为它甚至都还不能编译：<code>search</code> 函数还不存在呢！根据 TDD 的原则，我们将增加足够的代码来使其能够编译：一个总是会返回空 vector 的 <code>search</code> 函数定义，如示例 12-16 所示。然后这个测试应该能够编译并因为空 vector 并不匹配一个包含一行 <code>&quot;safe, fast, productive.&quot;</code> 的 vector 而失败。</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-16/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-16：刚好足够使测试通过编译的 <code>search</code> 函数定义</span></p>',8)),s("p",null,[i[14]||(i[14]=e("注意需要在 ")),i[15]||(i[15]=s("code",null,"search",-1)),i[16]||(i[16]=e(" 的签名中定义一个显式生命周期 ")),i[17]||(i[17]=s("code",null,"'a",-1)),i[18]||(i[18]=e(" 并用于 ")),i[19]||(i[19]=s("code",null,"contents",-1)),i[20]||(i[20]=e(" 参数和返回值。回忆一下 ")),l(t,{to:"/ch10-03-lifetime-syntax.html"},{default:o(()=>i[13]||(i[13]=[e("第十章")])),_:1}),i[21]||(i[21]=e(" 中讲到生命周期参数指定哪个参数的生命周期与返回值的生命周期相关联。在这个例子中，我们表明返回的 vector 中应该包含引用参数 ")),i[22]||(i[22]=s("code",null,"contents",-1)),i[23]||(i[23]=e("（而不是参数")),i[24]||(i[24]=s("code",null,"query",-1)),i[25]||(i[25]=e("）slice 的字符串 slice。"))]),i[39]||(i[39]=n('<p>换句话说，我们告诉 Rust 函数 <code>search</code> 返回的数据将与 <code>search</code> 函数中的参数 <code>contents</code> 的数据存在的一样久。这是非常重要的！为了使这个引用有效那么 <strong>被</strong> slice 引用的数据也需要保持有效；如果编译器认为我们是在创建 <code>query</code> 而不是 <code>contents</code> 的字符串 slice，那么安全检查将是不正确的。</p><p>如果尝试不用生命周期编译的话，我们将得到如下错误：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/output-only-02-missing-lifetimes/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust 不可能知道我们需要的是哪一个参数，所以需要告诉它。因为参数 <code>contents</code> 包含了所有的文本而且我们希望返回匹配的那部分文本，所以我们知道 <code>contents</code> 是应该要使用生命周期语法来与返回值相关联的参数。</p>',4)),s("p",null,[i[27]||(i[27]=e("其他语言中并不需要你在函数签名中将参数与返回值相关联。所以这么做可能仍然感觉有些陌生，随着时间的推移这将会变得越来越容易。你可能想要将这个例子与第十章中 ")),l(t,{to:"/ch10-03-lifetime-syntax.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%A1%AE%E4%BF%9D%E5%BC%95%E7%94%A8%E6%9C%89%E6%95%88"},{default:o(()=>i[26]||(i[26]=[e("“生命周期确保引用有效”")])),_:1}),i[28]||(i[28]=e(" 部分做对比。"))]),i[40]||(i[40]=n('<p>现在运行测试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-16/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好的，测试失败了，这正是我们所期望的。修改代码来让测试通过吧！</p><h3 id="编写使测试通过的代码" tabindex="-1">编写使测试通过的代码</h3><p>目前测试之所以会失败是因为我们总是返回一个空的 vector。为了修复并实现 <code>search</code>，我们的程序需要遵循如下步骤：</p><ul><li>遍历内容的每一行文本。</li><li>查看这一行是否包含要搜索的字符串。</li><li>如果有，将这一行加入列表返回值中。</li><li>如果没有，什么也不做。</li><li>返回匹配到的结果列表</li></ul><p>让我们一步一步的来，从遍历每行开始。</p><h4 id="使用-lines-方法遍历每一行" tabindex="-1">使用 <code>lines</code> 方法遍历每一行</h4><p>Rust 有一个有助于一行一行遍历字符串的方法，出于方便它被命名为 <code>lines</code>，它如示例 12-17 这样工作。注意这还不能编译：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-17/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-17：遍历 <code>contents</code> 的每一行</span></p>',12)),s("p",null,[i[31]||(i[31]=s("code",null,"lines",-1)),i[32]||(i[32]=e(" 方法返回一个迭代器。")),l(t,{to:"/ch13-02-iterators.html"},{default:o(()=>i[29]||(i[29]=[e("第十三章")])),_:1}),i[33]||(i[33]=e(" 会深入了解迭代器，不过我们已经在 ")),l(t,{to:"/ch03-05-control-flow.html#%E4%BD%BF%E7%94%A8-for-%E9%81%8D%E5%8E%86%E9%9B%86%E5%90%88"},{default:o(()=>i[30]||(i[30]=[e("示例 3-5")])),_:1}),i[34]||(i[34]=e(" 中见过使用迭代器的方法了，在那里使用了一个 ")),i[35]||(i[35]=s("code",null,"for",-1)),i[36]||(i[36]=e(" 循环和迭代器在一个集合的每一项上运行了一些代码。"))]),i[41]||(i[41]=n('<h4 id="用查询字符串搜索每一行" tabindex="-1">用查询字符串搜索每一行</h4><p>接下来将会增加检查当前行是否包含查询字符串的功能。幸运的是，字符串类型为此也有一个叫做 <code>contains</code> 的实用方法！如示例 12-18 所示在 <code>search</code> 函数中加入 <code>contains</code> 方法调用。注意这仍然不能编译：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-18/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-18：增加检查文本行是否包含 <code>query</code> 中字符串的功能</span></p><h4 id="存储匹配的行" tabindex="-1">存储匹配的行</h4><p>为了完成这个函数，我们还需要一个方法来存储包含查询字符串的行。为此可以在 <code>for</code> 循环之前创建一个可变的 vector 并调用 <code>push</code> 方法在 vector 中存放一个 <code>line</code>。在 <code>for</code> 循环之后，返回这个 vector，如示例 12-19 所示：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-19：储存匹配的行以便可以返回它们</span></p><p>现在 <code>search</code> 函数应该返回只包含 <code>query</code> 的那些行，而测试应该会通过。让我们运行测试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-19/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试通过了，它可以工作了！</p><p>现在正是可以考虑重构的时机，在保证测试通过，保持功能不变的前提下重构 <code>search</code> 函数。<code>search</code> 函数中的代码并不坏，不过并没有利用迭代器的一些实用功能。第十三章将回到这个例子并深入探索迭代器并看看如何改进代码。</p><h4 id="在-run-函数中使用-search-函数" tabindex="-1">在 <code>run</code> 函数中使用 <code>search</code> 函数</h4><p>现在 <code>search</code> 函数是可以工作并测试通过了的，我们需要实际在 <code>run</code> 函数中调用 <code>search</code>。需要将 <code>config.query</code> 值和 <code>run</code> 从文件中读取的 <code>contents</code> 传递给 <code>search</code> 函数。接着 <code>run</code> 会打印出 <code>search</code> 返回的每一行：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里仍然使用了 <code>for</code> 循环获取了 <code>search</code> 返回的每一行并打印出来。</p><p>现在整个程序应该可以工作了！让我们试一试，首先使用一个只会在艾米莉·狄金森的诗中返回一行的单词 “frog”：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好的！现在试试一个会匹配多行的单词，比如 “body”：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/output-only-03-multiple-matches/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最后，让我们确保搜索一个在诗中哪里都没有的单词时不会得到任何行，比如 &quot;monomorphization&quot;：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/output-only-04-no-matches/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>非常好！我们创建了一个属于自己的迷你版经典工具，并学习了很多如何组织程序的知识。我们还学习了一些文件输入输出、生命周期、测试和命令行解析的内容。</p><p>为了使这个项目更丰满，我们将简要的展示如何处理环境变量和打印到标准错误，这两者在编写命令行程序时都很有用。</p>',27))])}const b=r(p,[["render",h],["__file","ch12-04-testing-the-librarys-functionality.html.vue"]]),m=JSON.parse('{"path":"/ch12-04-testing-the-librarys-functionality.html","title":"ch12-04-testing-the-librarys-functionality","lang":"zh-CN","frontmatter":{"description":"采用测试驱动开发完善库的功能 ch12-04-testing-the-librarys-functionality.md commit 8fd2327e4135876b368cc2793eb4a7e455b691f0 现在我们将逻辑提取到了 src/lib.rs 并将所有的参数解析和错误处理留在了 src/main.rs 中，为代码的核心功能编写测试将...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch12-04-testing-the-librarys-functionality.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"采用测试驱动开发完善库的功能 ch12-04-testing-the-librarys-functionality.md commit 8fd2327e4135876b368cc2793eb4a7e455b691f0 现在我们将逻辑提取到了 src/lib.rs 并将所有的参数解析和错误处理留在了 src/main.rs 中，为代码的核心功能编写测试将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.9,"words":2369},"filePathRelative":"ch12-04-testing-the-librarys-functionality.md","excerpt":"<h2>采用测试驱动开发完善库的功能</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch12-04-testing-the-librarys-functionality.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch12-04-testing-the-librarys-functionality.md</a><br>\\n<br><br>\\ncommit 8fd2327e4135876b368cc2793eb4a7e455b691f0</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch12-04-testing-the-librarys-functionality.md","value":{"title":"ch12-04-testing-the-librarys-functionality","path":"ch12-04-testing-the-librarys-functionality.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch12-04-testing-the-librarys-functionality.md"},{"source":"SUMMARY.md","target":"ch12-04-testing-the-librarys-functionality.md"}]}}}');export{b as comp,m as data};
