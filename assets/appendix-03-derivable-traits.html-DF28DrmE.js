import{_ as i,e as l,j as t,f as o,i as d,g as r,h as c,r as p,o as n}from"./app-oyO3eSzo.js";const s={};function E(u,e){const a=p("RouteLink");return n(),l("div",null,[e[27]||(e[27]=t('<h2 id="附录-c-可派生的-trait" tabindex="-1"><a class="header-anchor" href="#附录-c-可派生的-trait"><span>附录 C：可派生的 trait</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/appendix-03-derivable-traits.md" target="_blank" rel="noopener noreferrer">appendix-03-derivable-traits.md</a><br><br><br> commit c07dddac692848ade6c2112c8e15a7087fbbec45</p></blockquote><p>在本书的各个部分中，我们讨论了可应用于结构体和枚举定义的 <code>derive</code> 属性。<code>derive</code> 属性会在使用 <code>derive</code> 语法标记的类型上生成对应 trait 的默认实现的代码。</p><p>在本附录中提供了标准库中所有可以使用 <code>derive</code> 的 trait 的参考。这些部分涉及到：</p><ul><li>该 trait 将会派生什么样的操作符和方法</li><li>由 <code>derive</code> 提供什么样的 trait 实现</li><li>由什么来实现类型的 trait</li><li>是否允许实现该 trait 的条件</li><li>需要 trait 操作的例子</li></ul><p>如果你希望不同于 <code>derive</code> 属性所提供的行为，请查阅 <a href="https://doc.rust-lang.org/std/index.html" target="_blank" rel="noopener noreferrer">标准库文档</a> 中每个 trait 的细节以了解如何手动实现它们。</p><p>这里列出的 trait 是仅有的在标准库中定义且能通过 <code>derive</code> 在类型上实现。标准库中定义的其它 trait 不能通过 <code>derive</code> 在类型上实现。这些 trait 不存在有意义的默认行为，所以由你负责以合理的方式实现它们。</p><p>一个无法被派生的 trait 的例子是为终端用户处理格式化的 <code>Display</code> 。你应该时常考虑使用合适的方法来为终端用户显示一个类型。终端用户应该看到类型的什么部分？他们会找出相关部分吗？对他们来说最相关的数据格式是什么样的？Rust 编译器没有这样的洞察力，因此无法为你提供合适的默认行为。</p>',8)),o("p",null,[e[1]||(e[1]=d("本附录所提供的可派生 trait 列表并不全面：库可以为其自己的 trait 实现 ")),e[2]||(e[2]=o("code",null,"derive",-1)),e[3]||(e[3]=d("，可以使用 ")),e[4]||(e[4]=o("code",null,"derive",-1)),e[5]||(e[5]=d(" 的 trait 列表事实上是无限的。实现 ")),e[6]||(e[6]=o("code",null,"derive",-1)),e[7]||(e[7]=d(" 涉及到过程宏的应用，这在第二十章的 ")),r(a,{to:"/ch20-06-macros.html#%E5%AE%8F"},{default:c(()=>e[0]||(e[0]=[d("“宏”")])),_:1}),e[8]||(e[8]=d(" 有介绍。"))]),e[28]||(e[28]=t('<h3 id="用于程序员输出的-debug" tabindex="-1"><a class="header-anchor" href="#用于程序员输出的-debug"><span>用于程序员输出的 <code>Debug</code></span></a></h3><p><code>Debug</code> trait 用于开启格式化字符串中的调试格式，其通过在 <code>{}</code> 占位符中增加 <code>:?</code> 表明。</p><p><code>Debug</code> trait 允许以调试目的来打印一个类型的实例，所以使用该类型的程序员可以在程序执行的特定时间点观察其实例。</p><p>例如，在使用 <code>assert_eq!</code> 宏时，<code>Debug</code> trait 是必须的。如果等式断言失败，这个宏就把给定实例的值作为参数打印出来，如此程序员可以看到两个实例为什么不相等。</p><h3 id="等值比较的-partialeq-和-eq" tabindex="-1"><a class="header-anchor" href="#等值比较的-partialeq-和-eq"><span>等值比较的 <code>PartialEq</code> 和 <code>Eq</code></span></a></h3><p><code>PartialEq</code> trait 可以比较一个类型的实例以检查是否相等，并开启了 <code>==</code> 和 <code>!=</code> 运算符的功能。</p><p>派生的 <code>PartialEq</code> 实现了 <code>eq</code> 方法。当 <code>PartialEq</code> 在结构体上派生时，只有<em>所有</em> 的字段都相等时两个实例才相等，同时只要有任何字段不相等则两个实例就不相等。当在枚举上派生时，每一个成员都和其自身相等，且和其他成员都不相等。</p><p>例如，当使用 <code>assert_eq!</code> 宏时，需要比较一个类型的两个实例是否相等，则 <code>PartialEq</code> trait 是必须的。</p><p><code>Eq</code> trait 没有方法。其作用是表明每一个被标记类型的值等于其自身。<code>Eq</code> trait 只能应用于那些实现了 <code>PartialEq</code> 的类型，但并非所有实现了 <code>PartialEq</code> 的类型都可以实现 <code>Eq</code>。浮点类型就是一个例子：浮点数的实现表明两个非数字（<code>NaN</code>，not-a-number）值是互不相等的。</p><p>例如，对于一个 <code>HashMap&lt;K, V&gt;</code> 中的 key 来说， <code>Eq</code> 是必须的，这样 <code>HashMap&lt;K, V&gt;</code> 就可以知道两个 key 是否一样了。</p><h3 id="次序比较的-partialord-和-ord" tabindex="-1"><a class="header-anchor" href="#次序比较的-partialord-和-ord"><span>次序比较的 <code>PartialOrd</code> 和 <code>Ord</code></span></a></h3><p><code>PartialOrd</code> trait 可以基于排序的目的而比较一个类型的实例。实现了 <code>PartialOrd</code> 的类型可以使用 <code>&lt;</code>、 <code>&gt;</code>、<code>&lt;=</code> 和 <code>&gt;=</code> 操作符。但只能在同时实现了 <code>PartialEq</code> 的类型上使用 <code>PartialOrd</code>。</p><p>派生 <code>PartialOrd</code> 实现了 <code>partial_cmp</code> 方法，其返回一个 <code>Option&lt;Ordering&gt;</code> ，但当给定值无法产生顺序时将返回 <code>None</code>。尽管大多数类型的值都可以比较，但一个无法产生顺序的例子是：浮点类型的非数字值。当在浮点数上调用 <code>partial_cmp</code> 时，<code>NaN</code> 的浮点数将返回 <code>None</code>。</p><p>当在结构体上派生时，<code>PartialOrd</code> 按照结构体定义中字段出现的顺序，依次比较每个字段的值，以此来比较两个实例。当在枚举上派生时，认为在枚举定义中声明较早的枚举变体小于其后的变体。</p><p>例如，对于来自于 <code>rand</code> crate 中的 <code>gen_range</code> 方法来说，当在一个范围表达式指定的范围内生成一个随机值时，<code>PartialOrd</code> trait 是必须的。</p><p><code>Ord</code> trait 也让你明白在一个带注解类型上的任意两个值存在有效顺序。<code>Ord</code> trait 实现了 <code>cmp</code> 方法，它返回一个 <code>Ordering</code> 而不是 <code>Option&lt;Ordering&gt;</code>，因为总存在一个合法的顺序。只可以在实现了 <code>PartialOrd</code> 和 <code>Eq</code>（<code>Eq</code> 依赖 <code>PartialEq</code>）的类型上使用 <code>Ord</code> trait。当在结构体或枚举上派生时， <code>cmp</code> 和以 <code>PartialOrd</code> 派生实现的 <code>partial_cmp</code> 表现一致。</p><p>例如，当在 <code>BTreeSet&lt;T&gt;</code>（一种基于有序值存储数据的数据结构）上存值时，<code>Ord</code> 是必须的。</p><h3 id="复制值的-clone-和-copy" tabindex="-1"><a class="header-anchor" href="#复制值的-clone-和-copy"><span>复制值的 <code>Clone</code> 和 <code>Copy</code></span></a></h3>',18)),o("p",null,[e[10]||(e[10]=o("code",null,"Clone",-1)),e[11]||(e[11]=d(" trait 可以明确地创建一个值的深拷贝（deep copy），复制过程可能包含任意代码的执行以及堆上数据的复制。查阅第四章 ")),r(a,{to:"/ch04-01-what-is-ownership.html#%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%8C%E5%85%8B%E9%9A%86"},{default:c(()=>e[9]||(e[9]=[d("“变量与数据交互的方式（二）：克隆”")])),_:1}),e[12]||(e[12]=d(" 以获取有关 ")),e[13]||(e[13]=o("code",null,"Clone",-1)),e[14]||(e[14]=d(" 的更多信息。"))]),e[29]||(e[29]=t("<p>派生 <code>Clone</code> 实现了 <code>clone</code> 方法，其为整个的类型实现时，在类型的每一部分上调用了 <code>clone</code> 方法。这意味着类型中所有字段或值也必须实现了 <code>Clone</code>，这样才能够派生 <code>Clone</code> 。</p><p>例如，当在一个切片（slice）上调用 <code>to_vec</code> 方法时，<code>Clone</code> 是必须的。切片并不拥有其包含的实例，但是从 <code>to_vec</code> 中返回的 vector 需要拥有其实例，因此，<code>to_vec</code> 在每个元素上调用 <code>clone</code>。因此，存储在切片中的类型必须实现 <code>Clone</code>。</p>",2)),o("p",null,[e[16]||(e[16]=o("code",null,"Copy",-1)),e[17]||(e[17]=d(" trait 允许你通过只拷贝存储在栈上的位来复制值而不需要额外的代码。查阅第四章 ")),r(a,{to:"/ch04-01-what-is-ownership.html#%E5%8F%AA%E5%9C%A8%E6%A0%88%E4%B8%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D"},{default:c(()=>e[15]||(e[15]=[d("“只在栈上的数据：拷贝”")])),_:1}),e[18]||(e[18]=d(" 的部分来获取有关 ")),e[19]||(e[19]=o("code",null,"Copy",-1)),e[20]||(e[20]=d(" 的更多信息。"))]),e[30]||(e[30]=t('<p><code>Copy</code> trait 并未定义任何方法来阻止编程人员重写这些方法或违反不需要执行额外代码的假设。尽管如此，所有的编程人员可以假设复制（copy）一个值非常快。</p><p>可以在类型内部全部实现 <code>Copy</code> trait 的任意类型上派生 <code>Copy</code>。一个实现了 <code>Copy</code> 的类型必须也实现了 <code>Clone</code>，因为一个实现了 <code>Copy</code> 的类型也简单地实现了 <code>Clone</code>，其执行和 <code>Copy</code> 相同的任务。</p><p><code>Copy</code> trait 很少使用；实现 <code>Copy</code> 的类型是可以优化的，这意味着你无需调用 <code>clone</code>，这让代码更简洁。</p><p>任何使用 <code>Copy</code> 的代码都可以通过 <code>Clone</code> 实现，但代码可能会稍慢，或者不得不在代码中的许多位置上使用 <code>clone</code>。</p><h3 id="固定大小的值到值映射的-hash" tabindex="-1"><a class="header-anchor" href="#固定大小的值到值映射的-hash"><span>固定大小的值到值映射的 <code>Hash</code></span></a></h3><p><code>Hash</code> trait 可以实例化一个任意大小的类型，并且能够用哈希（hash）函数将该实例映射到一个固定大小的值上。派生 <code>Hash</code> 实现了 <code>hash</code> 方法。<code>hash</code> 方法的派生实现结合了在类型的每部分调用 <code>hash</code> 的结果，这意味着所有的字段或值也必须实现了 <code>Hash</code>，这样才能够派生 <code>Hash</code>。</p><p>例如，在 <code>HashMap&lt;K, V&gt;</code> 上存储数据，存放 key 的时候，<code>Hash</code> 是必须的。</p><h3 id="默认值的-default" tabindex="-1"><a class="header-anchor" href="#默认值的-default"><span>默认值的 <code>Default</code></span></a></h3><p><code>Default</code> trait 使你创建一个类型的默认值。派生 <code>Default</code> 实现了 <code>default</code> 函数。<code>default</code> 函数的派生实现调用了类型每部分的 <code>default</code> 函数，这意味着类型中所有的字段或值也必须实现了 <code>Default</code>，这样才能够派生 <code>Default</code> 。</p>',9)),o("p",null,[e[22]||(e[22]=o("code",null,"Default::default",-1)),e[23]||(e[23]=d(" 函数通常结合结构体更新语法一起使用，这在第五章的 ")),r(a,{to:"/ch05-01-defining-structs.html#%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93%E6%9B%B4%E6%96%B0%E8%AF%AD%E6%B3%95%E4%BB%8E%E5%85%B6%E4%BB%96%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B"},{default:c(()=>e[21]||(e[21]=[d("“使用结构体更新语法从其他实例中创建实例”")])),_:1}),e[24]||(e[24]=d(" 部分有讨论。可以自定义一个结构体的一小部分字段而剩余字段则使用 ")),e[25]||(e[25]=o("code",null,"..Default::default()",-1)),e[26]||(e[26]=d(" 设置为默认值。"))]),e[31]||(e[31]=t("<p>例如，当你在 <code>Option&lt;T&gt;</code> 实例上使用 <code>unwrap_or_default</code> 方法时，<code>Default</code> trait 是必须的。如果 <code>Option&lt;T&gt;</code> 是 <code>None</code>的话，<code>unwrap_or_default</code> 方法将返回存储在 <code>Option&lt;T&gt;</code> 中 <code>T</code> 类型的 <code>Default::default</code> 的结果。</p>",1))])}const b=i(s,[["render",E],["__file","appendix-03-derivable-traits.html.vue"]]),f=JSON.parse('{"path":"/appendix-03-derivable-traits.html","title":"appendix-03-derivable-traits","lang":"zh-CN","frontmatter":{"description":"附录 C：可派生的 trait appendix-03-derivable-traits.md commit c07dddac692848ade6c2112c8e15a7087fbbec45 在本书的各个部分中，我们讨论了可应用于结构体和枚举定义的 derive 属性。derive 属性会在使用 derive 语法标记的类型上生成对应 trait 的默...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/appendix-03-derivable-traits.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"附录 C：可派生的 trait appendix-03-derivable-traits.md commit c07dddac692848ade6c2112c8e15a7087fbbec45 在本书的各个部分中，我们讨论了可应用于结构体和枚举定义的 derive 属性。derive 属性会在使用 derive 语法标记的类型上生成对应 trait 的默..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.51,"words":2252},"filePathRelative":"appendix-03-derivable-traits.md","excerpt":"<h2>附录 C：可派生的 trait</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/appendix-03-derivable-traits.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">appendix-03-derivable-traits.md</a><br>\\n<br><br>\\ncommit c07dddac692848ade6c2112c8e15a7087fbbec45</p>\\n</blockquote>\\n<p>在本书的各个部分中，我们讨论了可应用于结构体和枚举定义的 <code>derive</code> 属性。<code>derive</code> 属性会在使用 <code>derive</code> 语法标记的类型上生成对应 trait 的默认实现的代码。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix-03-derivable-traits.md","value":{"title":"appendix-03-derivable-traits","path":"appendix-03-derivable-traits.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"appendix-03-derivable-traits.md"},{"source":"SUMMARY.md","target":"appendix-03-derivable-traits.md"}]}}}');export{b as comp,f as data};
