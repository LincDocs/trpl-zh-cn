import{_ as r,c as n,a as t,d as e,o as c}from"./app-CXbgoZN5.js";const a={};function i(l,o){return c(),n("div",null,o[0]||(o[0]=[t("h1",{id:"rust-的面向对象特性",tabindex:"-1"},"Rust 的面向对象特性",-1),t("blockquote",null,[t("p",null,[t("a",{href:"https://github.com/rust-lang/book/blob/main/src/ch18-00-oop.md",target:"_blank",rel:"noopener noreferrer"},"ch18-00-oop.md"),t("br"),t("br"),t("br"),e(" commit 398d6f48d2e6b7b15efd51c4541d446e89de3892")])],-1),t("p",null,[e("面向对象编程（Object-Oriented Programming，OOP）是一种对程序进行建模方式。对象（Object）作为一个编程概念来源于 20 世纪 60 年代的 Simula 编程语言。这些对象影响了 Alan Kay 的编程架构，该架构中对象之间互相传递消息。他在 1967 年创造了 "),t("strong",null,"面向对象编程"),e(" （"),t("em",null,"object-oriented programming"),e("）这个术语。关于 OOP 是什么有很多相互矛盾的定义；在一些定义下，Rust 是面向对象的；在其他定义下，Rust 不是。在本章节中，我们会探索一些被普遍认为是面向对象的特性和这些特性是如何体现在 Rust 语言习惯中的。接着会展示如何在 Rust 中实现面向对象设计模式，并讨论这么做与利用 Rust 自身的一些优势实现的方案相比有什么取舍。")],-1)]))}const d=r(a,[["render",i]]),p=JSON.parse('{"path":"/ch18-00-oop.html","title":"Rust 的面向对象特性","lang":"zh-CN","frontmatter":{"description":"Rust 的面向对象特性 ch18-00-oop.md commit 398d6f48d2e6b7b15efd51c4541d446e89de3892 面向对象编程（Object-Oriented Programming，OOP）是一种对程序进行建模方式。对象（Object）作为一个编程概念来源于 20 世纪 60 年代的 Simula 编程语言。这些...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 的面向对象特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch18-00-oop.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"Rust 的面向对象特性"}],["meta",{"property":"og:description","content":"Rust 的面向对象特性 ch18-00-oop.md commit 398d6f48d2e6b7b15efd51c4541d446e89de3892 面向对象编程（Object-Oriented Programming，OOP）是一种对程序进行建模方式。对象（Object）作为一个编程概念来源于 20 世纪 60 年代的 Simula 编程语言。这些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":0.82,"words":245},"filePathRelative":"ch18-00-oop.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch18-00-oop.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch18-00-oop.md</a><br>\\n<br><br>\\ncommit 398d6f48d2e6b7b15efd51c4541d446e89de3892</p>\\n</blockquote>\\n<p>面向对象编程（Object-Oriented Programming，OOP）是一种对程序进行建模方式。对象（Object）作为一个编程概念来源于 20 世纪 60 年代的 Simula 编程语言。这些对象影响了 Alan Kay 的编程架构，该架构中对象之间互相传递消息。他在 1967 年创造了 <strong>面向对象编程</strong> （<em>object-oriented programming</em>）这个术语。关于 OOP 是什么有很多相互矛盾的定义；在一些定义下，Rust 是面向对象的；在其他定义下，Rust 不是。在本章节中，我们会探索一些被普遍认为是面向对象的特性和这些特性是如何体现在 Rust 语言习惯中的。接着会展示如何在 Rust 中实现面向对象设计模式，并讨论这么做与利用 Rust 自身的一些优势实现的方案相比有什么取舍。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch18-00-oop.md","value":{"title":"ch18-00-oop","path":"ch18-00-oop.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch18-00-oop.md"}]}}}');export{d as comp,p as data};
