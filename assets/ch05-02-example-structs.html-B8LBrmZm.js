import{_ as l,c as r,e as t,a as i,d as s,b as a,w as n,r as o,o as c}from"./app-BTkjaAF8.js";const u={};function p(g,e){const d=o("RouteLink");return c(),r("div",null,[e[31]||(e[31]=t('<h2 id="结构体示例程序" tabindex="-1">结构体示例程序</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch05-02-example-structs.md" target="_blank" rel="noopener noreferrer">ch05-02-example-structs.md</a><br><br><br> commit 8612c4a5801b61f8d2e952f8bbbb444692ff1ec2</p></blockquote><p>为了理解何时会需要使用结构体，让我们编写一个计算长方形面积的程序。我们会从单独的变量开始，接着重构程序直到使用结构体替代它们为止。</p><p>使用 Cargo 新建一个叫做 <em>rectangles</em> 的二进制程序，它获取以像素为单位的长方形的宽度和高度，并计算出长方形的面积。示例 5-8 显示了位于项目的 <em>src/main.rs</em> 中的小程序，它刚刚好实现此功能：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 5-8：通过分别指定长方形的宽和高的变量来计算长方形面积</span></p><p>现在使用 <code>cargo run</code> 运行程序：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个示例代码在调用 <code>area</code> 函数时传入每个维度，虽然可以正确计算出长方形的面积，但我们仍然可以修改这段代码来使它的意义更加明确，并且增加可读性。</p><p>这些代码的问题突显在 <code>area</code> 的签名上：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',12)),i("p",null,[e[1]||(e[1]=s("函数 ")),e[2]||(e[2]=i("code",null,"area",-1)),e[3]||(e[3]=s(" 本应该计算一个长方形的面积，不过函数却有两个参数。这两个参数是相关联的，不过程序本身却没有表现出这一点。将长度和宽度组合在一起将更易懂也更易处理。第三章的 ")),a(d,{to:"/ch03-02-data-types.html#%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B"},{default:n(()=>e[0]||(e[0]=[s("“元组类型”")])),_:1,__:[0]}),e[4]||(e[4]=s(" 部分已经讨论过了一种可行的方法：元组。"))]),e[32]||(e[32]=t('<h3 id="使用元组重构" tabindex="-1">使用元组重构</h3><p>示例 5-9 展示了使用元组的另一个程序版本。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 5-9：使用元组来指定长方形的宽高</span></p><p>在某种程度上说，这个程序更好一点了。元组帮助我们增加了一些结构性，并且现在只需传一个参数。不过在另一方面，这个版本却有一点不明确了：元组并没有给出元素的名称，所以计算变得更费解了，因为不得不使用索引来获取元组的每一部分：</p><p>在计算面积时将宽和高弄混倒无关紧要，不过当在屏幕上绘制长方形时就有问题了！我们必须牢记 <code>width</code> 的元组索引是 <code>0</code>，<code>height</code> 的元组索引是 <code>1</code>。如果其他人要使用这些代码，他们必须要搞清楚这一点，并也要牢记于心。很容易忘记或者混淆这些值而造成错误，因为我们没有在代码中传达数据的意图。</p><h3 id="使用结构体重构-赋予更多意义" tabindex="-1">使用结构体重构：赋予更多意义</h3><p>我们使用结构体为数据命名来为其赋予意义。我们可以将我们正在使用的元组转换成一个有整体名称而且每个部分也有对应名字的结构体，如示例 5-10 所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 5-10：定义 <code>Rectangle</code> 结构体</span></p><p>这里我们定义了一个结构体并称其为 <code>Rectangle</code>。在大括号中定义了字段 <code>width</code> 和 <code>height</code>，类型都是 <code>u32</code>。接着在 <code>main</code> 中，我们创建了一个具体的 <code>Rectangle</code> 实例，它的宽是 <code>30</code>，高是 <code>50</code>。</p><p>函数 <code>area</code> 现在被定义为接收一个名叫 <code>rectangle</code> 的参数，其类型是一个结构体 <code>Rectangle</code> 实例的不可变借用。第四章讲到过，我们希望借用结构体而不是获取它的所有权，这样 <code>main</code> 函数就可以保持 <code>rect1</code> 的所有权并继续使用它，所以这就是为什么在函数签名和调用的地方会有 <code>&amp;</code>。</p><p><code>area</code> 函数访问 <code>Rectangle</code> 实例的 <code>width</code> 和 <code>height</code> 字段（注意，访问对结构体的引用的字段不会移动字段的所有权，这就是为什么你经常看到对结构体的引用）。<code>area</code> 的函数签名现在明确的阐述了我们的意图：使用 <code>Rectangle</code> 的 <code>width</code> 和 <code>height</code> 字段，计算 <code>Rectangle</code> 的面积。这表明宽高是相互联系的，并为这些值提供了描述性的名称而不是使用元组的索引值 <code>0</code> 和 <code>1</code> 。结构体胜在更清晰明了。</p><h3 id="通过派生-trait-增加实用功能" tabindex="-1">通过派生 trait 增加实用功能</h3><p>在调试程序时打印出 <code>Rectangle</code> 实例来查看其所有字段的值非常有用。示例 5-11 像前面章节那样尝试使用 <a href="https://doc.rust-lang.org/std/macro.println.html" target="_blank" rel="noopener noreferrer"><code>println!</code> 宏</a>。但这并不行。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore,does_not_compile"><span class="line"><span>{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 5-11：尝试打印出 <code>Rectangle</code> 实例</span></p><p>当我们运行这个代码时，会出现带有如下核心信息的错误：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>println!</code> 宏能处理很多类型的格式，不过，<code>{}</code> 默认告诉 <code>println!</code> 使用被称为 <code>Display</code> 的格式：意在提供给直接终端用户查看的输出。目前为止见过的基本类型都默认实现了 <code>Display</code>，因为它就是向用户展示 <code>1</code> 或其他任何基本类型的唯一方式。不过对于结构体，<code>println!</code> 应该用来输出的格式是不明确的，因为这有更多显示的可能性：是否需要逗号？需要打印出大括号吗？所有字段都应该显示吗？由于这种不确定性，Rust 不会尝试猜测我们的意图，所以结构体并没有提供一个 <code>Display</code> 实现来使用 <code>println!</code> 与 <code>{}</code> 占位符。</p><p>但是如果我们继续阅读错误，将会发现这个有帮助的信息：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>让我们来试试！现在 <code>println!</code> 宏调用看起来像 <code>println!(&quot;rect1 is {:?}&quot;, rect1);</code> 这样。在 <code>{}</code> 中加入 <code>:?</code> 指示符告诉 <code>println!</code> 我们想要使用叫做 <code>Debug</code> 的输出格式。<code>Debug</code> 是一个 trait，它允许我们以一种对开发者有帮助的方式打印结构体，以便当我们调试代码时能看到它的值。</p><p>这样调整后再次运行程序。见鬼了！仍然能看到一个错误：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不过编译器又一次给出了一个有帮助的信息：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust <strong>确实</strong> 包含了打印出调试信息的功能，不过我们必须为结构体显式选择这个功能。为此，在结构体定义之前加上外部属性 <code>#[derive(Debug)]</code>，如示例 5-12 所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 5-12：增加属性来派生 <code>Debug</code> trait，并使用调试格式打印 <code>Rectangle</code> 实例</span></p><p>现在我们再运行这个程序时，就不会有任何错误，并会出现如下输出：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好极了！这并不是最漂亮的输出，不过它显示这个实例的所有字段，毫无疑问这对调试有帮助。当我们有一个更大的结构体时，能有更易读一点的输出就好了，为此可以使用 <code>{:#?}</code> 替换 <code>println!</code> 字符串中的 <code>{:?}</code>。在这个例子中使用 <code>{:#?}</code> 风格将会输出如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另一种使用 <code>Debug</code> 格式打印数值的方法是使用 <a href="https://doc.rust-lang.org/std/macro.dbg.html" target="_blank" rel="noopener noreferrer"><code>dbg!</code> 宏</a>。<code>dbg!</code> 宏接收一个表达式的所有权（与 <code>println!</code> 宏相反，后者接收的是引用），打印出代码中调用 dbg! 宏时所在的文件和行号，以及该表达式的结果值，并返回该值的所有权。</p>',39)),i("blockquote",null,[i("p",null,[e[6]||(e[6]=s("注意：调用 ")),e[7]||(e[7]=i("code",null,"dbg!",-1)),e[8]||(e[8]=s(" 宏会打印到标准错误控制台流（")),e[9]||(e[9]=i("code",null,"stderr",-1)),e[10]||(e[10]=s("），与 ")),e[11]||(e[11]=i("code",null,"println!",-1)),e[12]||(e[12]=s(" 不同，后者会打印到标准输出控制台流（")),e[13]||(e[13]=i("code",null,"stdout",-1)),e[14]||(e[14]=s("）。我们将在")),a(d,{to:"/ch12-06-writing-to-stderr-instead-of-stdout.html"},{default:n(()=>e[5]||(e[5]=[s("第十二章 “将错误信息写入标准错误而不是标准输出” 一节")])),_:1,__:[5]}),e[15]||(e[15]=s("中更多地讨论 ")),e[16]||(e[16]=i("code",null,"stderr",-1)),e[17]||(e[17]=s(" 和 ")),e[18]||(e[18]=i("code",null,"stdout",-1)),e[19]||(e[19]=s("。"))])]),e[33]||(e[33]=t('<p>下面是一个例子，我们对分配给 <code>width</code> 字段的值以及 <code>rect1</code> 中整个结构的值感兴趣。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以把 <code>dbg!</code> 放在表达式 <code>30 * scale</code> 周围，因为 <code>dbg!</code> 返回表达式的值的所有权，所以 <code>width</code> 字段将获得相同的值，就像我们在那里没有 <code>dbg!</code> 调用一样。我们不希望 <code>dbg!</code> 拥有 <code>rect1</code> 的所有权，所以我们在下一次调用 <code>dbg!</code> 时传递一个引用。下面是这个例子的输出结果：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以看到第一点输出来自 <em>src/main.rs</em> 第 10 行，我们正在调试表达式 <code>30 * scale</code>，其结果值是 <code>60</code>（为整数实现的 <code>Debug</code> 格式化是只打印它们的值）。在 <em>src/main.rs</em> 第 14 行 的 <code>dbg!</code> 调用输出 <code>&amp;rect1</code> 的值，即 <code>Rectangle</code> 结构。这个输出使用了更为易读的 <code>Debug</code> 格式。当你试图弄清楚你的代码在做什么时，<code>dbg!</code> 宏可能真的很有帮助！</p>',5)),i("p",null,[e[21]||(e[21]=s("除了 ")),e[22]||(e[22]=i("code",null,"Debug",-1)),e[23]||(e[23]=s(" trait，Rust 还为我们提供了很多可以通过 ")),e[24]||(e[24]=i("code",null,"derive",-1)),e[25]||(e[25]=s(" 属性来使用的 trait，它们可以为我们的自定义类型增加实用的行为。")),a(d,{to:"/appendix-03-derivable-traits.html"},{default:n(()=>e[20]||(e[20]=[s("附录 C")])),_:1,__:[20]}),e[26]||(e[26]=s(" 中列出了这些 trait 和行为。第十章会介绍如何通过自定义行为来实现这些 trait，同时还有如何创建你自己的 trait。除了 ")),e[27]||(e[27]=i("code",null,"derive",-1)),e[28]||(e[28]=s(" 之外，还有很多属性；更多信息请参见 ")),e[29]||(e[29]=i("a",{href:"https://doc.rust-lang.org/stable/reference/attributes.html",target:"_blank",rel:"noopener noreferrer"},"Rust Reference",-1)),e[30]||(e[30]=s(" 的 Attributes 部分。"))]),e[34]||(e[34]=t("<p>我们的 <code>area</code> 函数是非常特殊的，它只计算长方形的面积。如果这个行为与 <code>Rectangle</code> 结构体再结合得更紧密一些就更好了，因为它不能用于其他类型。现在让我们看看如何继续重构这些代码，来将 <code>area</code> 函数协调进 <code>Rectangle</code> 类型定义的 <code>area</code> <strong>方法</strong> 中。</p>",1))])}const b=l(u,[["render",p]]),k=JSON.parse('{"path":"/ch05-02-example-structs.html","title":"ch05-02-example-structs","lang":"zh-CN","frontmatter":{"description":"结构体示例程序 ch05-02-example-structs.md commit 8612c4a5801b61f8d2e952f8bbbb444692ff1ec2 为了理解何时会需要使用结构体，让我们编写一个计算长方形面积的程序。我们会从单独的变量开始，接着重构程序直到使用结构体替代它们为止。 使用 Cargo 新建一个叫做 rectangles 的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch05-02-example-structs.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"结构体示例程序 ch05-02-example-structs.md commit 8612c4a5801b61f8d2e952f8bbbb444692ff1ec2 为了理解何时会需要使用结构体，让我们编写一个计算长方形面积的程序。我们会从单独的变量开始，接着重构程序直到使用结构体替代它们为止。 使用 Cargo 新建一个叫做 rectangles 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":8.56,"words":2568},"filePathRelative":"ch05-02-example-structs.md","excerpt":"<h2>结构体示例程序</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch05-02-example-structs.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch05-02-example-structs.md</a><br>\\n<br><br>\\ncommit 8612c4a5801b61f8d2e952f8bbbb444692ff1ec2</p>\\n</blockquote>\\n<p>为了理解何时会需要使用结构体，让我们编写一个计算长方形面积的程序。我们会从单独的变量开始，接着重构程序直到使用结构体替代它们为止。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch05-02-example-structs.md","value":{"title":"ch05-02-example-structs","path":"ch05-02-example-structs.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch05-02-example-structs.md"},{"source":"SUMMARY.md","target":"ch05-02-example-structs.md"}]}}}');export{b as comp,k as data};
