import{_ as i,e as s,j as o,o as n}from"./app-DVGyNizL.js";const a={};function t(c,e){return n(),s("div",null,e[0]||(e[0]=[o(`<h2 id="处理环境变量" tabindex="-1"><a class="header-anchor" href="#处理环境变量"><span>处理环境变量</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch12-05-working-with-environment-variables.md" target="_blank" rel="noopener noreferrer">ch12-05-working-with-environment-variables.md</a><br><br><br> commit 9c0fa2714859738ff73cbbb829592e4c037d7e46</p></blockquote><p>我们将增加一个额外的功能来改进 <code>minigrep</code>：用户可以通过设置环境变量来设置搜索是否是大小写敏感的。当然，我们也可以将其设计为一个命令行参数并要求用户每次需要时都加上它，不过在这里我们将使用环境变量。这允许用户设置环境变量一次之后在整个终端会话中所有的搜索都将是大小写不敏感的。</p><h3 id="编写一个大小写不敏感-search-函数的失败测试" tabindex="-1"><a class="header-anchor" href="#编写一个大小写不敏感-search-函数的失败测试"><span>编写一个大小写不敏感 <code>search</code> 函数的失败测试</span></a></h3><p>首先我们希望增加一个新函数 <code>search_case_insensitive</code>，并将会在环境变量有值时调用它。这里将继续遵循 TDD 过程，其第一步是再次编写一个失败测试。我们将为新的大小写不敏感搜索函数新增一个测试函数，并将老的测试函数从 <code>one_result</code> 改名为 <code>case_sensitive</code> 来更清楚的表明这两个测试的区别，如示例 12-20 所示：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-20/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-20：为准备添加的大小写不敏感函数新增失败测试</span></p><p>注意我们也改变了老测试中 <code>contents</code> 的值。还新增了一个含有文本 <code>&quot;Duct tape.&quot;</code> 的行，它有一个大写的 D，这在大小写敏感搜索时不应该匹配 &quot;duct&quot;。我们修改这个测试以确保不会意外破坏已经实现的大小写敏感搜索功能；这个测试现在应该能通过并在处理大小写不敏感搜索时应该能一直通过。</p><p>大小写 <strong>不敏感</strong> 搜索的新测试使用 <code>&quot;rUsT&quot;</code> 作为其查询字符串。在我们将要增加的 <code>search_case_insensitive</code> 函数中，<code>&quot;rUsT&quot;</code> 查询应该包含带有一个大写 R 的 <code>&quot;Rust:&quot;</code> 还有 <code>&quot;Trust me.&quot;</code> 这两行，即便它们与查询的大小写都不同。这个测试现在不能编译，因为还没有定义 <code>search_case_insensitive</code> 函数。请随意增加一个总是返回空 vector 的骨架实现，正如示例 12-16 中 <code>search</code> 函数为了使测试通过编译并失败时所做的那样。</p><h3 id="实现-search-case-insensitive-函数" tabindex="-1"><a class="header-anchor" href="#实现-search-case-insensitive-函数"><span>实现 <code>search_case_insensitive</code> 函数</span></a></h3><p><code>search_case_insensitive</code> 函数，如示例 12-21 所示，将与 <code>search</code> 函数基本相同。唯一的区别是它会将 <code>query</code> 变量和每一 <code>line</code> 都变为小写，这样不管输入参数是大写还是小写，在检查该行是否包含查询字符串时都会是小写。</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-21/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-21：定义 <code>search_case_insensitive</code> 函数，它在比较查询和每一行之前将它们都转换为小写</span></p><p>首先我们将 <code>query</code> 字符串转换为小写，并将其覆盖到同名的变量中。对查询字符串调用 <code>to_lowercase</code> 是必需的，这样不管用户的查询是 <code>&quot;rust&quot;</code>、<code>&quot;RUST&quot;</code>、<code>&quot;Rust&quot;</code> 或者 <code>&quot;rUsT&quot;</code>，我们都将其当作 <code>&quot;rust&quot;</code> 处理并对大小写不敏感。虽然 <code>to_lowercase</code> 可以处理基本的 Unicode，但它不是 100% 准确。如果编写真实的程序的话，我们还需多做一些工作，不过这一部分是关于环境变量而不是 Unicode 的，所以这样就够了。</p><p>注意 <code>query</code> 现在是一个 <code>String</code> 而不是字符串 slice，因为调用 <code>to_lowercase</code> 是在创建新数据，而不是引用现有数据。如果查询字符串是 <code>&quot;rUsT&quot;</code>，这个字符串 slice 并不包含可供我们使用的小写的 <code>u</code> 或 <code>t</code>，所以必需分配一个包含 <code>&quot;rust&quot;</code> 的新 <code>String</code>。现在当我们将 <code>query</code> 作为一个参数传递给 <code>contains</code> 方法时，需要增加一个 &amp; 因为 <code>contains</code> 的签名被定义为获取一个字符串 slice。</p><p>接下来我们对每一 <code>line</code> 都调用 <code>to_lowercase</code> 将其转为小写。现在我们将 <code>line</code> 和 <code>query</code> 都转换成了小写，这样就可以不管查询的大小写进行匹配了。</p><p>让我们看看这个实现能否通过测试：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-21/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好的！现在，让我们在 <code>run</code> 函数中实际调用新 <code>search_case_insensitive</code> 函数。首先，我们将在 <code>Config</code> 结构体中增加一个配置项来切换大小写敏感和大小写不敏感搜索。增加这些字段会导致编译错误，因为我们还没有在任何地方初始化这些字段：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里增加了 <code>ignore_case</code> 字符来存放一个布尔值。接着我们需要 <code>run</code> 函数检查 <code>case_sensitive</code> 字段的值并使用它来决定是否调用 <code>search</code> 函数或 <code>search_case_insensitive</code> 函数，如示例 12-22 所示。注意这还不能编译：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:there}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-22：根据 <code>config.ignore_case</code> 的值调用 <code>search</code> 或 <code>search_case_insensitive</code></span></p><p>最后需要实际检查环境变量。处理环境变量的函数位于标准库的 <code>env</code> 模块中，所以我们需要在 <em>src/lib.rs</em> 的开头将这个模块引入作用域中。接着使用 <code>env</code> 模块的 <code>var</code> 方法来检查一个叫做 <code>IGNORE_CASE</code> 的环境变量，如示例 12-23 所示：</p><p><span class="filename">文件名：src/lib.rs</span></p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-23/src/lib.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 12-23：检查叫做 <code>IGNORE_CASE</code> 的环境变量</span></p><p>这里创建了一个新变量 <code>ignore_case</code>。为了设置它的值，需要调用 <code>env::var</code> 函数并传递我们需要寻找的环境变量名称，<code>IGNORE_CASE</code>。<code>env::var</code> 返回一个 <code>Result</code>，它在环境变量被设置时返回包含其值的 <code>Ok</code> 成员，并在环境变量未被设置时返回 <code>Err</code> 成员。</p><p>我们使用 <code>Result</code> 的 <code>is_ok</code> 方法来检查环境变量是否被设置，这也就意味着我们 <strong>需要</strong> 进行一个大小写不敏感的搜索。如果<code>IGNORE_CASE</code> 环境变量没有被设置为任何值，<code>is_ok</code> 会返回 false 并将进行大小写敏感的搜索。我们并不关心环境变量所设置的 <strong>值</strong>，只关心它是否被设置了，所以检查 <code>is_ok</code> 而不是 <code>unwrap</code>、<code>expect</code> 或任何我们已经见过的 <code>Result</code> 的方法。</p><p>我们将变量 <code>ignore_case</code> 的值传递给 <code>Config</code> 实例，这样 <code>run</code> 函数可以读取其值并决定是否调用 <code>search</code> 或者示例 12-22 中实现的 <code>search_case_insensitive</code>。</p><p>让我们试一试吧！首先不设置环境变量并使用查询 <code>to</code> 运行程序，这应该会匹配任何全小写的单词 “to” 的行：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch12-an-io-project/listing-12-23/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>看起来程序仍然能够工作！现在将 <code>IGNORE_CASE</code> 设置为 <code>1</code> 并仍使用相同的查询 <code>to</code>。</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">IGNORE_CASE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poem.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你使用 PowerShell，则需要用两个命令来分别设置环境变量并运行程序：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PS&gt; $Env:IGNORE_CASE=1; cargo run to poem.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而这会让 <code>IGNORE_CASE</code> 的效果在当前 shell 会话中持续生效。可以通过 <code>Remove-Item</code> 命令来取消设置：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PS&gt; Remove-Item Env:IGNORE_CASE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这回应该得到包含可能有大写字母的 “to” 的行：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Are you nobody, too?</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">How dreary to be somebody!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">To tell your name the livelong day</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">To an admiring bog!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好极了，我们也得到了包含 “To” 的行！现在 <code>minigrep</code> 程序可以通过环境变量控制进行大小写不敏感搜索了。现在你知道了如何管理由命令行参数或环境变量设置的选项了！</p><p>一些程序允许对相同配置同时使用参数 <strong>和</strong> 环境变量。在这种情况下，程序来决定参数和环境变量的优先级。作为一个留给你的测试，尝试通过一个命令行参数或一个环境变量来控制大小写敏感搜索。并在运行程序时遇到矛盾值时决定命令行参数和环境变量的优先级。</p><p><code>std::env</code> 模块还包含了更多处理环境变量的实用功能；请查看官方文档来了解其可用的功能。</p>`,47)]))}const r=i(a,[["render",t],["__file","ch12-05-working-with-environment-variables.html.vue"]]),l=JSON.parse('{"path":"/ch12-05-working-with-environment-variables.html","title":"ch12-05-working-with-environment-variables","lang":"zh-CN","frontmatter":{"description":"处理环境变量 ch12-05-working-with-environment-variables.md commit 9c0fa2714859738ff73cbbb829592e4c037d7e46 我们将增加一个额外的功能来改进 minigrep：用户可以通过设置环境变量来设置搜索是否是大小写敏感的。当然，我们也可以将其设计为一个命令行参数并要求用...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch12-05-working-with-environment-variables.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"处理环境变量 ch12-05-working-with-environment-variables.md commit 9c0fa2714859738ff73cbbb829592e4c037d7e46 我们将增加一个额外的功能来改进 minigrep：用户可以通过设置环境变量来设置搜索是否是大小写敏感的。当然，我们也可以将其设计为一个命令行参数并要求用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.84,"words":2053},"filePathRelative":"ch12-05-working-with-environment-variables.md","excerpt":"<h2>处理环境变量</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch12-05-working-with-environment-variables.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch12-05-working-with-environment-variables.md</a><br>\\n<br><br>\\ncommit 9c0fa2714859738ff73cbbb829592e4c037d7e46</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch12-05-working-with-environment-variables.md","value":{"title":"ch12-05-working-with-environment-variables","path":"ch12-05-working-with-environment-variables.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch12-05-working-with-environment-variables.md"},{"source":"SUMMARY.md","target":"ch12-05-working-with-environment-variables.md"}]}}}');export{r as comp,l as data};
