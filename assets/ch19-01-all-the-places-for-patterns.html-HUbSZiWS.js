import{_ as l,e as c,j as a,f as s,i,g as d,h as n,r as o,o as r}from"./app-DVGyNizL.js";const p={};function h(g,e){const t=o("RouteLink");return r(),c("div",null,[e[14]||(e[14]=a(`<h2 id="所有可能会用到模式的位置" tabindex="-1"><a class="header-anchor" href="#所有可能会用到模式的位置"><span>所有可能会用到模式的位置</span></a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch19-01-all-the-places-for-patterns.md" target="_blank" rel="noopener noreferrer">ch19-01-all-the-places-for-patterns.md</a><br><br><br> commit 0c2d41e2afce734825c3a12087d423e8c2f0ae53</p></blockquote><p>模式出现在 Rust 的很多地方。你已经在不经意间使用了很多模式！本部分是一个所有有效模式位置的参考。</p><h3 id="match-分支" tabindex="-1"><a class="header-anchor" href="#match-分支"><span><code>match</code> 分支</span></a></h3><p>如第六章所讨论的，一个模式常用的位置是 <code>match</code> 表达式的分支。在形式上 <code>match</code> 表达式由 <code>match</code> 关键字、用于匹配的值和一个或多个分支构成，这些分支包含一个模式和在值匹配分支的模式时运行的表达式：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>match VALUE {</span></span>
<span class="line"><span>    PATTERN =&gt; EXPRESSION,</span></span>
<span class="line"><span>    PATTERN =&gt; EXPRESSION,</span></span>
<span class="line"><span>    PATTERN =&gt; EXPRESSION,</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如这是一个来自示例 6-5 中匹配变量 <code>x</code> 中 <code>Option&lt;i32&gt;</code> 值的 <code>match</code> 表达式：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" data-title="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>match x {</span></span>
<span class="line"><span>    None =&gt; None,</span></span>
<span class="line"><span>    Some(i) =&gt; Some(i + 1),</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>match</code> 表达式中的模式为每个箭头左边的 <code>None</code> 和 <code>Some(i)</code>。</p><p><code>match</code> 表达式必须是 <strong>穷尽</strong>（<em>exhaustive</em>）的，意为 <code>match</code> 表达式所有可能的值都必须被考虑到。一个确保覆盖每个可能值的方法是在最后一个分支使用捕获所有的模式：比如，一个匹配任何值的名称永远也不会失败，因此可以覆盖所有匹配剩下的情况。</p>`,10)),s("p",null,[e[1]||(e[1]=i("有一个特定的模式 ")),e[2]||(e[2]=s("code",null,"_",-1)),e[3]||(e[3]=i(" 可以匹配所有情况，不过它从不绑定任何变量。这在例如希望忽略任何未指定值的情况很有用。本章之后的 ")),d(t,{to:"/ch19-03-pattern-syntax.html#%E5%BF%BD%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%80%BC"},{default:n(()=>e[0]||(e[0]=[i("“忽略模式中的值”")])),_:1}),e[4]||(e[4]=i(" 部分会详细介绍 ")),e[5]||(e[5]=s("code",null,"_",-1)),e[6]||(e[6]=i(" 模式的更多细节。"))]),e[15]||(e[15]=a('<h3 id="if-let-条件表达式" tabindex="-1"><a class="header-anchor" href="#if-let-条件表达式"><span><code>if let</code> 条件表达式</span></a></h3><p>第六章讨论过了 <code>if let</code> 表达式，以及它是如何主要用于编写等同于只关心一个情况的 <code>match</code> 语句简写的。<code>if let</code> 可以对应一个可选的带有代码的 <code>else</code> 在 <code>if let</code> 中的模式不匹配时运行。</p><p>示例 19-1 展示了也可以组合并匹配 <code>if let</code>、<code>else if</code> 和 <code>else if let</code> 表达式。这相比 <code>match</code> 表达式一次只能将一个值与模式比较提供了更多灵活性。并且 Rust 并不要求一系列 <code>if let</code>、<code>else if</code>、<code>else if let</code> 分支的条件相互关联。</p><p>示例 19-1 中的代码展示了一系列针对不同条件的检查来决定背景颜色应该是什么。为了达到这个例子的目的，我们创建了硬编码值的变量，在真实程序中则可能由询问用户获得。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-01/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 19-1: 结合 <code>if let</code>、<code>else if</code>、<code>else if let</code> 以及 <code>else</code></span></p><p>如果用户指定了中意的颜色，将使用其作为背景颜色。如果没有指定中意的颜色且今天是星期二，背景颜色将是绿色。如果用户指定了他们的年龄字符串并能够成功将其解析为数字的话，我们将根据这个数字使用紫色或者橙色。最后，如果没有一个条件符合，背景颜色将是蓝色。</p><p>这个条件结构允许我们支持复杂的需求。使用这里硬编码的值，例子会打印出 <code>Using purple as the background color</code>。</p><p>注意 <code>if let</code> 也可以像 <code>match</code> 分支那样引入覆盖变量：<code>if let Ok(age) = age</code> 引入了一个新的覆盖变量 <code>age</code>，它包含 <code>Ok</code> 成员中的值。这意味着 <code>if age &gt; 30</code> 条件需要位于这个代码块内部；不能将两个条件组合为 <code>if let Ok(age) = age &amp;&amp; age &gt; 30</code>，因为我们希望与 30 进行比较的被覆盖的 <code>age</code> 直到大括号开始的新作用域才是有效的。</p><p><code>if let</code> 表达式的缺点在于其穷尽性没有为编译器所检查，而 <code>match</code> 表达式则检查了。如果去掉最后的 <code>else</code> 块而遗漏处理一些情况，编译器也不会警告这类可能的逻辑错误。</p><h3 id="while-let-条件循环" tabindex="-1"><a class="header-anchor" href="#while-let-条件循环"><span><code>while let</code> 条件循环</span></a></h3><p>一个与 <code>if let</code> 结构类似的是 <code>while let</code> 条件循环，它允许只要模式匹配就一直进行 <code>while</code> 循环。我们在第十七章第一次见到 <code>while let</code> 循环，当时我们使用它在流还在产生新值的时候保持循环。同理在示例 19-2 展示了一个 <code>while let</code> 循环等待跨线程发送的消息，不过在这个示例中它检查一个 <code>Result</code> 而不是 <code>Option</code>。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-02/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 19-2: 使用 <code>while let</code> 循环只要 <code>rx.recv()</code> 返回 <code>Ok</code> 就打印出其值</span></p><p>这个例子会打印出 1、2 和 3。当在第十六章遇到 <code>recv</code> 时，我们直接 unwrap 了错误，或者使用 <code>for</code> 循环将其视为迭代器处理。不过如示例 19-2 所示，我们也可以使用 <code>while let</code>，因为 <code>recv</code> 方法只要发送端持续产生消息它就一直返回 <code>Ok</code>，并在发送端断开连接后产生一个 <code>Err</code>。</p><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span><code>for</code> 循环</span></a></h3><p>在 <code>for</code> 循环中，模式是 <code>for</code> 关键字直接跟随的值，正如 <code>for x in y</code> 中的 <code>x</code>。示例 19-3 中展示了如何使用 <code>for</code> 循环来解构，或拆开一个元组作为 <code>for</code> 循环的一部分：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-03/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">列表 19-3: 在 <code>for</code> 循环中使用模式来解构元组</span></p><p>示例 19-3 的代码会打印出：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch19-patterns-and-matching/listing-19-03/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里使用 <code>enumerate</code> 方法适配一个迭代器来产生一个值和其在迭代器中的索引，它们位于一个元组中。第一个产生的值是元组 <code>(0, &#39;a&#39;)</code>。当这个值匹配模式 <code>(index, value)</code>，<code>index</code> 将会是 0 而 <code>value</code> 将会是 <code>&#39;a&#39;</code>，并打印出第一行输出。</p><h3 id="let-语句" tabindex="-1"><a class="header-anchor" href="#let-语句"><span><code>let</code> 语句</span></a></h3><p>在本章之前，我们只明确的讨论过通过 <code>match</code> 和 <code>if let</code> 使用模式，不过事实上也在别的地方使用过模式，包括 <code>let</code> 语句。例如，考虑一下这个直白的 <code>let</code> 变量赋值：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不过你可能没有发觉，每一次像这样使用 <code>let</code> 语句就是在使用模式！<code>let</code> 语句更为正式的样子如下：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let PATTERN = EXPRESSION;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>像 <code>let x = 5;</code> 这样的语句中变量名位于 <code>PATTERN</code> 位置，变量名不过是形式特别朴素的模式。我们将表达式与模式比较，并为任何找到的名称赋值。所以例如 <code>let x = 5;</code> 的情况，<code>x</code> 是一个代表 “将匹配到的值绑定到变量 x” 的模式。同时因为名称 <code>x</code> 是整个模式，这个模式实际上等于 “将任何值绑定到变量 <code>x</code>，不管值是什么”。</p><p>为了更清楚的理解 <code>let</code> 的模式匹配方面的内容，考虑示例 19-4 中使用 <code>let</code> 和模式解构一个元组：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-04/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 19-4: 使用模式解构元组并一次创建三个变量</span></p><p>这里将一个元组与模式匹配。Rust 会比较值 <code>(1, 2, 3)</code> 与模式 <code>(x, y, z)</code> 并发现此值匹配这个模式。在这个例子中，将会把 <code>1</code> 绑定到 <code>x</code>，<code>2</code> 绑定到 <code>y</code> 并将 <code>3</code> 绑定到 <code>z</code>。你可以将这个元组模式看作是将三个独立的变量模式结合在一起。</p><p>如果模式中元素的数量不匹配元组中元素的数量，则整个类型不匹配，并会得到一个编译时错误。例如，示例 19-5 展示了尝试用两个变量解构三个元素的元组，这是不行的：</p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-05/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 19-5: 一个错误的模式结构，其中变量的数量不符合元组中元素的数量</span></p><p>尝试编译这段代码会给出如下类型错误：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch19-patterns-and-matching/listing-19-05/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',38)),s("p",null,[e[8]||(e[8]=i("为了修复这个错误，可以使用 ")),e[9]||(e[9]=s("code",null,"_",-1)),e[10]||(e[10]=i(" 或 ")),e[11]||(e[11]=s("code",null,"..",-1)),e[12]||(e[12]=i(" 来忽略元组中一个或多个值，如 ")),d(t,{to:"/ch19-03-pattern-syntax.html#%E5%BF%BD%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%80%BC"},{default:n(()=>e[7]||(e[7]=[i("“忽略模式中的值”")])),_:1}),e[13]||(e[13]=i(" 部分所示。如果问题是模式中有太多的变量，则解决方法是通过去掉变量使得变量数与元组中元素数相等。"))]),e[16]||(e[16]=a('<h3 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数"><span>函数参数</span></a></h3><p>函数参数也可以是模式。列表 19-6 中的代码声明了一个叫做 <code>foo</code> 的函数，它获取一个 <code>i32</code> 类型的参数 <code>x</code>，现在这看起来应该很熟悉：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-06/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">列表 19-6: 在参数中使用模式的函数签名</span></p><p><code>x</code> 部分就是一个模式！类似于之前对 <code>let</code> 所做的，可以在函数参数中匹配元组。列表 19-7 将传递给函数的元组拆分为值：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-07/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">列表 19-7: 一个在参数中解构元组的函数</span></p><p>这会打印出 <code>Current location: (3, 5)</code>。值 <code>&amp;(3, 5)</code> 会匹配模式 <code>&amp;(x, y)</code>，如此 <code>x</code> 得到了值 <code>3</code>，而 <code>y</code>得到了值 <code>5</code>。</p><p>因为如第十三章所讲闭包类似于函数，也可以在闭包参数列表中使用模式。</p><p>现在我们见过了很多使用模式的方式了，不过模式在每个使用它的地方并不以相同的方式工作；在一些地方，模式必须是 <em>irrefutable</em> 的，意味着它们必须匹配所提供的任何值。在另一些情况，它们则可以是 refutable 的。接下来让我们讨论这两个概念。</p>',11))])}const k=l(p,[["render",h],["__file","ch19-01-all-the-places-for-patterns.html.vue"]]),m=JSON.parse('{"path":"/ch19-01-all-the-places-for-patterns.html","title":"ch19-01-all-the-places-for-patterns","lang":"zh-CN","frontmatter":{"description":"所有可能会用到模式的位置 ch19-01-all-the-places-for-patterns.md commit 0c2d41e2afce734825c3a12087d423e8c2f0ae53 模式出现在 Rust 的很多地方。你已经在不经意间使用了很多模式！本部分是一个所有有效模式位置的参考。 match 分支 如第六章所讨论的，一个模式常用的...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch19-01-all-the-places-for-patterns.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"所有可能会用到模式的位置 ch19-01-all-the-places-for-patterns.md commit 0c2d41e2afce734825c3a12087d423e8c2f0ae53 模式出现在 Rust 的很多地方。你已经在不经意间使用了很多模式！本部分是一个所有有效模式位置的参考。 match 分支 如第六章所讨论的，一个模式常用的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.1,"words":2429},"filePathRelative":"ch19-01-all-the-places-for-patterns.md","excerpt":"<h2>所有可能会用到模式的位置</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch19-01-all-the-places-for-patterns.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch19-01-all-the-places-for-patterns.md</a><br>\\n<br><br>\\ncommit 0c2d41e2afce734825c3a12087d423e8c2f0ae53</p>\\n</blockquote>\\n<p>模式出现在 Rust 的很多地方。你已经在不经意间使用了很多模式！本部分是一个所有有效模式位置的参考。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch19-01-all-the-places-for-patterns.md","value":{"title":"ch19-01-all-the-places-for-patterns","path":"ch19-01-all-the-places-for-patterns.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch19-01-all-the-places-for-patterns.md"}]}}}');export{k as comp,m as data};
