import{_ as r,e as t,j as a,o}from"./app-jlAZUEML.js";const c="/trpl-zh-cn/assets/trpl20-01-y76wKGry.png",n={};function l(i,e){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="最后的项目-构建多线程-web-server" tabindex="-1"><a class="header-anchor" href="#最后的项目-构建多线程-web-server"><span>最后的项目：构建多线程 web server</span></a></h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch21-00-final-project-a-web-server.md" target="_blank" rel="noopener noreferrer">ch21-00-final-project-a-web-server.md</a><br><br><br> commit 5df6909c57b3ba55f156a4122a42b805436de90c</p></blockquote><p>这是一次漫长的旅途，不过我们到达了本书的结束。在本章中，我们将一同构建另一个项目，来展示最后几章所学，同时复习更早的章节。</p><p>作为最后的项目，我们将要实现一个返回 “hello” 的 web server，它在浏览器中看起来就如图例 20-1 所示：</p><p><img src="'+c+'" alt="hello from rust" loading="lazy"></p><p><span class="caption">图例 20-1: 我们最后将一起分享的项目</span></p><p>如下是构建 web server 的计划：</p><ol><li>学习一些 TCP 与 HTTP 知识</li><li>在套接字（socket）上监听 TCP 请求</li><li>解析少量的 HTTP 请求</li><li>创建一个合适的 HTTP 响应</li><li>通过线程池改善 server 的吞吐量</li></ol><p>不过在开始之前，需要提到一点细节：这里使用的方法并不是使用 Rust 构建 web server 最好的方法。<a href="https://crates.io/" target="_blank" rel="noopener noreferrer">crates.io</a> 上有很多可用于生产环境的 crate，它们提供了比我们所要编写的更为完整的 web server 和线程池实现。然而，本章的目的在于学习，而不是走捷径。因为 Rust 是一个系统编程语言，我们能够选择处理什么层次的抽象，并能够选择比其他语言可能或可用的层次更低的层次。因此我们将自己编写一个基础的 HTTP server 和线程池，以便学习将来可能用到的 crate 背后的通用理念和技术。</p>',9)]))}const p=r(n,[["render",l],["__file","ch21-00-final-project-a-web-server.html.vue"]]),b=JSON.parse('{"path":"/ch21-00-final-project-a-web-server.html","title":"最后的项目：构建多线程 web server","lang":"zh-CN","frontmatter":{"description":"最后的项目：构建多线程 web server ch21-00-final-project-a-web-server.md commit 5df6909c57b3ba55f156a4122a42b805436de90c 这是一次漫长的旅途，不过我们到达了本书的结束。在本章中，我们将一同构建另一个项目，来展示最后几章所学，同时复习更早的章节。 作为最后的项...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch21-00-final-project-a-web-server.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"最后的项目：构建多线程 web server"}],["meta",{"property":"og:description","content":"最后的项目：构建多线程 web server ch21-00-final-project-a-web-server.md commit 5df6909c57b3ba55f156a4122a42b805436de90c 这是一次漫长的旅途，不过我们到达了本书的结束。在本章中，我们将一同构建另一个项目，来展示最后几章所学，同时复习更早的章节。 作为最后的项..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最后的项目：构建多线程 web server\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.34,"words":402},"filePathRelative":"ch21-00-final-project-a-web-server.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch21-00-final-project-a-web-server.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch21-00-final-project-a-web-server.md</a><br>\\n<br><br>\\ncommit 5df6909c57b3ba55f156a4122a42b805436de90c</p>\\n</blockquote>\\n<p>这是一次漫长的旅途，不过我们到达了本书的结束。在本章中，我们将一同构建另一个项目，来展示最后几章所学，同时复习更早的章节。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch21-00-final-project-a-web-server.md","value":{"title":"ch21-00-final-project-a-web-server","path":"ch21-00-final-project-a-web-server.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch21-00-final-project-a-web-server.md"}]}}}');export{p as comp,b as data};
