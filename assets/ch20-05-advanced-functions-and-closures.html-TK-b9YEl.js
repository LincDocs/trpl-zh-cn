import{_ as a,e as r,j as o,f as t,i,g as n,h as d,r as c,o as l}from"./app-ka1GL8-S.js";const u={};function p(h,e){const s=c("RouteLink");return l(),r("div",null,[e[17]||(e[17]=o('<h2 id="高级函数与闭包" tabindex="-1">高级函数与闭包</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch20-05-advanced-functions-and-closures.md" target="_blank" rel="noopener noreferrer">ch20-05-advanced-functions-and-closures.md</a><br><br><br> commit 21cf840842bdf768a798869f06373c96c1cc5122</p></blockquote><p>本部分将探索一些有关函数和闭包的高级功能，这包括函数指针以及返回值闭包。</p><h3 id="函数指针" tabindex="-1">函数指针</h3><p>我们讨论过了如何向函数传递闭包；也可以向函数传递常规函数！这个技术在我们希望传递已经定义的函数而不是重新定义闭包作为参数时很有用。函数满足类型 <code>fn</code>（小写的 f），不要与闭包 trait 的 <code>Fn</code> 相混淆。<code>fn</code> 被称为 <strong>函数指针</strong>（<em>function pointer</em>）。通过函数指针允许我们使用函数作为另一个函数的参数。</p><p>指定参数为函数指针的语法类似于闭包，如示例 19-27 所示，这里定义了一个 <code>add_one</code> 函数将其参数加一。<code>do_twice</code> 函数获取两个参数：一个指向任何获取一个 <code>i32</code> 参数并返回一个 <code>i32</code> 的函数指针，和一个 <code>i32</code> 值。<code>do_twice</code> 函数传递 <code>arg</code> 参数调用 <code>f</code> 函数两次，接着将两次函数调用的结果相加。<code>main</code> 函数使用 <code>add_one</code> 和 <code>5</code> 作为参数调用 <code>do_twice</code>。</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-27/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 19-27: 使用 <code>fn</code> 类型接受函数指针作为参数</span></p><p>这会打印出 <code>The answer is: 12</code>。<code>do_twice</code> 中的 <code>f</code> 被指定为一个接受一个 <code>i32</code> 参数并返回 <code>i32</code> 的 <code>fn</code>。接着就可以在 <code>do_twice</code> 函数体中调用 <code>f</code>。在 <code>main</code> 中，可以将函数名 <code>add_one</code> 作为第一个参数传递给 <code>do_twice</code>。</p><p>不同于闭包，<code>fn</code> 是一个类型而不是一个 trait，所以直接指定 <code>fn</code> 作为参数而不是声明一个带有 <code>Fn</code> 作为 trait bound 的泛型参数。</p><p>函数指针实现了所有三个闭包 trait（<code>Fn</code>、<code>FnMut</code> 和 <code>FnOnce</code>），所以总是可以在调用期望闭包的函数时传递函数指针作为参数。倾向于编写使用泛型和闭包 trait 的函数，这样它就能接受函数或闭包作为参数。</p><p>一个只期望接受 <code>fn</code> 而不接受闭包的情况的例子是与不存在闭包的外部代码交互时：C 语言的函数可以接受函数作为参数，但 C 语言没有闭包。</p><p>作为一个既可以使用内联定义的闭包又可以使用命名函数的例子，让我们看看一个 <code>map</code> 的应用。使用 <code>map</code> 函数将一个数字 vector 转换为一个字符串 vector，就可以使用闭包，比如这样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-15-map-closure/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者可以将函数作为 <code>map</code> 的参数来代替闭包，像是这样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-16-map-function/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',17)),t("p",null,[e[1]||(e[1]=i("注意这里必须使用 ")),n(s,{to:"/ch20-03-advanced-traits.html#%E9%AB%98%E7%BA%A7-trait"},{default:d(()=>e[0]||(e[0]=[i("“高级 trait”")])),_:1}),e[2]||(e[2]=i(" 部分讲到的完全限定语法，因为存在多个叫做 ")),e[3]||(e[3]=t("code",null,"to_string",-1)),e[4]||(e[4]=i(" 的函数；这里使用了定义于 ")),e[5]||(e[5]=t("code",null,"ToString",-1)),e[6]||(e[6]=i(" trait 的 ")),e[7]||(e[7]=t("code",null,"to_string",-1)),e[8]||(e[8]=i(" 函数，标准库为所有实现了 ")),e[9]||(e[9]=t("code",null,"Display",-1)),e[10]||(e[10]=i(" 的类型实现了这个 trait。"))]),t("p",null,[e[12]||(e[12]=i("回忆一下第六章 ")),n(s,{to:"/ch06-01-defining-an-enum.html#%E6%9E%9A%E4%B8%BE%E5%80%BC"},{default:d(()=>e[11]||(e[11]=[i("“枚举值”")])),_:1}),e[13]||(e[13]=i(" 部分中定义的每一个枚举成员也变成了一个构造函数。我们可以使用这些构造函数作为实现了闭包 trait 的函数指针，这意味着可以指定构造函数作为接受闭包的方法的参数，如下："))]),e[18]||(e[18]=o('<div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-17-map-initializer/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里创建了 <code>Status::Value</code> 实例，它通过 <code>map</code> 用范围的每一个 <code>u32</code> 值调用 <code>Status::Value</code> 的初始化函数。一些人倾向于函数风格，一些人喜欢闭包。这两种形式最终都会产生同样的代码，所以请使用对你来说更明白的形式吧。</p><h3 id="返回闭包" tabindex="-1">返回闭包</h3><p>闭包表现为 trait，这意味着不能直接返回闭包。对于大部分需要返回 trait 的情况，可以使用实现了期望返回的 trait 的具体类型来替代函数的返回值。但是这不能用于闭包，因为它们没有一个可返回的具体类型；例如不允许使用函数指针 <code>fn</code> 作为返回值类型。</p><p>这段代码尝试直接返回闭包，它并不能编译：</p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-18-returns-closure/src/lib.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译器给出的错误是：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch20-advanced-features/no-listing-18-returns-closure/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>错误又一次指向了 <code>Sized</code> trait！Rust 并不知道需要多少空间来储存闭包。不过我们在上一部分见过这种情况的解决办法：可以使用 trait 对象：</p><div class="language-rust,noplayground line-numbers-mode" data-highlighter="shiki" data-ext="rust,noplayground" data-title="rust,noplayground" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-19-returns-closure-trait-object/src/lib.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',10)),t("p",null,[e[15]||(e[15]=i("这段代码正好可以编译。关于 trait 对象的更多内容，请回顾第十八章的 ")),n(s,{to:"/ch18-02-trait-objects.html#%E9%A1%BE%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E5%80%BC%E7%9A%84-trait-%E5%AF%B9%E8%B1%A1"},{default:d(()=>e[14]||(e[14]=[i("顾及不同类型值的 trait 对象”")])),_:1}),e[16]||(e[16]=i(" 部分。"))]),e[19]||(e[19]=t("p",null,"接下来让我们学习宏！",-1))])}const g=a(u,[["render",p],["__file","ch20-05-advanced-functions-and-closures.html.vue"]]),k=JSON.parse('{"path":"/ch20-05-advanced-functions-and-closures.html","title":"ch20-05-advanced-functions-and-closures","lang":"zh-CN","frontmatter":{"description":"高级函数与闭包 ch20-05-advanced-functions-and-closures.md commit 21cf840842bdf768a798869f06373c96c1cc5122 本部分将探索一些有关函数和闭包的高级功能，这包括函数指针以及返回值闭包。 函数指针 我们讨论过了如何向函数传递闭包；也可以向函数传递常规函数！这个技术在我们...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch20-05-advanced-functions-and-closures.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"高级函数与闭包 ch20-05-advanced-functions-and-closures.md commit 21cf840842bdf768a798869f06373c96c1cc5122 本部分将探索一些有关函数和闭包的高级功能，这包括函数指针以及返回值闭包。 函数指针 我们讨论过了如何向函数传递闭包；也可以向函数传递常规函数！这个技术在我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.23,"words":1270},"filePathRelative":"ch20-05-advanced-functions-and-closures.md","excerpt":"<h2>高级函数与闭包</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch20-05-advanced-functions-and-closures.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch20-05-advanced-functions-and-closures.md</a><br>\\n<br><br>\\ncommit 21cf840842bdf768a798869f06373c96c1cc5122</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch20-05-advanced-functions-and-closures.md","value":{"title":"ch20-05-advanced-functions-and-closures","path":"ch20-05-advanced-functions-and-closures.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch20-05-advanced-functions-and-closures.md"}]}}}');export{g as comp,k as data};
