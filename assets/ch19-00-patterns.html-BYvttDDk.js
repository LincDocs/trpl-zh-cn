import{_ as e,c as a,e as o,o as r}from"./app-CXbgoZN5.js";const n={};function c(l,t){return r(),a("div",null,t[0]||(t[0]=[o('<h1 id="模式与模式匹配" tabindex="-1">模式与模式匹配</h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch19-00-patterns.md" target="_blank" rel="noopener noreferrer">ch19-00-patterns.md</a><br><br><br> commit 6fce661a0938aa0da06526e7b8f98fd7e67a222f</p></blockquote><p><strong>模式</strong>（<em>Patterns</em>）是 Rust 中特殊的语法，它用来匹配类型中的结构，无论类型是简单还是复杂。结合使用模式和 <code>match</code> 表达式以及其他结构可以提供更多对程序控制流的支配权。模式由如下一些内容组合而成：</p><ul><li>字面值</li><li>解构的数组、枚举、结构体或者元组</li><li>变量</li><li>通配符</li><li>占位符</li></ul><p>一些模式的例子包括<code>x</code>, <code>(a, 3)</code> 和 <code>Some(Color::Red)</code>。在模式为有效的上下文中，这些部分描述了数据的形状。接着可以用其匹配值来决定程序是否拥有正确的数据来运行特定部分的代码。</p><p>我们通过将一些值与模式相比较来使用它。如果模式匹配这些值，我们对值部分进行相应处理。回忆一下第六章讨论 <code>match</code> 表达式时像硬币分类器那样使用模式。如果数据符合这个形状，就可以使用这些命名的片段。如果不符合，与该模式相关的代码则不会运行。</p><p>本章是所有模式相关内容的参考。我们将涉及到使用模式的有效位置，<em>refutable</em> 与 <em>irrefutable</em> 模式的区别，和你可能会见到的不同类型的模式语法。在最后，你将会看到如何使用模式创建强大而简洁的代码。</p>',7)]))}const p=e(n,[["render",c]]),m=JSON.parse('{"path":"/ch19-00-patterns.html","title":"模式与模式匹配","lang":"zh-CN","frontmatter":{"description":"模式与模式匹配 ch19-00-patterns.md commit 6fce661a0938aa0da06526e7b8f98fd7e67a222f 模式（Patterns）是 Rust 中特殊的语法，它用来匹配类型中的结构，无论类型是简单还是复杂。结合使用模式和 match 表达式以及其他结构可以提供更多对程序控制流的支配权。模式由如下一些内容组合...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模式与模式匹配\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch19-00-patterns.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"模式与模式匹配"}],["meta",{"property":"og:description","content":"模式与模式匹配 ch19-00-patterns.md commit 6fce661a0938aa0da06526e7b8f98fd7e67a222f 模式（Patterns）是 Rust 中特殊的语法，它用来匹配类型中的结构，无论类型是简单还是复杂。结合使用模式和 match 表达式以及其他结构可以提供更多对程序控制流的支配权。模式由如下一些内容组合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"ch19-00-patterns.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch19-00-patterns.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch19-00-patterns.md</a><br>\\n<br><br>\\ncommit 6fce661a0938aa0da06526e7b8f98fd7e67a222f</p>\\n</blockquote>\\n<p><strong>模式</strong>（<em>Patterns</em>）是 Rust 中特殊的语法，它用来匹配类型中的结构，无论类型是简单还是复杂。结合使用模式和 <code>match</code> 表达式以及其他结构可以提供更多对程序控制流的支配权。模式由如下一些内容组合而成：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch19-00-patterns.md","value":{"title":"ch19-00-patterns","path":"ch19-00-patterns.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"ch19-00-patterns.md"}]}}}');export{p as comp,m as data};
