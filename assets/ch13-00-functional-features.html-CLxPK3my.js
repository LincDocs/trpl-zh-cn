import{_ as e,c as a,e as n,o}from"./app-DUZ3wyEq.js";const r={};function c(i,t){return o(),a("div",null,t[0]||(t[0]=[n('<h1 id="rust-中的函数式语言功能-迭代器与闭包" tabindex="-1">Rust 中的函数式语言功能：迭代器与闭包</h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch13-00-functional-features.md" target="_blank" rel="noopener noreferrer">ch13-00-functional-features.md</a><br><br><br> commit daa268a0cd04ef76a8067a26ed7d28ec2a9336d3</p></blockquote><p>Rust 的设计灵感来源于很多现存的语言和技术。其中一个显著的影响就是 <strong>函数式编程</strong>（<em>functional programming</em>）。函数式编程风格通常包含将函数作为参数值或其他函数的返回值、将函数赋值给变量以供之后执行等等。</p><p>本章我们不会讨论函数式编程是或不是什么的问题，而是展示 Rust 的一些在功能上与其他被认为是函数式语言类似的特性。</p><p>更具体的，我们将要涉及：</p><ul><li><strong>闭包</strong>（<em>Closures</em>），一个可以储存在变量里的类似函数的结构</li><li><strong>迭代器</strong>（<em>Iterators</em>），一种处理元素序列的方式</li><li>如何使用闭包和迭代器来改进第十二章的 I/O 项目。</li><li>闭包和迭代器的性能。（<strong>剧透警告：</strong> 它们的速度超乎你的想象！）</li></ul><p>我们已经介绍了其它受函数式风格影响的 Rust 功能，比如模式匹配和枚举，这些已经在其他章节中讲到过了。因为掌握闭包和迭代器是编写符合语言风格的高性能 Rust 代码的重要一环，所以我们将专门用一整章来讲解它们。</p>',7)]))}const u=e(r,[["render",c]]),s=JSON.parse('{"path":"/ch13-00-functional-features.html","title":"Rust 中的函数式语言功能：迭代器与闭包","lang":"zh-CN","frontmatter":{"description":"Rust 中的函数式语言功能：迭代器与闭包 ch13-00-functional-features.md commit daa268a0cd04ef76a8067a26ed7d28ec2a9336d3 Rust 的设计灵感来源于很多现存的语言和技术。其中一个显著的影响就是 函数式编程（functional programming）。函数式编程风格通常包...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 中的函数式语言功能：迭代器与闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch13-00-functional-features.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"Rust 中的函数式语言功能：迭代器与闭包"}],["meta",{"property":"og:description","content":"Rust 中的函数式语言功能：迭代器与闭包 ch13-00-functional-features.md commit daa268a0cd04ef76a8067a26ed7d28ec2a9336d3 Rust 的设计灵感来源于很多现存的语言和技术。其中一个显著的影响就是 函数式编程（functional programming）。函数式编程风格通常包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.14,"words":343},"filePathRelative":"ch13-00-functional-features.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch13-00-functional-features.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch13-00-functional-features.md</a><br>\\n<br><br>\\ncommit daa268a0cd04ef76a8067a26ed7d28ec2a9336d3</p>\\n</blockquote>\\n<p>Rust 的设计灵感来源于很多现存的语言和技术。其中一个显著的影响就是 <strong>函数式编程</strong>（<em>functional programming</em>）。函数式编程风格通常包含将函数作为参数值或其他函数的返回值、将函数赋值给变量以供之后执行等等。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch13-00-functional-features.md","value":{"title":"ch13-00-functional-features","path":"ch13-00-functional-features.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch13-00-functional-features.md"},{"source":"SUMMARY.md","target":"ch13-00-functional-features.md"}]}}}');export{u as comp,s as data};
