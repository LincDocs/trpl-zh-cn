import{_ as t,e,j as c,o as n}from"./app-DVGyNizL.js";const l={};function m(r,o){return n(),e("div",null,o[0]||(o[0]=[c('<h1 id="常见集合" tabindex="-1"><a class="header-anchor" href="#常见集合"><span>常见集合</span></a></h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch08-00-common-collections.md" target="_blank" rel="noopener noreferrer">ch08-00-common-collections.md</a><br><br><br> commit 1fd890031311612e54965f7f800a8c8bd4464663</p></blockquote><p>Rust 标准库中包含一系列被称为 <strong>集合</strong>（<em>collections</em>）的非常有用的数据结构。大部分其他数据类型都代表一个特定的值，不过集合可以包含多个值。不同于内建的数组和元组类型，这些集合指向的数据是储存在堆上的，这意味着数据的数量不必在编译时就已知，并且还可以随着程序的运行增长或缩小。每种集合都有着不同功能和成本，而根据当前情况选择合适的集合，这是一项应当逐渐掌握的技能。在这一章里，我们将详细的了解三个在 Rust 程序中被广泛使用的集合：</p><ul><li><em>vector</em> 允许我们一个挨着一个地储存一系列数量可变的值</li><li><strong>字符串</strong>（<em>string</em>）是字符的集合。我们之前见过 <code>String</code> 类型，不过在本章我们将深入了解。</li><li><strong>哈希 map</strong>（<em>hash map</em>）允许我们将值与一个特定的键（key）相关联。这是一个叫做 <em>map</em> 的更通用的数据结构的特定实现。</li></ul><p>对于标准库提供的其他类型的集合，请查看<a href="https://doc.rust-lang.org/std/collections/index.html" target="_blank" rel="noopener noreferrer">文档</a>。</p><p>我们将讨论如何创建和更新 vector、字符串和哈希 map，以及它们有什么特别之处。</p>',6)]))}const a=t(l,[["render",m],["__file","ch08-00-common-collections.html.vue"]]),s=JSON.parse('{"path":"/ch08-00-common-collections.html","title":"常见集合","lang":"zh-CN","frontmatter":{"description":"常见集合 ch08-00-common-collections.md commit 1fd890031311612e54965f7f800a8c8bd4464663 Rust 标准库中包含一系列被称为 集合（collections）的非常有用的数据结构。大部分其他数据类型都代表一个特定的值，不过集合可以包含多个值。不同于内建的数组和元组类型，这些集合指...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch08-00-common-collections.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"常见集合"}],["meta",{"property":"og:description","content":"常见集合 ch08-00-common-collections.md commit 1fd890031311612e54965f7f800a8c8bd4464663 Rust 标准库中包含一系列被称为 集合（collections）的非常有用的数据结构。大部分其他数据类型都代表一个特定的值，不过集合可以包含多个值。不同于内建的数组和元组类型，这些集合指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.19,"words":358},"filePathRelative":"ch08-00-common-collections.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch08-00-common-collections.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch08-00-common-collections.md</a><br>\\n<br><br>\\ncommit 1fd890031311612e54965f7f800a8c8bd4464663</p>\\n</blockquote>\\n<p>Rust 标准库中包含一系列被称为 <strong>集合</strong>（<em>collections</em>）的非常有用的数据结构。大部分其他数据类型都代表一个特定的值，不过集合可以包含多个值。不同于内建的数组和元组类型，这些集合指向的数据是储存在堆上的，这意味着数据的数量不必在编译时就已知，并且还可以随着程序的运行增长或缩小。每种集合都有着不同功能和成本，而根据当前情况选择合适的集合，这是一项应当逐渐掌握的技能。在这一章里，我们将详细的了解三个在 Rust 程序中被广泛使用的集合：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch08-00-common-collections.md","value":{"title":"ch08-00-common-collections","path":"ch08-00-common-collections.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch08-00-common-collections.md"},{"source":"SUMMARY.md","target":"ch08-00-common-collections.md"}]}}}');export{a as comp,s as data};
