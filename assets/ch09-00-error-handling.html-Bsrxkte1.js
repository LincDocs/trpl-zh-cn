import{_ as t,c as r,e as o,o as n}from"./app-tYpKMo5U.js";const a={};function c(l,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="错误处理" tabindex="-1">错误处理</h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch09-00-error-handling.md" target="_blank" rel="noopener noreferrer">ch09-00-error-handling.md</a><br><br><br> commit 199ca99926f232ee7f581a917eada4b65ff21754</p></blockquote><p>错误是软件中不可否认的事实，所以 Rust 有一些处理出错情况的特性。在许多情况下，Rust 要求你承认错误的可能性，并在你的代码编译前采取一些行动。这一要求使你的程序更加健壮，因为它可以确保你在将代码部署到生产环境之前就能发现错误并进行适当的处理。</p><p>Rust 将错误分为两大类：<strong>可恢复的</strong>（<em>recoverable</em>）和 <strong>不可恢复的</strong>（<em>unrecoverable</em>）错误。对于一个可恢复的错误，比如文件未找到的错误，我们很可能只想向用户报告问题并重试操作。不可恢复的错误总是 bug 出现的征兆，比如试图访问一个超过数组末端的位置，因此我们要立即停止程序。</p><p>大多数语言并不区分这两种错误，并采用类似异常这样方式统一处理它们。Rust 没有异常。相反，它有 <code>Result&lt;T, E&gt;</code> 类型，用于处理可恢复的错误，还有 <code>panic!</code> 宏，在程序遇到不可恢复的错误时停止执行。本章首先介绍 <code>panic!</code> 调用，接着会讲到如何返回 <code>Result&lt;T, E&gt;</code>。此外，我们将探讨在决定是尝试从错误中恢复还是停止执行时的注意事项。</p>',5)]))}const d=t(a,[["render",c]]),h=JSON.parse('{"path":"/ch09-00-error-handling.html","title":"错误处理","lang":"zh-CN","frontmatter":{"description":"错误处理 ch09-00-error-handling.md commit 199ca99926f232ee7f581a917eada4b65ff21754 错误是软件中不可否认的事实，所以 Rust 有一些处理出错情况的特性。在许多情况下，Rust 要求你承认错误的可能性，并在你的代码编译前采取一些行动。这一要求使你的程序更加健壮，因为它可以确保你在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"错误处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch09-00-error-handling.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"错误处理"}],["meta",{"property":"og:description","content":"错误处理 ch09-00-error-handling.md commit 199ca99926f232ee7f581a917eada4b65ff21754 错误是软件中不可否认的事实，所以 Rust 有一些处理出错情况的特性。在许多情况下，Rust 要求你承认错误的可能性，并在你的代码编译前采取一些行动。这一要求使你的程序更加健壮，因为它可以确保你在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"ch09-00-error-handling.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch09-00-error-handling.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch09-00-error-handling.md</a><br>\\n<br><br>\\ncommit 199ca99926f232ee7f581a917eada4b65ff21754</p>\\n</blockquote>\\n<p>错误是软件中不可否认的事实，所以 Rust 有一些处理出错情况的特性。在许多情况下，Rust 要求你承认错误的可能性，并在你的代码编译前采取一些行动。这一要求使你的程序更加健壮，因为它可以确保你在将代码部署到生产环境之前就能发现错误并进行适当的处理。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch09-00-error-handling.md","value":{"title":"ch09-00-error-handling","path":"ch09-00-error-handling.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch09-00-error-handling.md"},{"source":"SUMMARY.md","target":"ch09-00-error-handling.md"}]}}}');export{d as comp,h as data};
