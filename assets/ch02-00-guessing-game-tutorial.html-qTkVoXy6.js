import{_ as t,c as o,e as n,a as i,d as e,b as l,w as d,f as r,r as c,o as p}from"./app-tYpKMo5U.js";const g={};function h(u,s){const a=c("RouteLink");return p(),o("div",null,[s[75]||(s[75]=n(`<h1 id="写个猜数字游戏" tabindex="-1">写个猜数字游戏</h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch02-00-guessing-game-tutorial.md" target="_blank" rel="noopener noreferrer">ch02-00-guessing-game-tutorial.md</a><br><br><br> commit 11ca3d508b0a28b03f7d9f16c88726088fafd87e</p></blockquote><p>让我们一起动手完成一个项目来快速上手 Rust！本章将介绍一些 Rust 中常见的概念，并通过真实的程序来展示如何运用它们。你将会学到 <code>let</code>、<code>match</code>、方法（methods）、关联函数（associated functions）、外部 crate 等知识！后续章节会深入探讨这些概念的细节。在这一章，我们将主要练习基础内容。</p><p>我们会实现一个经典的新手编程问题：猜数字游戏。游戏的规则如下：程序将会生成一个 1 到 100 之间的随机整数。然后提示玩家输入一个猜测值。输入后，程序会指示该猜测是太低还是太高。如果猜对了，游戏会打印祝贺信息并退出。</p><h2 id="准备一个新项目" tabindex="-1">准备一个新项目</h2><p>要创建一个新项目，进入第一章中创建的 <em>projects</em> 目录，使用 Cargo 新建一个项目，如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo new guessing_game</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cd guessing_game</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个命令，<code>cargo new</code>，它获取项目的名称（<code>guessing_game</code>）作为第一个参数。第二个命令进入到新创建的项目目录。</p><p>看看生成的 <em>Cargo.toml</em> 文件：</p><p><span class="filename">文件名：Cargo.toml</span></p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>正如第一章那样，<code>cargo new</code> 生成了一个 “Hello, world!” 程序。查看 <em>src/main.rs</em> 文件：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在使用 <code>cargo run</code> 命令，一步完成 “Hello, world!” 程序的编译和运行：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当你需要在项目中快速迭代时，<code>run</code> 命令就能派上用场，正如我们在这个游戏项目中做的，在下一次迭代之前快速测试每一次迭代。</p><p>重新打开 <em>src/main.rs</em> 文件。我们将会在这个文件中编写全部的代码。</p><h2 id="处理一次猜测" tabindex="-1">处理一次猜测</h2><p>猜数字程序的第一部分请求和处理用户输入，并检查输入是否符合预期的格式。首先，我们会允许玩家输入一个猜测。在 <em>src/main.rs</em> 中输入示例 2-1 中的代码。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 2-1：获取用户猜测并打印的代码</figcaption></figure><p>这些代码包含很多信息，我们一行一行地过一遍。为了获取用户输入并打印结果作为输出，我们需要将 <code>io</code> 输入/输出库引入当前作用域。<code>io</code> 库来自于标准库，也被称为 <code>std</code>：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>默认情况下，Rust 设定了若干个会自动导入到每个程序作用域中的标准库内容，这组内容被称为 <em>预导入（prelude）</em> 内容。你可以在<a href="https://doc.rust-lang.org/std/prelude/index.html" target="_blank" rel="noopener noreferrer">标准库文档</a>中查看预导入的所有内容。</p><p>如果你需要的类型不在预导入内容中，就必须使用 <code>use</code> 语句显式地将其引入作用域。<code>std::io</code> 库提供很多有用的功能，包括接收用户输入的功能。</p><p>如第一章所提及，<code>main</code> 函数是程序的入口点：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>fn</code> 语法声明了一个新函数，小括号 <code>()</code> 表明没有参数，大括号 <code>{</code> 作为函数体的开始。</p><p>第一章也提及了 <code>println!</code> 是一个在屏幕上打印字符串的宏：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这些代码仅仅打印提示，介绍游戏的内容然后请求用户输入。</p><h3 id="使用变量储存值" tabindex="-1">使用变量储存值</h3><p>接下来，创建一个 <strong>变量</strong>（<em>variable</em>）来储存用户输入，像这样：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在程序开始变得有意思了！这一小行代码发生了很多事。我们使用 <code>let</code> 语句来创建变量。这里是另外一个例子：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>let apples = 5;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,36)),i("p",null,[s[1]||(s[1]=e("这行代码新建了一个叫做 ")),s[2]||(s[2]=i("code",null,"apples",-1)),s[3]||(s[3]=e(" 的变量并把它绑定到值 ")),s[4]||(s[4]=i("code",null,"5",-1)),s[5]||(s[5]=e(" 上。在 Rust 中，变量默认是不可变的，这意味着一旦我们给变量赋值，这个值就不再可以修改了。我们将会在第三章的 ")),l(a,{to:"/ch03-01-variables-and-mutability.html#%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%AF%E5%8F%98%E6%80%A7"},{default:d(()=>s[0]||(s[0]=[e("“变量与可变性”")])),_:1,__:[0]}),s[6]||(s[6]=e(" 部分详细讨论这个概念。下面的例子展示了如何在变量名前使用 ")),s[7]||(s[7]=i("code",null,"mut",-1)),s[8]||(s[8]=e(" 来使一个变量可变："))]),s[76]||(s[76]=n(`<div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>let apples = 5; // 不可变</span></span>
<span class="line"><span>let mut bananas = 5; // 可变</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("blockquote",null,[i("p",null,[s[10]||(s[10]=e("注意：")),s[11]||(s[11]=i("code",null,"//",-1)),s[12]||(s[12]=e(" 语法开始一个注释，持续到行尾。Rust 忽略注释中的所有内容，")),l(a,{to:"/ch03-04-comments.html"},{default:d(()=>s[9]||(s[9]=[e("第三章")])),_:1,__:[9]}),s[13]||(s[13]=e("将会详细介绍注释。"))])]),s[77]||(s[77]=n('<p>回到猜数字程序中。现在我们知道了 <code>let mut guess</code> 会引入一个叫做 <code>guess</code> 的可变变量。等号（<code>=</code>）告诉 Rust 我们现在想将某个值绑定在变量上。等号的右边是 <code>guess</code> 所绑定的值，它是 <code>String::new</code> 的结果，这个函数会返回一个 <code>String</code> 的新实例。<a href="https://doc.rust-lang.org/std/string/struct.String.html" target="_blank" rel="noopener noreferrer"><code>String</code></a><!-- ignore --> 是一个标准库提供的字符串类型，它是 UTF-8 编码的可增长文本块。</p><p><code>::new</code> 那一行的 <code>::</code> 语法表明 <code>new</code> 是 <code>String</code> 类型的一个 <strong>关联函数</strong>（<em>associated function</em>）。关联函数是针对某个类型实现的函数，在这个例子中是 <code>String</code>。这个 <code>new</code> 函数创建了一个新的空字符串。你会发现许多类型上都有一个 <code>new</code> 函数，因为这是为某种类型创建新值的常用函数名。</p><p>总的来说，<code>let mut guess = String::new();</code> 这一行创建了一个可变变量，当前它绑定到一个新的 <code>String</code> 空实例上。</p><h3 id="接收用户输入" tabindex="-1">接收用户输入</h3><p>回忆一下，我们在程序的第一行使用 <code>use std::io;</code> 从标准库中引入了输入/输出功能。现在调用 <code>io</code> 库中的函数 <code>stdin</code>，这允许我们处理用户输入：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果程序的开头没有使用 <code>use std::io;</code> 引入 <code>io</code> 库，我们仍可以通过把函数调用写成 <code>std::io::stdin</code> 来使用该函数。<code>stdin</code> 函数返回一个 <a href="https://doc.rust-lang.org/std/io/struct.Stdin.html" target="_blank" rel="noopener noreferrer"><code>std::io::Stdin</code></a><!-- ignore --> 的实例，这是一种代表终端标准输入句柄的类型。</p><p>接下来，代码中的 <code>.read_line(&amp;mut guess)</code> 调用了标准输入句柄上的 <a href="https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line" target="_blank" rel="noopener noreferrer"><code>read_line</code></a><!-- ignore --> 方法，以获取用户输入。我们还将 <code>&amp;mut guess</code> 作为参数传递给 <code>read_line</code> 函数，让其将用户输入储存到这个字符串中。<code>read_line</code> 的工作是，无论用户在标准输入中键入什么内容，都将其追加（不会覆盖其原有内容）到一个字符串中，因此它需要字符串作为参数。这个字符串参数应该是可变的，以便 <code>read_line</code> 将用户输入附加上去。</p><p><code>&amp;</code> 表示这个参数是一个 <strong>引用</strong>（<em>reference</em>），它允许多处代码访问同一处数据，而无需在内存中多次拷贝。引用是一个复杂的特性，Rust 的一个主要优势就是安全而简单的操纵引用。完成当前程序并不需要了解如此多细节。现在，我们只需知道它像变量一样，默认是不可变的。因此，需要写成 <code>&amp;mut guess</code> 来使其可变，而不是 <code>&amp;guess</code>。（第四章会更全面的解释引用。）</p><h3 id="使用-result-类型来处理潜在的错误" tabindex="-1">使用 <code>Result</code> 类型来处理潜在的错误</h3><p>我们还没有完全分析完这行代码。虽然我们已经讲到了第三行代码，但要注意：它仍是逻辑行（虽然换行了但仍是语句）的一部分。后一部分是这个方法（method）：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们也可以将代码这样写：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>io::stdin().read_line(&amp;mut guess).expect(&quot;Failed to read line&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不过，过长的代码行难以阅读，所以最好拆开来写。通常来说，当使用 <code>.method_name()</code> 语法调用方法时引入换行符和空格将长的代码行拆开是明智的。现在来看看这行代码干了什么。</p>',15)),i("p",null,[s[15]||(s[15]=e("之前提到了 ")),s[16]||(s[16]=i("code",null,"read_line",-1)),s[17]||(s[17]=e(" 会将用户输入附加到传递给它的字符串中，不过它也会返回一个类型为 ")),s[18]||(s[18]=i("code",null,"Result",-1)),s[19]||(s[19]=e(" 的值。")),s[20]||(s[20]=i("br",null,null,-1)),s[21]||(s[21]=i("a",{href:"https://doc.rust-lang.org/std/result/enum.Result.html",target:"_blank",rel:"noopener noreferrer"},[i("code",null,"Result")],-1)),r(" ignore "),s[22]||(s[22]=e(" 是一种")),l(a,{to:"/ch06-00-enums.html"},{default:d(()=>s[14]||(s[14]=[i("em",null,"枚举类型",-1)])),_:1,__:[14]}),r(" ignore "),s[23]||(s[23]=e("，通常也写作 ")),s[24]||(s[24]=i("em",null,"enum",-1)),s[25]||(s[25]=e("。枚举类型变量的值可以是多种可能状态中的一个。我们把每种可能的状态称为一种 ")),s[26]||(s[26]=i("em",null,"枚举成员（variant）",-1)),s[27]||(s[27]=e("。"))]),i("p",null,[l(a,{to:"/ch06-00-enums.html"},{default:d(()=>s[28]||(s[28]=[e("第六章")])),_:1,__:[28]}),s[29]||(s[29]=e("将介绍枚举的更多细节。这里的 ")),s[30]||(s[30]=i("code",null,"Result",-1)),s[31]||(s[31]=e(" 类型将用来编码错误处理的信息。"))]),s[78]||(s[78]=n('<p><code>Result</code> 的成员是 <code>Ok</code> 和 <code>Err</code>，<code>Ok</code> 成员表示操作成功，内部包含成功时产生的值。<code>Err</code> 成员则意味着操作失败，并且 <code>Err</code> 中包含有关操作失败的原因或方式的信息。</p><p>这些 <code>Result</code> 类型的作用是编码错误处理信息。<code>Result</code> 类型的值，像其他类型一样，拥有定义于其实例上的方法。<code>Result</code> 的实例拥有 <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.expect" target="_blank" rel="noopener noreferrer"><code>expect</code> 方法</a><!-- ignore -->。如果 <code>io::Result</code> 实例的值是 <code>Err</code>，<code>expect</code> 会导致程序崩溃，并输出当做参数传递给 <code>expect</code> 的信息。所以当 <code>read_line</code> 方法返回 <code>Err</code>，则可能是来源于底层操作系统错误的结果。如果 <code>Result</code> 实例的值是 <code>Ok</code>，<code>expect</code> 会获取 <code>Ok</code> 中的值并原样返回。在本例中，这个值是用户输入到标准输入中的字节数。</p><p>如果不调用 <code>expect</code>，程序也能编译，不过会出现一个警告：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust 警告我们没有使用 <code>read_line</code> 的返回值 <code>Result</code>，说明有一个可能的错误没有处理。</p>',5)),i("p",null,[s[33]||(s[33]=e("消除警告的正确做法是实际去编写错误处理代码，不过由于我们就是希望程序在出现问题时立即崩溃，所以直接使用 ")),s[34]||(s[34]=i("code",null,"expect",-1)),s[35]||(s[35]=e("。")),l(a,{to:"/ch09-02-recoverable-errors-with-result.html"},{default:d(()=>s[32]||(s[32]=[e("第九章")])),_:1,__:[32]}),s[36]||(s[36]=e(" 会学习如何从错误中恢复。"))]),s[79]||(s[79]=n(`<h3 id="使用-println-占位符打印值" tabindex="-1">使用 <code>println!</code> 占位符打印值</h3><p>除了位于结尾的右花括号，目前为止就只有这一行代码值得讨论一下了，就是这一行：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码现在打印了存储用户输入的字符串。<code>{}</code> 这对大括号是一个占位符：把 <code>{}</code> 想象成小蟹钳，可以夹住合适的值。当打印变量的值时，变量名可以写进大括号中。当打印表达式的执行结果时，格式化字符串（format string）中大括号中留空，格式化字符串后跟逗号分隔的需要打印的表达式列表，其顺序与每一个空大括号占位符的顺序一致。在一个 <code>println!</code> 调用中打印变量和表达式的值看起来像这样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;x = {x} and y + 2 = {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行代码会打印出 <code>x = 5 and y + 2 = 12</code>。</p><h3 id="测试第一部分代码" tabindex="-1">测试第一部分代码</h3><p>让我们来测试下猜数字游戏的第一部分。使用 <code>cargo run</code> 运行：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 6.44s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">6</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此为止，游戏的第一部分已经完成：我们从键盘获取输入并打印了出来。</p><h2 id="生成一个秘密数字" tabindex="-1">生成一个秘密数字</h2><p>接下来，需要生成一个秘密数字，好让用户来猜。秘密数字应该每次都不同，这样重复玩才不会乏味；范围应该在 1 到 100 之间，这样才不会太困难。Rust 标准库中尚未包含随机数功能。然而，Rust 团队还是提供了一个包含上述功能的 <a href="https://crates.io/crates/rand" target="_blank" rel="noopener noreferrer"><code>rand</code> crate</a>。</p><h3 id="使用-crate-来增加更多功能" tabindex="-1">使用 crate 来增加更多功能</h3><p>记住，crate 是一组 Rust 源代码文件。我们正在构建的项目是一个 <em>二进制 crate</em>，它生成一个可执行文件。 <code>rand</code> crate 是一个 <em>库 crate</em>，库 crate 可以包含任意能被其他程序使用的代码，但是无法独立执行。</p><p>Cargo 对外部 crate 的运用是其真正的亮点所在。在我们使用 <code>rand</code> 编写代码之前，需要修改 <em>Cargo.toml</em> 文件，引入一个 <code>rand</code> 依赖。现在打开这个文件并将下面这一行添加到 <code>[dependencies]</code> 片段标题之下。在当前版本下，请确保按照我们这里的方式指定 <code>rand</code>，否则本教程中的示例代码可能无法工作。</p><p><span class="filename">文件名：Cargo.toml</span></p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 <em>Cargo.toml</em> 文件中，标题以及之后的内容属同一个片段，直到遇到下一个标题才开始新的片段。<code>[dependencies]</code> 片段告诉 Cargo 本项目依赖了哪些外部 crate 及其版本。本例中，我们使用语义化版本 <code>0.8.5</code> 来指定 <code>rand</code> crate。Cargo 理解 <a href="http://semver.org" target="_blank" rel="noopener noreferrer">语义化版本（Semantic Versioning）</a><!-- ignore -->（有时也称为 <em>SemVer</em>），这是一种定义版本号的标准。<code>0.8.5</code> 事实上是 <code>^0.8.5</code> 的简写，它表示任何至少是 <code>0.8.5</code> 但小于 <code>0.9.0</code> 的版本。</p><p>Cargo 认为这些版本与 <code>0.8.5</code> 版本的公有 API 相兼容，这样的版本指定确保了我们可以获取能使本章代码编译的最新的补丁（patch）版本。任何大于等于 <code>0.9.0</code> 的版本不能保证和接下来的示例采用了相同的 API。</p><p>现在，不修改任何代码，构建项目，如示例 2-2 所示。</p><figure class="listing"><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Updating crates.io index</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded rand v0.8.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded libc v0.2.127</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded getrandom v0.2.7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded cfg-if v1.0.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded ppv-lite86 v0.2.16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded rand_chacha v0.3.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Downloaded rand_core v0.6.3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling libc v0.2.127</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling getrandom v0.2.7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling cfg-if v1.0.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling ppv-lite86 v0.2.16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling rand_core v0.6.3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling rand_chacha v0.3.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling rand v0.8.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 2.53s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figcaption>示例 2-2：将 rand crate 添加为依赖之后运行 \`cargo build\` 的输出</figcaption></figure><p>可能会出现不同的版本号（多亏了语义化版本，它们与代码是兼容的！），并且显示的行数可能会有所不同（取决于操作系统），行的顺序也可能会不同。</p><p>现在我们有了一个外部依赖，Cargo 从 <em>registry</em> 上获取所有包的最新版本信息，这是一份来自 <a href="https://crates.io/" target="_blank" rel="noopener noreferrer">Crates.io</a> 的数据副本。<a href="http://Crates.io" target="_blank" rel="noopener noreferrer">Crates.io</a> 是 Rust 生态系统中，人们发布其开源 Rust 项目的平台，供他人使用。</p><p>在更新完 <em>registry</em> 后，Cargo 检查 <code>[dependencies]</code> 片段并下载列表中包含但还未下载的 crates。本例中，虽然只声明了 <code>rand</code> 一个依赖，然而 Cargo 还是额外获取了 <code>rand</code> 所需要的其他 crates，因为 <code>rand</code> 依赖它们来正常工作。下载完成后，Rust 编译依赖，然后使用这些依赖编译项目。</p><p>如果不做任何修改，立刻再次运行 <code>cargo build</code>，则不会看到任何除了 <code>Finished</code> 行之外的输出。Cargo 知道它已经下载并编译了依赖，同时 <em>Cargo.toml</em> 文件也没有变动。Cargo 还知道代码也没有任何修改，所以它不会重新编译代码。因为无事可做，它会简单地退出。</p><p>如果打开 <em>src/main.rs</em> 文件，做一些无关紧要的修改，保存并再次构建，则会出现两行输出：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一行表示 Cargo 只针对 <em>src/main.rs</em> 文件的微小修改而更新构建。依赖没有变化，所以 Cargo 知道它可以复用已经为此下载并编译的代码。它只是重新构建了部分（项目）代码。</p><h4 id="cargo-lock-文件确保构建是可重现的" tabindex="-1"><em>Cargo.lock</em> 文件确保构建是可重现的</h4><p>Cargo 有一个机制，确保无论是你还是其他人在任何时候重新构建代码，都会生成相同的构建产物：Cargo 只会使用你指定的依赖版本，除非你明确指定其他版本。例如，如果下周 <code>rand</code> crate 的 <code>0.8.6</code> 版本出来了，该版本包含了一个重要的 bug 修复，但同时也引入了一个会破坏你代码的回归问题。为了解决这个问题，Rust 在你第一次运行 <code>cargo build</code> 时创建了 <em>Cargo.lock</em> 文件，我们现在可以在 <em>guessing_game</em> 目录找到它。</p><p>当第一次构建项目时，Cargo 计算出所有符合要求的依赖版本并写入 <em>Cargo.lock</em> 文件。当将来构建项目时，Cargo 会发现 <em>Cargo.lock</em> 已存在并使用其中指定的版本，而不是再次计算所有的版本。这使得你拥有了一个自动化的可重现的构建。换句话说，项目会持续使用 <code>0.8.5</code> 直到你显式升级，多亏有了 <em>Cargo.lock</em> 文件。由于 <em>Cargo.lock</em> 文件对于“可重复构建”非常重要，因此它通常会和项目中的其余代码一样纳入到版本控制系统中。</p><h4 id="更新-crate-到一个新版本" tabindex="-1">更新 crate 到一个新版本</h4><p>当你 <strong>确实</strong> 需要升级 crate 时，Cargo 提供了这样一个命令，<code>update</code>，它会忽略 <em>Cargo.lock</em> 文件，并计算出所有符合 <em>Cargo.toml</em> 声明的最新版本。Cargo 接下来会把这些版本写入 <em>Cargo.lock</em> 文件。不过，Cargo 默认只会寻找大于 <code>0.8.5</code> 而小于 <code>0.9.0</code> 的版本。如果 <code>rand</code> crate 发布了两个新版本，<code>0.8.6</code> 和 <code>0.9.0</code>，在运行 <code>cargo update</code> 时会出现如下内容：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo update</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Updating crates.io index</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Updating rand v0.8.5 -&gt; v0.8.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cargo 忽略了 <code>0.9.0</code> 版本。这时，你也会注意到的 <em>Cargo.lock</em> 文件中的变化无外乎现在使用的 <code>rand</code> crate 版本是<code>0.8.6</code> 。如果想要使用 <code>0.9.0</code> 版本的 <code>rand</code> 或是任何 <code>0.9.x</code> 系列的版本，必须像这样更新 <em>Cargo.toml</em> 文件：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.9.0&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下一次运行 <code>cargo build</code> 时，Cargo 会更新可用 crate 的 registry，并根据你指定的新版本重新评估 <code>rand</code> 的要求。</p><p>第十四章会讲到 <a href="http://doc.crates.io" target="_blank" rel="noopener noreferrer">Cargo</a><!-- ignore --> 及其<a href="http://doc.crates.io/crates-io.html" target="_blank" rel="noopener noreferrer">生态系统</a><!-- ignore --> 的更多内容，不过目前你只需要了解这么多。通过 Cargo 复用库文件非常容易，因此 Rustacean 能够编写出由很多包组装而成的更轻巧的项目。</p><h3 id="生成一个随机数" tabindex="-1">生成一个随机数</h3><p>让我们开始使用 <code>rand</code> 来生成一个猜数字随机数。下一步是更新 <em>src/main.rs</em>，如示例 2-3 所示。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 2-3：添加生成随机数的代码</figcaption></figure><p>首先，我们新增了一行 <code>use rand::Rng;</code>。<code>Rng</code> 是一个 trait，它定义了随机数生成器应实现的方法，想使用这些方法的话，此 trait 必须在作用域中。第十章会详细介绍 trait。</p><p>接下来，我们在中间还新增加了两行。第一行调用了 <code>rand::thread_rng</code> 函数提供实际使用的随机数生成器：它位于当前执行线程的本地环境中，并从操作系统获取 seed。接着调用随机数生成器的 <code>gen_range</code> 方法。这个方法由 <code>use rand::Rng</code> 语句引入到作用域的 <code>Rng</code> trait 定义。<code>gen_range</code> 方法获取一个范围表达式（range expression）作为参数，并生成一个在此范围之间的随机数。这里使用的这类范围表达式使用了 <code>start..=end</code> 这样的形式，也就是说包含了上下端点，所以需要指定 <code>1..=100</code> 来请求一个 1 和 100 之间的数。</p><blockquote><p>注意：你不可能凭空就知道应该 use 哪个 trait 以及该从 crate 中调用哪个方法，因此每个 crate 有使用说明文档。Cargo 有一个很棒的功能是：运行 <code>cargo doc --open</code> 命令来构建所有本地依赖提供的文档，并在浏览器中打开。例如，假设你对 <code>rand</code> crate 中的其他功能感兴趣，你可以运行 <code>cargo doc --open</code> 并点击左侧导航栏中的 <code>rand</code>。</p></blockquote><p>新增加的第二行代码打印出了秘密数字。这在开发程序时很有用，因为可以测试它，不过在最终版本中会删掉它。如果游戏一开始就打印出结果就没什么可玩的了！</p><p>尝试运行程序几次：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 2.53s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The secret number is: 7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 0.02s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The secret number is: 83</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该能得到不同的随机数，同时它们应该都是在 1 和 100 之间的。干得漂亮！</p><h2 id="比较猜测的数字和秘密数字" tabindex="-1">比较猜测的数字和秘密数字</h2><p>现在有了用户输入和一个随机数，我们可以比较它们。这个步骤如示例 2-4 所示。注意这段代码还不能通过编译，我们稍后会解释。</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore,does_not_compile"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 2-4：处理比较两个数字可能的返回值</figcaption></figure><p>首先我们增加了另一个 <code>use</code> 声明，从标准库引入了一个叫做 <code>std::cmp::Ordering</code> 的类型到作用域中。 <code>Ordering</code> 也是一个枚举，不过它的成员是 <code>Less</code>、<code>Greater</code> 和 <code>Equal</code>。这是比较两个值时可能出现的三种结果。</p>`,52)),i("p",null,[s[38]||(s[38]=e("接着，底部的五行新代码使用了 ")),s[39]||(s[39]=i("code",null,"Ordering",-1)),s[40]||(s[40]=e(" 类型，")),s[41]||(s[41]=i("code",null,"cmp",-1)),s[42]||(s[42]=e(" 方法用来比较两个值并可以在任何可比较的值上调用。它获取一个被比较值的引用：这里是把 ")),s[43]||(s[43]=i("code",null,"guess",-1)),s[44]||(s[44]=e(" 与 ")),s[45]||(s[45]=i("code",null,"secret_number",-1)),s[46]||(s[46]=e(" 做比较。然后它会返回一个刚才通过 ")),s[47]||(s[47]=i("code",null,"use",-1)),s[48]||(s[48]=e(" 引入作用域的 ")),s[49]||(s[49]=i("code",null,"Ordering",-1)),s[50]||(s[50]=e(" 枚举的成员。使用一个 ")),l(a,{to:"/ch06-02-match.html"},{default:d(()=>s[37]||(s[37]=[i("code",null,"match",-1)])),_:1,__:[37]}),r(" ignore "),s[51]||(s[51]=e(" 表达式，根据对 ")),s[52]||(s[52]=i("code",null,"guess",-1)),s[53]||(s[53]=e(" 和 ")),s[54]||(s[54]=i("code",null,"secret_number",-1)),s[55]||(s[55]=e(" 调用 ")),s[56]||(s[56]=i("code",null,"cmp",-1)),s[57]||(s[57]=e(" 返回的 ")),s[58]||(s[58]=i("code",null,"Ordering",-1)),s[59]||(s[59]=e(" 成员来决定接下来做什么。"))]),s[80]||(s[80]=n('<p>一个 <code>match</code> 表达式由 <strong>分支（arms）</strong> 构成。一个分支包含一个 <strong>模式</strong>（<em>pattern</em>）和表达式开头的值与分支模式相匹配时应该执行的代码。Rust 获取提供给 <code>match</code> 的值并挨个检查每个分支的模式。<code>match</code> 结构和模式是 Rust 中强大的功能，它体现了代码可能遇到的多种情形，并帮助你确保没有遗漏处理。这些功能将分别在第六章和第十九章详细介绍。</p><p>让我们看看使用 <code>match</code> 表达式的例子。假设用户猜了 50，这时随机生成的秘密数字是 38。</p><p>比较 50 与 38 时，因为 50 比 38 要大，<code>cmp</code> 方法会返回 <code>Ordering::Greater</code>。<code>Ordering::Greater</code> 是 <code>match</code> 表达式得到的值。它检查第一个分支的模式，<code>Ordering::Less</code> 与 <code>Ordering::Greater</code>并不匹配，所以它忽略了这个分支的代码并来到下一个分支。下一个分支的模式是 <code>Ordering::Greater</code>，<strong>正确</strong> 匹配！这个分支关联的代码被执行，在屏幕打印出 <code>Too big!</code>。<code>match</code> 表达式会在第一次成功匹配后终止，因为该场景下没有检查最后一个分支的必要。</p><p>然而，示例 2-4 的代码目前并不能编译，可以尝试一下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>错误的核心表明这里有 <strong>不匹配的类型</strong>（<em>mismatched types</em>）。Rust 有一个静态强类型系统，同时也有类型推断。当我们写出 <code>let guess = String::new()</code> 时，Rust 推断出 <code>guess</code> 应该是 <code>String</code> 类型，并不需要我们写出类型。另一方面，<code>secret_number</code>，是数字类型。几个数字类型拥有 1 到 100 之间的值：32 位数字 <code>i32</code>；32 位无符号数字 <code>u32</code>；64 位数字 <code>i64</code> 等等。Rust 默认使用 <code>i32</code>，所以它是 <code>secret_number</code> 的类型，除非增加类型信息，或任何能让 Rust 推断出不同数值类型的信息。这里错误的原因在于 Rust 不会比较字符串类型和数字类型。</p><p>所以我们必须把从输入中读取到的 <code>String</code> 转换为一个真正的数字类型，才好与秘密数字进行比较。这可以通过在 <code>main</code> 函数体中增加如下代码来实现：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行新代码是：</p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>let guess: u32 = guess.trim().parse().expect(&quot;Please type a number!&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',11)),i("p",null,[s[61]||(s[61]=n("这里创建了一个叫做 <code>guess</code> 的变量。不过等等，不是已经有了一个叫做 <code>guess</code> 的变量了吗？确实如此，不过 Rust 允许用一个新值来 <strong>隐藏</strong> （<em>Shadowing</em>） <code>guess</code> 之前的值。这个功能常用在需要转换值类型之类的场景。它允许我们复用 <code>guess</code> 变量的名字，而不是被迫创建两个不同变量，诸如 <code>guess_str</code> 和 <code>guess</code> 之类。",17)),l(a,{to:"/ch03-01-variables-and-mutability.html#%E9%9A%90%E8%97%8F"},{default:d(()=>s[60]||(s[60]=[e("第三章")])),_:1,__:[60]}),s[62]||(s[62]=e("会介绍 shadowing 的更多细节，现在只需知道这个功能经常用于将一个类型的值转换为另一个类型的值。"))]),s[81]||(s[81]=n('<p>我们将这个新变量绑定到 <code>guess.trim().parse()</code> 表达式上。表达式中的 <code>guess</code> 指的是包含输入的字符串类型 <code>guess</code> 变量。<code>String</code> 实例的 <code>trim</code> 方法会去除字符串开头和结尾的空白字符，我们必须执行此方法才能将字符串与 <code>u32</code> 比较，因为 <code>u32</code> 只能包含数值型数据。用户必须输入 <span class="keystroke">enter</span> 键才能让 <code>read_line</code> 返回并输入他们的猜想，这将会在字符串中增加一个换行（newline）符。例如，用户输入 <span class="keystroke">5</span> 并按下 <span class="keystroke">enter</span>（在 Windows 上，按下 <span class="keystroke">enter</span> 键会得到一个回车符和一个换行符，<code>\\r\\n</code>），<code>guess</code> 看起来像这样：<code>5\\n</code> 或者 <code>5\\r\\n</code>。<code>\\n</code> 代表 “换行”，回车键；<code>\\r</code> 代表 “回车”，回车键。<code>trim</code> 方法会消除 <code>\\n</code> 或者 <code>\\r\\n</code>，只留下 <code>5</code>。</p>',1)),i("p",null,[s[64]||(s[64]=i("a",{href:"https://doc.rust-lang.org/std/primitive.str.html#method.parse",target:"_blank",rel:"noopener noreferrer"},[e("字符串的 "),i("code",null,"parse"),e(" 方法")],-1)),r(" ignore "),s[65]||(s[65]=e(" 将字符串转换成其他类型。这里用它来把字符串转换为数值。我们需要告诉 Rust 具体的数字类型，这里通过 ")),s[66]||(s[66]=i("code",null,"let guess: u32",-1)),s[67]||(s[67]=e(" 指定。")),s[68]||(s[68]=i("code",null,"guess",-1)),s[69]||(s[69]=e(" 后面的冒号（")),s[70]||(s[70]=i("code",null,":",-1)),s[71]||(s[71]=e("）告诉 Rust 我们指定了变量的类型。Rust 有一些内建的数字类型；")),s[72]||(s[72]=i("code",null,"u32",-1)),s[73]||(s[73]=e(" 是一个无符号的 32 位整型。对于不大的正整数来说，它是不错的默认类型，")),l(a,{to:"/ch03-02-data-types.html#%E6%95%B4%E5%9E%8B"},{default:d(()=>s[63]||(s[63]=[e("第三章")])),_:1,__:[63]}),s[74]||(s[74]=e("还会讲到其他数字类型。"))]),s[82]||(s[82]=n(`<p>另外，程序中的 <code>u32</code> 注解以及与 <code>secret_number</code> 的比较，意味着 Rust 会推断出 <code>secret_number</code> 也是 <code>u32</code> 类型。现在可以使用相同类型比较两个值了！</p><p><code>parse</code> 方法只有在字符逻辑上可以转换为数字的时候才能工作所以非常容易出错。例如，字符串中包含 <code>A👍%</code>，就无法将其转换为一个数字。因此，<code>parse</code> 方法返回一个 <code>Result</code> 类型。像之前 <a href="#%E4%BD%BF%E7%94%A8-result-%E7%B1%BB%E5%9E%8B%E6%9D%A5%E5%A4%84%E7%90%86%E6%BD%9C%E5%9C%A8%E7%9A%84%E9%94%99%E8%AF%AF">“使用 <code>Result</code> 类型来处理潜在的错误”</a> 讨论的 <code>read_line</code> 方法那样，再次按部就班的用 <code>expect</code> 方法处理即可。如果 <code>parse</code> 不能从字符串生成一个数字，返回一个 <code>Result</code> 的 <code>Err</code> 成员时，<code>expect</code> 会使游戏崩溃并打印附带的信息。如果 <code>parse</code> 成功地将字符串转换为一个数字，它会返回 <code>Result</code> 的 <code>Ok</code> 成员，然后 <code>expect</code> 会返回 <code>Ok</code> 值中的数字。</p><p>现在让我们运行程序！</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 0.43s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The secret number is: 58</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  76</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 76</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Too big!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>漂亮！即便是在猜测之前添加了空格，程序依然能判断出用户猜测了 76。多运行程序几次，输入不同的数字来检验不同的行为：猜一个正确的数字，猜一个过大的数字和猜一个过小的数字。</p><p>现在游戏已经大体上能玩了，不过用户只能猜一次。增加一个循环来改变它吧！</p><h2 id="使用循环来允许多次猜测" tabindex="-1">使用循环来允许多次猜测</h2><p><code>loop</code> 关键字创建了一个无限循环。我们会增加循环来给用户更多机会猜数字：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如上所示，我们将提示用户猜测之后的所有内容移动到了循环中。确保 loop 循环中的代码多缩进四个空格，再次运行程序。注意这里有一个新问题，因为程序忠实地执行了我们的要求：永远地请求另一个猜测，用户好像无法退出啊！</p><p>用户总能使用 <span class="keystroke">ctrl-c</span> 终止程序。不过还有另一个方法跳出无限循环，就是 <a href="#%E6%AF%94%E8%BE%83%E7%8C%9C%E6%B5%8B%E7%9A%84%E6%95%B0%E5%AD%97%E5%92%8C%E7%A7%98%E5%AF%86%E6%95%B0%E5%AD%97">“比较猜测与秘密数字”</a> 部分提到的 <code>parse</code>：如果用户输入的答案不是一个数字，程序会崩溃。我们可以利用这一点来退出，如下所示：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 1.50s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The secret number is: 59</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">45</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 45</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Too small!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">60</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 60</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Too big!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">59</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 59</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You win!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">quit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">thread &#39;main&#39; panicked at &#39;Please type a number!: ParseIntError { kind: InvalidDigit }&#39;, src/main.rs:28:47</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">note: run with \`RUST_BACKTRACE=1\` environment variable to display a backtrace</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入 <code>quit</code> 将会退出程序，同时你会注意到其他任何非数字输入也一样。然而，这并不理想，我们想要当猜测正确的数字时游戏停止。</p><h3 id="猜测正确后退出" tabindex="-1">猜测正确后退出</h3><p>让我们增加一个 <code>break</code> 语句，在用户猜对时退出游戏：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过在 <code>You win!</code> 之后增加一行 <code>break</code>，用户猜对了神秘数字后会退出循环。退出循环也意味着退出程序，因为循环是 <code>main</code> 的最后一部分。</p><h3 id="处理无效输入" tabindex="-1">处理无效输入</h3><p>为了进一步改善游戏性，不要在用户输入非数字时崩溃，需要忽略非数字，让用户可以继续猜测。可以通过修改 <code>guess</code> 将 <code>String</code> 转化为 <code>u32</code> 那部分代码来实现，如示例 2-5 所示：</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 2-5：忽略非数字的猜测并重新请求数字而不是让程序崩溃</figcaption></figure><p>我们将 <code>expect</code> 调用换成 <code>match</code> 语句，以从遇到错误就崩溃转换为处理错误。须知 <code>parse</code> 返回一个 <code>Result</code> 类型，而 <code>Result</code> 是一个拥有 <code>Ok</code> 或 <code>Err</code> 成员的枚举。这里使用的 <code>match</code> 表达式，和之前处理 <code>cmp</code> 方法返回 <code>Ordering</code> 时用的一样。</p><p>如果 <code>parse</code> 能够成功的将字符串转换为一个数字，它会返回一个包含结果数字的 <code>Ok</code>。这个 <code>Ok</code> 值与 <code>match</code> 第一个分支的模式相匹配，该分支对应的动作返回 <code>Ok</code> 值中的数字 <code>num</code>，最后如愿变成新创建的 <code>guess</code> 变量。</p><p>如果 <code>parse</code> <strong>不</strong>能将字符串转换为一个数字，它会返回一个包含更多错误信息的 <code>Err</code>。<code>Err</code> 值不能匹配第一个 <code>match</code> 分支的 <code>Ok(num)</code> 模式，但是会匹配第二个分支的 <code>Err(_)</code> 模式：<code>_</code> 是一个通配符值，本例中用来匹配所有 <code>Err</code> 值，不管其中有何种信息。所以程序会执行第二个分支的动作，<code>continue</code> 意味着进入 <code>loop</code> 的下一次循环，请求另一个猜测。这样程序就有效的忽略了 <code>parse</code> 可能遇到的所有错误！</p><p>现在程序中的一切都应该如预期般工作了。让我们试试吧：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-console"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cargo run</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Finished dev [unoptimized + debuginfo] target(s) in 4.45s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     Running \`target/debug/guessing_game\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Guess the number!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The secret number is: 61</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Too small!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">99</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 99</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Too big!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Please input your guess.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">61</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You guessed: 61</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">You win!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太棒了！再有最后一个小的修改，就能完成猜数字游戏了：还记得程序依然会打印出秘密数字。在测试时还好，但正式发布时会毁了游戏。删掉打印秘密数字的 <code>println!</code>。示例 2-6 为最终代码：</p><figure class="listing"><p><span class="file-name">文件名：src/main.rs</span></p><div class="language-rust,ignore line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-rust,ignore"><span class="line"><span>{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figcaption>示例 2-6：猜数字游戏的完整代码</figcaption></figure><p>此时此刻，你顺利完成了猜数字游戏。恭喜！</p><h2 id="总结" tabindex="-1">总结</h2><p>本项目通过动手实践，向你介绍了 Rust 新概念：<code>let</code>、<code>match</code>、函数、使用外部 crate 等等，接下来的几章，你会继续深入学习这些概念。第三章介绍大部分编程语言都有的概念，比如变量、数据类型和函数，以及如何在 Rust 中使用它们。第四章探索所有权（ownership），这是一个 Rust 同其他语言大不相同的功能。第五章讨论结构体和方法的语法，而第六章侧重解释枚举。</p>`,32))])}const m=t(g,[["render",h]]),b=JSON.parse('{"path":"/ch02-00-guessing-game-tutorial.html","title":"写个猜数字游戏","lang":"zh-CN","frontmatter":{"description":"写个猜数字游戏 ch02-00-guessing-game-tutorial.md commit 11ca3d508b0a28b03f7d9f16c88726088fafd87e 让我们一起动手完成一个项目来快速上手 Rust！本章将介绍一些 Rust 中常见的概念，并通过真实的程序来展示如何运用它们。你将会学到 let、match、方法（method...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"写个猜数字游戏\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch02-00-guessing-game-tutorial.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"写个猜数字游戏"}],["meta",{"property":"og:description","content":"写个猜数字游戏 ch02-00-guessing-game-tutorial.md commit 11ca3d508b0a28b03f7d9f16c88726088fafd87e 让我们一起动手完成一个项目来快速上手 Rust！本章将介绍一些 Rust 中常见的概念，并通过真实的程序来展示如何运用它们。你将会学到 let、match、方法（method..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":27.54,"words":8262},"filePathRelative":"ch02-00-guessing-game-tutorial.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch02-00-guessing-game-tutorial.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch02-00-guessing-game-tutorial.md</a><br>\\n<br><br>\\ncommit 11ca3d508b0a28b03f7d9f16c88726088fafd87e</p>\\n</blockquote>\\n<p>让我们一起动手完成一个项目来快速上手 Rust！本章将介绍一些 Rust 中常见的概念，并通过真实的程序来展示如何运用它们。你将会学到 <code>let</code>、<code>match</code>、方法（methods）、关联函数（associated functions）、外部 crate 等知识！后续章节会深入探讨这些概念的细节。在这一章，我们将主要练习基础内容。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch02-00-guessing-game-tutorial.md","value":{"title":"ch02-00-guessing-game-tutorial","path":"ch02-00-guessing-game-tutorial.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch02-00-guessing-game-tutorial.md"},{"source":"SUMMARY.md","target":"ch02-00-guessing-game-tutorial.md"}]}}}');export{m as comp,b as data};
