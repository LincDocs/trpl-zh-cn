import{_ as e,e as r,j as a,o as n}from"./app-jlAZUEML.js";const s="/trpl-zh-cn/assets/does_not_compile-Ba_8QD6y.svg",o="/trpl-zh-cn/assets/panics-SLNGz620.svg",c="/trpl-zh-cn/assets/not_desired_behavior-GSbcVCHl.svg",i={};function p(h,t){return n(),r("div",null,t[0]||(t[0]=[a('<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch00-00-introduction.md" target="_blank" rel="noopener noreferrer">ch00-00-introduction.md</a><br><br><br> commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f</p></blockquote><blockquote><p>注意：此书的英文原版与 <a href="https://nostarch.com/" target="_blank" rel="noopener noreferrer">No Starch Press</a> 出版的《<a href="https://nostarch.com/rust-programming-language-2nd-edition" target="_blank" rel="noopener noreferrer">The Rust Programming Language</a>》纸质版和电子版一致。</p></blockquote><p>欢迎阅读《Rust 程序设计语言》，这是一本关于 Rust 的入门书籍。Rust 程序设计语言能帮助你编写更快、更可靠的软件。在编程语言设计中，高层的工程学与底层的控制往往是难以兼得的；而 Rust 则试图挑战这一矛盾。通过平衡强大的技术能力与优秀的开发者体验，Rust 为你提供了控制底层细节（如内存使用）的选项，而无需承受通常与此类控制相关的所有繁琐细节。</p><h2 id="rust-适合哪些人" tabindex="-1"><a class="header-anchor" href="#rust-适合哪些人"><span>Rust 适合哪些人</span></a></h2><p>Rust 因多种原因适合许多人。让我们看看几个最重要的群体。</p><h3 id="开发者团队" tabindex="-1"><a class="header-anchor" href="#开发者团队"><span>开发者团队</span></a></h3><p>Rust 已证明是一个对于具有不同系统编程知识水平的大型开发团队协作而言，非常高效的工具。底层代码容易出现各种微妙的错误，在大多数其他语言中，这些错误只能通过广泛的测试和经验丰富的开发者的仔细审核代码来捕捉。在 Rust 中，编译器充当了守门员的角色，拒绝编译包含这些难以察觉的错误的代码，包括并发错误。通过与编译器合作，团队可以将时间集中在程序逻辑上，而不是追踪 bug。</p><p>Rust 也为系统编程世界带来了现代化的开发工具：</p><ul><li>Cargo 是内置的依赖管理器和构建工具，它能轻松增加、编译和管理依赖，并使依赖在 Rust 生态系统中保持一致。</li><li>Rustfmt 格式化工具确保开发者遵循一致的代码风格。</li><li>rust-analyzer 为集成开发环境（IDE）提供了强大的代码补全和内联错误信息功能。</li></ul><p>通过使用 Rust 生态系统中丰富的工具，开发者在编写系统级代码时可以更加高效。</p><h3 id="学生" tabindex="-1"><a class="header-anchor" href="#学生"><span>学生</span></a></h3><p>Rust 适合学生群体，也适合有兴趣学习系统概念的人。许多人通过 Rust 学习了操作系统开发等主题。社区对学生问题非常欢迎并乐于回答。通过类似这本书以及其他内容的努力，Rust 团队希望使系统概念能为更多人所易于理解，特别是编程新手。</p><h3 id="公司" tabindex="-1"><a class="header-anchor" href="#公司"><span>公司</span></a></h3><p>数百家大小规模的公司在生产环境中使用 Rust 完成各种任务，包括命令行工具、Web 服务、DevOps 工具、嵌入式设备、音视频分析与转码、加密货币、生物信息学、搜索引擎、物联网（IOT）程序、机器学习，甚至是 Firefox 浏览器的重要部分。</p><h3 id="开源开发者" tabindex="-1"><a class="header-anchor" href="#开源开发者"><span>开源开发者</span></a></h3><p>Rust 适合那些希望构建 Rust 编程语言、社区、开发工具和库的开发者。我们非常欢迎你为 Rust 语言作出贡献。</p><h3 id="重视速度和稳定性的开发者" tabindex="-1"><a class="header-anchor" href="#重视速度和稳定性的开发者"><span>重视速度和稳定性的开发者</span></a></h3><p>Rust 适合那些渴望在编程语言中寻求速度与稳定性的开发者。对于速度来说，既是指 Rust 可以运行的多快，也是指编写 Rust 程序的速度。Rust 编译器的检查确保了增加功能和重构代码时的稳定性，这与那些缺乏这些检查的语言中脆弱的祖传代码形成了鲜明对比，开发者往往不敢去修改这些代码。通过追求零成本抽象（zero-cost abstractions）—— 将高级语言特性编译成底层代码，并且与手写的代码运行速度同样快。Rust 努力确保代码又安全又快速。</p><p>这里提到的只是几个较大的受益群体，Rust 语言也希望能支持更多其他用户。总的来说，Rust 最重要的目标是消除数十年来程序员习以为常的取舍，让安全和高效、速度和易读易用<strong>可以兼得</strong>。试试看 Rust，说不定它的选择就适合你。</p><h2 id="本书适合哪些人" tabindex="-1"><a class="header-anchor" href="#本书适合哪些人"><span>本书适合哪些人</span></a></h2><p>本书假设你已经有其他编程语言的经验，任何语言均可，我们尽可能让各种语言背景的人都能读懂。本书的重点不是程序设计<strong>本身</strong>，也不是程序设计思维。如果你完全没学过编程，建议你先阅读专门介绍程序设计的书籍。</p><h2 id="如何阅读本书" tabindex="-1"><a class="header-anchor" href="#如何阅读本书"><span>如何阅读本书</span></a></h2><p>本书大体上假设您按从头到尾的顺序阅读。后面的章节建立在前面章节概念的基础上。前面的章节可能不会深入介绍部分主题，而是留待后续章节重新讨论。</p><p>本书分为两类章节：概念章节和项目章节。在概念章节中，我们学习 Rust 的某个方面。在项目章节中，我们应用目前所学的知识一同构建小型程序。第二、十二和二十一章是项目章节；其余都是概念章节。</p><p>第一章介绍如何安装 Rust，如何编写一个 “Hello, world!” 程序，以及如何使用 Rust 的包管理器和构建工具 Cargo。第二章是一个编写 Rust 语言的实战介绍，我们会构建一个猜数字游戏。我们会站在较高的层次介绍一些概念，而后续章节将提供更多细节。如果你希望立刻就动手实践一下，第二章是开始的好地方。第三章介绍 Rust 中类似其他编程语言的特性，第四章会学习 Rust 的所有权系统。如果你是一个特别细致的学习者，喜欢在进入下一环节之前学习每一个细节，你可能会想要跳过第二章，直接阅读第三章，等到你想要通过项目应用所学到的细节时再回到第二章。</p><p>第五章讨论结构体（struct）和方法，第六章介绍枚举（enum）、<code>match</code> 表达式和 <code>if let</code> 控制流结构。在 Rust 中，创建自定义类型需要用到结构体和枚举。</p><p>第七章介绍 Rust 的模块（module）系统，其中的私有性规则用来组织代码和公开的 API（应用程序接口）。第八章讨论标准库提供的常见集合数据结构，例如 Vector（向量）、字符串和 Hash Map（散列表）。第九章探索 Rust 的错误处理的理念与技术。</p><p>第十章深入介绍泛型（generic）、Trait 和生命周期（lifetime），这些功能让你能够定义适用于多种类型的代码。第十一章全面讲述了测试，因为就算 Rust 有安全保证，也需要测试确保程序逻辑正确。第十二章中将会构建我们自己的 <code>grep</code> 命令行工具的功能子集实现，用于在文件中搜索文本。为此会用到之前章节讨论的很多概念。</p><p>第十三章探索闭包（closure）和迭代器（iterator），这两个 Rust 特性来自函数式编程语言。第十四章会深入探讨 Cargo 并介绍分享代码库的最佳实践。第十五章讨论标准库提供的智能指针以及相关的 Trait。</p><p>第十六章将引导我们了解不同的并发编程模型，并探讨 Rust 如何帮助你无畏地进行多线程编程。第十七章将在此基础上进一步探索 Rust 的 async 和 await 语法，以及它们所支持的轻量级并发模型。</p><p>第十八章着眼于 Rust 风格与你可能比较熟悉的 OOP（面向对象编程）原则之间的比较。</p><p>第十九章介绍模式和模式匹配，它是在 Rust 程序中表达思想的有效方式。第二十章是一个高级主题大杂烩，包括不安全 Rust（unsafe Rust）、宏（macro）和更多关于生命周期、Trait、类型、函数和闭包的内容。</p><p>第二十一章我们将会完成一个项目，实现一个底层的、多线程的 Web 服务器！</p><p>最后的附录包含了一些关于该语言的实用信息，其格式更像是参考资料。附录 A 涵盖了 Rust 的关键字，附录 B 涵盖了 Rust 的运算符和符号，附录 C 涵盖了标准库提供的可派生 Trait，附录 D 涵盖了一些有用的开发工具，而附录 E 解释了 Rust 版本。在附录 F 中，你可以找到本书的翻译版本，而在附录 G 中，我们将讨论 Rust 是如何制作的以及什么是 nightly Rust。</p><p>阅读本书没有错误的方式：如果你想跳过前面的内容，尽管跳过！如果你遇到任何困惑，可能需要回到前面的章节。请采取对你最有效的方式。</p><p><span id="ferris"></span></p><p>学习 Rust 的一个重要部分是学会如何阅读编译器显示的错误信息：它们会指引你编写出能运行的代码。为此，我们将提供许多不能编译的示例，以及在每种情况下编译器将显示的错误信息。请知悉，如果你输入并运行一个随机示例，它可能无法编译！确保你阅读了示例周围的文本，以判断你尝试运行的示例是否出错。Ferris 也将帮助你区分那些不是意在工作的代码：</p><table><thead><tr><th>Ferris</th><th>含义</th></tr></thead><tbody><tr><td><img src="'+s+'" class="ferris-explain" alt="Ferris 头上有问号"></td><td>这段代码无法通过编译！</td></tr><tr><td><img src="'+o+'" class="ferris-explain" alt="Ferris 举起两只钳子"></td><td>这段代码会 Panic！</td></tr><tr><td><img src="'+c+'" class="ferris-explain" alt="Ferris 举起一只钳子并耸肩"></td><td>这段代码的运行结果不符合预期。</td></tr></tbody></table><p>在大部分情况，我们会指导你将无法通过编译的代码修改为正确版本。</p><h2 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h2><p>生成本书的源码可以在 <a href="https://github.com/rust-lang/book/tree/main/src" target="_blank" rel="noopener noreferrer">GitHub</a> 上找到。</p><blockquote><p>译者注：此译本也有 <a href="https://github.com/KaiserY/trpl-zh-cn" target="_blank" rel="noopener noreferrer">GitHub 仓库</a>，欢迎提交 Issue 和 PR 😃</p></blockquote>',43)]))}const l=e(i,[["render",p],["__file","ch00-00-introduction.html.vue"]]),d=JSON.parse('{"path":"/ch00-00-introduction.html","title":"简介","lang":"zh-CN","frontmatter":{"description":"简介 ch00-00-introduction.md commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f 注意：此书的英文原版与 No Starch Press 出版的《The Rust Programming Language》纸质版和电子版一致。 欢迎阅读《Rust 程序设计语言》，这是一本关于 Rust...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch00-00-introduction.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"简介 ch00-00-introduction.md commit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f 注意：此书的英文原版与 No Starch Press 出版的《The Rust Programming Language》纸质版和电子版一致。 欢迎阅读《Rust 程序设计语言》，这是一本关于 Rust..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/trpl-zh-cn/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.59,"words":2577},"filePathRelative":"ch00-00-introduction.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch00-00-introduction.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch00-00-introduction.md</a><br>\\n<br><br>\\ncommit 1fb74c3f1d8aeba39373e9f4cdb9a4bdca95604f</p>\\n</blockquote>\\n<blockquote>\\n<p>注意：此书的英文原版与 <a href=\\"https://nostarch.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">No Starch Press</a> 出版的《<a href=\\"https://nostarch.com/rust-programming-language-2nd-edition\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">The Rust Programming Language</a>》纸质版和电子版一致。</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch00-00-introduction.md","value":{"title":"ch00-00-introduction","path":"ch00-00-introduction.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch00-00-introduction.md"},{"source":"SUMMARY.md","target":"ch00-00-introduction.md"}]}}}');export{l as comp,d as data};
