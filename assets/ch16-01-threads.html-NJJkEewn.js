import{_ as d,e as t,j as i,f as n,i as s,g as r,h as l,r as o,o as c}from"./app-BUAJ0pNw.js";const p={};function h(m,e){const a=o("RouteLink");return c(),t("div",null,[e[12]||(e[12]=i(`<h2 id="使用线程同时运行代码" tabindex="-1">使用线程同时运行代码</h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch16-01-threads.md" target="_blank" rel="noopener noreferrer">ch16-01-threads.md</a><br><br><br> commit 8aecae3efe5ca8f79f055b70f05d9a3f990bce7b</p></blockquote><p>在大部分现代操作系统中，已执行程序的代码在一个 <strong>进程</strong>（<em>process</em>）中运行，操作系统则会负责管理多个进程。在程序内部，也可以拥有多个同时运行的独立部分。这些运行这些独立部分的功能被称为 <strong>线程</strong>（<em>threads</em>）。例如，web 服务器可以有多个线程以便可以同时响应多个请求。</p><p>将程序中的计算拆分进多个线程可以改善性能，因为程序可以同时进行多个任务，不过这也会增加复杂性。因为线程是同时运行的，所以无法预先保证不同线程中的代码的执行顺序。这会导致诸如此类的问题：</p><ul><li>竞态条件（Race conditions），多个线程以不一致的顺序访问数据或资源</li><li>死锁（Deadlocks），两个线程相互等待对方，这会阻止两者继续运行</li><li>只会发生在特定情况且难以稳定重现和修复的 bug</li></ul><p>Rust 尝试减轻使用线程的负面影响。不过在多线程上下文中编程仍需格外小心，同时其所要求的代码结构也不同于运行于单线程的程序。</p><p>编程语言有一些不同的方法来实现线程，而且很多操作系统提供了创建新线程的 API。Rust 标准库使用 <em>1:1</em> 线程实现，这代表程序的每一个语言级线程使用一个系统线程。有一些 crate 实现了其他有着不同于 1:1 模型取舍的线程模型。</p><h3 id="使用-spawn-创建新线程" tabindex="-1">使用 <code>spawn</code> 创建新线程</h3><p>为了创建一个新线程，需要调用 <code>thread::spawn</code> 函数并传递一个闭包（第十三章学习了闭包），并在其中包含希望在新线程运行的代码。示例 16-1 中的例子在主线程打印了一些文本而另一些文本则由新线程打印：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-01/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 16-1: 创建一个打印某些内容的新线程，但是主线程打印其它内容</span></p><p>注意当 Rust 程序的主线程结束时，新线程也会结束，而不管其是否执行完毕。这个程序的输出可能每次都略有不同，不过它大体上看起来像这样：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hi number 1 from the main thread!</span></span>
<span class="line"><span>hi number 1 from the spawned thread!</span></span>
<span class="line"><span>hi number 2 from the main thread!</span></span>
<span class="line"><span>hi number 2 from the spawned thread!</span></span>
<span class="line"><span>hi number 3 from the main thread!</span></span>
<span class="line"><span>hi number 3 from the spawned thread!</span></span>
<span class="line"><span>hi number 4 from the main thread!</span></span>
<span class="line"><span>hi number 4 from the spawned thread!</span></span>
<span class="line"><span>hi number 5 from the spawned thread!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>thread::sleep</code> 调用强制线程停止执行一小段时间，这会允许其他不同的线程运行。这些线程可能会轮流运行，不过并不保证如此：这依赖操作系统如何调度线程。在这里，主线程首先打印，即便新创建线程的打印语句位于程序的开头，甚至即便我们告诉新建的线程打印直到 <code>i</code> 等于 9，它在主线程结束之前也只打印到了 5。</p><p>如果运行代码只看到了主线程的输出，或没有出现重叠打印的现象，尝试增大区间 (变量 <code>i</code> 的范围) 来增加操作系统切换线程的机会。</p><h4 id="使用-join-等待所有线程结束" tabindex="-1">使用 <code>join</code> 等待所有线程结束</h4><p>由于主线程结束，示例 16-1 中的代码大部分时候不光会提早结束新建线程，因为无法保证线程运行的顺序，我们甚至不能实际保证新建线程会被执行！</p><p>可以通过将 <code>thread::spawn</code> 的返回值储存在变量中来修复新建线程部分没有执行或者完全没有执行的问题。<code>thread::spawn</code> 的返回值类型是 <code>JoinHandle</code>。<code>JoinHandle</code> 是一个拥有所有权的值，当对其调用 <code>join</code> 方法时，它会等待其线程结束。示例 16-2 展示了如何使用示例 16-1 中创建的线程的 <code>JoinHandle</code> 并调用 <code>join</code> 来确保新建线程在 <code>main</code> 退出前结束运行：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-02/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 16-2: 从 <code>thread::spawn</code> 保存一个 <code>JoinHandle</code> 以确保该线程能够运行至结束</span></p><p>通过调用 handle 的 <code>join</code> 会阻塞当前线程直到 handle 所代表的线程结束。<strong>阻塞</strong>（<em>Blocking</em>）线程意味着阻止该线程执行工作或退出。因为我们将 <code>join</code> 调用放在了主线程的 <code>for</code> 循环之后，运行示例 16-2 应该会产生类似这样的输出：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hi number 1 from the main thread!</span></span>
<span class="line"><span>hi number 2 from the main thread!</span></span>
<span class="line"><span>hi number 1 from the spawned thread!</span></span>
<span class="line"><span>hi number 3 from the main thread!</span></span>
<span class="line"><span>hi number 2 from the spawned thread!</span></span>
<span class="line"><span>hi number 4 from the main thread!</span></span>
<span class="line"><span>hi number 3 from the spawned thread!</span></span>
<span class="line"><span>hi number 4 from the spawned thread!</span></span>
<span class="line"><span>hi number 5 from the spawned thread!</span></span>
<span class="line"><span>hi number 6 from the spawned thread!</span></span>
<span class="line"><span>hi number 7 from the spawned thread!</span></span>
<span class="line"><span>hi number 8 from the spawned thread!</span></span>
<span class="line"><span>hi number 9 from the spawned thread!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个线程仍然会交替执行，不过主线程会由于 <code>handle.join()</code> 调用会等待直到新建线程执行完毕。</p><p>不过让我们看看将 <code>handle.join()</code> 移动到 <code>main</code> 中 <code>for</code> 循环之前会发生什么，如下：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch16-fearless-concurrency/no-listing-01-join-too-early/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>主线程会等待直到新建线程执行完毕之后才开始执行 <code>for</code> 循环，所以输出将不会交替出现，如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hi number 1 from the spawned thread!</span></span>
<span class="line"><span>hi number 2 from the spawned thread!</span></span>
<span class="line"><span>hi number 3 from the spawned thread!</span></span>
<span class="line"><span>hi number 4 from the spawned thread!</span></span>
<span class="line"><span>hi number 5 from the spawned thread!</span></span>
<span class="line"><span>hi number 6 from the spawned thread!</span></span>
<span class="line"><span>hi number 7 from the spawned thread!</span></span>
<span class="line"><span>hi number 8 from the spawned thread!</span></span>
<span class="line"><span>hi number 9 from the spawned thread!</span></span>
<span class="line"><span>hi number 1 from the main thread!</span></span>
<span class="line"><span>hi number 2 from the main thread!</span></span>
<span class="line"><span>hi number 3 from the main thread!</span></span>
<span class="line"><span>hi number 4 from the main thread!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>诸如将 <code>join</code> 放置于何处这样的小细节，会影响线程是否同时运行。</p><h3 id="将-move-闭包与线程一同使用" tabindex="-1">将 <code>move</code> 闭包与线程一同使用</h3>`,32)),n("p",null,[e[1]||(e[1]=n("code",null,"move",-1)),e[2]||(e[2]=s(" 关键字经常用于传递给 ")),e[3]||(e[3]=n("code",null,"thread::spawn",-1)),e[4]||(e[4]=s(" 的闭包，因为闭包会获取从环境中取得的值的所有权，因此会将这些值的所有权从一个线程传送到另一个线程。在第十三章 ")),r(a,{to:"/ch13-01-closures.html#%E9%97%AD%E5%8C%85%E4%BC%9A%E6%8D%95%E8%8E%B7%E5%85%B6%E7%8E%AF%E5%A2%83"},{default:l(()=>e[0]||(e[0]=[s("“闭包会捕获其环境”")])),_:1}),e[5]||(e[5]=s(" 部分讨论了闭包上下文中的 ")),e[6]||(e[6]=n("code",null,"move",-1)),e[7]||(e[7]=s("。现在我们会更专注于 ")),e[8]||(e[8]=n("code",null,"move",-1)),e[9]||(e[9]=s(" 和 ")),e[10]||(e[10]=n("code",null,"thread::spawn",-1)),e[11]||(e[11]=s(" 之间的交互。"))]),e[13]||(e[13]=i('<p>在第十三章中，我们讲到可以在参数列表前使用 <code>move</code> 关键字强制闭包获取其使用的环境值的所有权。这个技巧在创建新线程将值的所有权从一个线程移动到另一个线程时最为实用。</p><p>注意示例 16-1 中传递给 <code>thread::spawn</code> 的闭包并没有任何参数：并没有在新建线程代码中使用任何主线程的数据。为了在新建线程中使用来自于主线程的数据，需要新建线程的闭包获取它需要的值。示例 16-3 展示了一个尝试在主线程中创建一个 vector 并用于新建线程的例子，不过这么写还不能工作，如下所示：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-03/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 16-3: 尝试在另一个线程使用主线程创建的 vector</span></p><p>闭包使用了 <code>v</code>，所以闭包会捕获 <code>v</code> 并使其成为闭包环境的一部分。因为 <code>thread::spawn</code> 在一个新线程中运行这个闭包，所以可以在新线程中访问 <code>v</code>。然而当编译这个例子时，会得到如下错误：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch16-fearless-concurrency/listing-16-03/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust 会 <strong>推断</strong> 如何捕获 <code>v</code>，因为 <code>println!</code> 只需要 <code>v</code> 的引用，闭包尝试借用 <code>v</code>。然而这有一个问题：Rust 不知道这个新建线程会执行多久，所以无法知晓对 <code>v</code> 的引用是否一直有效。</p><p>示例 16-4 展示了一个 <code>v</code> 的引用很有可能不再有效的场景：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust,ignore,does_not_compile line-numbers-mode" data-highlighter="shiki" data-ext="rust,ignore,does_not_compile" data-title="rust,ignore,does_not_compile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-04/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 16-4: 一个具有闭包的线程，尝试使用一个在主线程中被回收的引用 <code>v</code></span></p><p>如果 Rust 允许这段代码运行，则新建线程则可能会立刻被转移到后台并完全没有机会运行。新建线程内部有一个 <code>v</code> 的引用，不过主线程立刻就使用第十五章讨论的 <code>drop</code> 丢弃了 <code>v</code>。接着当新建线程开始执行，<code>v</code> 已不再有效，所以其引用也是无效的。噢，这太糟了！</p><p>为了修复示例 16-3 的编译错误，我们可以听取错误信息的建议：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword</span></span>\n<span class="line"><span>  |</span></span>\n<span class="line"><span>6 |     let handle = thread::spawn(move || {</span></span>\n<span class="line"><span>  |                                ++++</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在闭包之前增加 <code>move</code> 关键字，我们强制闭包获取其使用的值的所有权，而不是任由 Rust 推断它应该借用值。示例 16-5 中展示的对示例 16-3 代码的修改，可以按照我们的预期编译并运行：</p><p><span class="filename">文件名：src/main.rs</span></p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-05/src/main.rs}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="caption">示例 16-5: 使用 <code>move</code> 关键字强制获取它使用的值的所有权</span></p><p>我们可能希望尝试同样的方法来修复示例 16-4 中的代码，其主线程使用 <code>move</code> 闭包调用了 <code>drop</code>。然而这个修复行不通，因为示例 16-4 所尝试的操作由于一个不同的原因而不被允许。如果为闭包增加 <code>move</code>，将会把 <code>v</code> 移动进闭包的环境中，如此将不能在主线程中对其调用 <code>drop</code> 了。我们会得到如下不同的编译错误：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{#include ../listings/ch16-fearless-concurrency/output-only-01-move-drop/output.txt}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rust 的所有权规则又一次帮助了我们！示例 16-3 中的错误是因为 Rust 是保守的并只会为线程借用 <code>v</code>，这意味着主线程理论上可能使新建线程的引用无效。通过告诉 Rust 将 <code>v</code> 的所有权移动到新建线程，我们向 Rust 保证主线程不会再使用 <code>v</code>。如果对示例 16-4 也做出如此修改，那么当在主线程中使用 <code>v</code> 时就会违反所有权规则。 <code>move</code> 关键字覆盖了 Rust 默认保守的借用，但它不允许我们违反所有权规则。</p><p>现在我们对线程和线程 API 有了基本的了解，让我们讨论一下使用线程实际可以 <strong>做</strong> 什么吧。</p>',23))])}const b=d(p,[["render",h],["__file","ch16-01-threads.html.vue"]]),v=JSON.parse('{"path":"/ch16-01-threads.html","title":"ch16-01-threads","lang":"zh-CN","frontmatter":{"description":"使用线程同时运行代码 ch16-01-threads.md commit 8aecae3efe5ca8f79f055b70f05d9a3f990bce7b 在大部分现代操作系统中，已执行程序的代码在一个 进程（process）中运行，操作系统则会负责管理多个进程。在程序内部，也可以拥有多个同时运行的独立部分。这些运行这些独立部分的功能被称为 线程（th...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/trpl-zh-cn/ch16-01-threads.html"}],["meta",{"property":"og:site_name","content":"trpl-zh-cn"}],["meta",{"property":"og:description","content":"使用线程同时运行代码 ch16-01-threads.md commit 8aecae3efe5ca8f79f055b70f05d9a3f990bce7b 在大部分现代操作系统中，已执行程序的代码在一个 进程（process）中运行，操作系统则会负责管理多个进程。在程序内部，也可以拥有多个同时运行的独立部分。这些运行这些独立部分的功能被称为 线程（th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":9.06,"words":2719},"filePathRelative":"ch16-01-threads.md","excerpt":"<h2>使用线程同时运行代码</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/rust-lang/book/blob/main/src/ch16-01-threads.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ch16-01-threads.md</a><br>\\n<br><br>\\ncommit 8aecae3efe5ca8f79f055b70f05d9a3f990bce7b</p>\\n</blockquote>\\n<p>在大部分现代操作系统中，已执行程序的代码在一个 <strong>进程</strong>（<em>process</em>）中运行，操作系统则会负责管理多个进程。在程序内部，也可以拥有多个同时运行的独立部分。这些运行这些独立部分的功能被称为 <strong>线程</strong>（<em>threads</em>）。例如，web 服务器可以有多个线程以便可以同时响应多个请求。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"ch16-01-threads.md","value":{"title":"ch16-01-threads","path":"ch16-01-threads.md","outlink":[],"backlink":["README.md","SUMMARY.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"ch16-01-threads.md"},{"source":"SUMMARY.md","target":"ch16-01-threads.md"}]}}}');export{b as comp,v as data};
